{"id":"64909bb0cc4056d2728005b8674c224e","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/access/Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            revert OwnableUnauthorizedAccount(sender);\n        }\n        _transferOwnership(sender);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/ShortStrings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/Payfluence.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./TokenReceiver.sol\";\n\ncontract Payfluence is\n  Ownable2Step,\n  ReentrancyGuard,\n  EIP712,\n  TokenReceiver\n{\n  error InvalidSigner();\n  error AirdropAlreadyClaimed();\n  error TransferFailed();\n  error OnlyAirdropOwner();\n  error OnlyTokenOwner();\n\n  address private adminAddress;\n\n  mapping(string airdropId => address owner) public airdropOwners;\n  mapping(string airdropId => mapping(address recipient => uint256 amountClaimed)) public airdropClaimedAmounts;\n\n  struct AirdropMessage {\n    string airdropId;\n    address token;\n    address owner;\n    address recipient;\n    uint256 amountClaimable;\n    // string ownerSignature;\n  }\n  \n  bytes32 private constant AIRDROP_MESSAGE_TYPE = keccak256(\"AirdropMessage(string airdropId,address token,address owner,address recipient,uint256 amountClaimable)\");\n\n  modifier onlyAirdropOwner(string memory airdropId) {\n    if (airdropOwners[airdropId] != address(0) && msg.sender != airdropOwners[airdropId]) {\n      revert OnlyAirdropOwner();\n    }\n    _;\n  }\n\n  modifier onlyTokenOwner(address owner) {\n    if (msg.sender != owner) {\n      revert OnlyTokenOwner();\n    }\n    _;\n  }\n\n  constructor(address _adminAddress)\n    Ownable(msg.sender)\n    EIP712(\"Payfluence\", \"1\")\n  {\n    adminAddress = _adminAddress;\n  }\n\n  function setAdminAddress(address _adminAddress) public onlyOwner {\n    adminAddress = _adminAddress;\n  }\n\n\n  function getChainId() external view returns (uint256) {\n    return block.chainid;\n  }\n\n  // AIRDROP\n\n  function _verify(\n    bytes memory signature,\n    AirdropMessage memory airdropMessage\n  ) internal view {\n    bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n      AIRDROP_MESSAGE_TYPE,\n      keccak256(bytes(airdropMessage.airdropId)),\n      airdropMessage.token,\n      airdropMessage.owner,\n      airdropMessage.recipient,\n      airdropMessage.amountClaimable\n    )));\n    \n    address recoveredSigner = ECDSA.recover(digest, signature);\n\n    if (recoveredSigner != adminAddress) {\n      revert InvalidSigner();\n    }\n  }\n\n  function verify(\n      bytes memory signature,\n      AirdropMessage memory airdropMessage\n  ) public view returns (bool) {\n    _verify(signature, airdropMessage);\n\n    return true;\n  }\n\n  function claimAirdrop(\n    bytes memory signature,\n    AirdropMessage memory airdropMessage\n  ) public nonReentrant {\n    _verify(signature, airdropMessage);\n\n    if (airdropClaimedAmounts[airdropMessage.airdropId][airdropMessage.recipient] >= airdropMessage.amountClaimable) {\n      revert AirdropAlreadyClaimed();\n    }\n\n    airdropClaimedAmounts[airdropMessage.airdropId][airdropMessage.recipient] = airdropMessage.amountClaimable;\n\n    _transferERC20(airdropMessage.airdropId, airdropMessage.recipient, airdropMessage.token, airdropMessage.amountClaimable);\n  }\n\n  // FUNDING\n  \n  function fundNative() public payable {\n    // nothing to do\n  }\n\n  function getBalance(string memory id, address token) public view returns (uint256) {\n      return contractBalance[id].erc20[token];\n  }\n\n  function fundERC20(\n    string memory _airdropId,\n    address _owner,\n    address _token,\n    uint256 _amount\n  ) public nonReentrant onlyAirdropOwner(_airdropId) onlyTokenOwner(_owner) {\n    // initialize airdrop owner if not set\n    if (airdropOwners[_airdropId] == address(0)) {\n      airdropOwners[_airdropId] = _owner;\n    }\n\n    IERC20(_token).transferFrom(_owner, address(this), _amount);\n    _fundERC20(_airdropId, _owner, _token, _amount);\n  }\n\n  function withdrawERC20(\n    string memory _airdropId,\n    address _to,\n    address _token,\n    uint256 _amount\n  ) public nonReentrant onlyAirdropOwner(_airdropId) {\n    _transferERC20(_airdropId, _to, _token, _amount);\n  }\n\n  // ADMIN\n\n  function adminTransferAirdropOwnership(string memory _airdropId, address _newOwner) public onlyOwner {\n    airdropOwners[_airdropId] = _newOwner;\n  }\n\n  function adminWithdrawNative(address _to) public onlyOwner {\n    uint256 amount = address(this).balance;\n\n    (bool success, ) = _to.call{value: amount}(\"\");\n    if (!success) revert TransferFailed();\n  }\n\n  function adminWithdrawERC20(\n    address _to,\n    string memory _airdropId,\n    address _token,\n    uint256 _amount\n  ) public onlyOwner {\n    _transferERC20(_airdropId, _to, _token, _amount);\n  }\n}"},"contracts/TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\ncontract TokenReceiver is\n    IERC721Receiver,\n    IERC1155Receiver\n{\n    enum AssetType {\n        NONE,\n        NATIVE,\n        ERC20,\n        ERC721,\n        ERC1155\n    }\n\n    uint256 totalNativeBalance = 0;\n\n    struct AssetBalance {\n        uint256 native;\n        mapping(address token => uint256) erc20;\n        mapping(address token => mapping(uint256 tokenId => bool)) erc721;\n        mapping(address token => mapping(uint256 tokenId => uint256)) erc1155;\n    }\n\n    mapping(string id => AssetBalance) public contractBalance;\n\n    // internal variables\n\n    mapping(address token => AssetType assetType) internal assetTypeMap;\n\n    // events\n\n    event NativeReceived(string id, address from, uint256 amount);\n\n    event ERC20Received(\n        string id,\n        address from,\n        address token,\n        uint256 amount\n    );\n\n    event ERC721Received(\n        string id,\n        address operator,\n        address from,\n        uint256 tokenId\n    );\n\n    event ERC1155Received(\n        string id,\n        address operator,\n        address from,\n        uint256 tokenIds,\n        uint256 amounts\n    );\n    \n    event ERC1155BatchReceived(\n        string id,\n        address operator,\n        address from,\n        uint256[] tokenIds,\n        uint256[] amounts\n    );\n\n    // errors\n\n    error AssetNotFound(string id, address token);\n    error InvalidAssetType(AssetType assetType);\n    error AssetTypeNotFoundForToken(address token);\n\n    error TransferNativeFailed(string id, address to, uint256 amount);\n    \n    error NotEnoughFunds(string id, AssetType assetType, address token, uint256 tokenId, uint256 amount);\n\n    // internal helpers\n\n\n    function _getAssetType(address token) internal view returns (AssetType) {\n        if (assetTypeMap[token] == AssetType.NONE)\n            revert AssetTypeNotFoundForToken(token);\n\n        return assetTypeMap[token];\n    }\n\n    function _detectAssetTypeFromInterfaceId(\n        address token\n    ) internal view returns (AssetType) {\n        if (token == address(0)) {\n            return AssetType.NATIVE;\n        } else if (IERC1155(token).supportsInterface(0xd9b67a26)) {\n            return AssetType.ERC1155;\n        } else if (IERC721(token).supportsInterface(0x80ac58cd)) {\n            return AssetType.ERC721;\n        } else if (IERC20(token).totalSupply() > 0) {\n            return AssetType.ERC20;\n        }\n\n        return AssetType.NONE;\n    }\n\n    // fund assets\n\n    receive() external payable {}\n\n    function _fundNative(\n        string memory id,\n        uint256 amount\n    ) internal {\n        contractBalance[id].native += amount;\n        \n        emit NativeReceived(id, msg.sender, amount);\n    }\n\n    function _fundERC20(\n        string memory id,\n        address from,\n        address token,\n        uint256 amount\n    ) internal {\n        contractBalance[id].erc20[token] += amount;\n        \n        emit ERC20Received(id, from, token, amount);\n    }\n\n    function _fundERC721(\n        string memory id,\n        address from,\n        address token,\n        uint256 tokenId\n    ) internal {\n        contractBalance[id].erc721[token][tokenId] = true;\n\n        emit ERC721Received(id, from, token, tokenId);\n    }\n\n    function _fundERC1155(\n        string memory id,\n        address from,\n        address token,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        contractBalance[id].erc1155[token][tokenId] += amount;\n\n        emit ERC1155Received(id, from, token, tokenId, amount);\n    }\n\n    function _fundERC1155Batch(\n        string memory id,\n        address from,\n        address token,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts\n    ) internal {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            contractBalance[id].erc1155[token][tokenIds[i]] += amounts[i];\n        }\n\n        emit ERC1155BatchReceived(id, from, token, tokenIds, amounts);\n    }\n\n    // transfer assets\n\n    function _transferNative(\n        string memory id,\n        address payable to,\n        uint256 amount\n    ) internal {\n        if (contractBalance[id].native < amount)\n            revert NotEnoughFunds(id, AssetType.NATIVE, address(0), 0, amount);\n\n        contractBalance[id].native -= amount;\n\n        (bool success, ) = to.call{value: amount}(\"\");\n        if (!success) revert TransferNativeFailed(id, to, amount);\n    }\n\n    function _transferFromERC20(\n        string memory id,\n        address to,\n        address token,\n        uint256 amount\n    ) internal {\n        if (contractBalance[id].erc20[token] < amount)\n            revert NotEnoughFunds(id, AssetType.ERC20, token, 0, amount);\n\n        contractBalance[id].erc20[token] -= amount;\n\n        IERC20(token).transferFrom(address(this), to, amount);\n    }\n\n    function _transferERC20(\n        string memory id,\n        address to,\n        address token,\n        uint256 amount\n    ) internal {\n        if (contractBalance[id].erc20[token] < amount)\n            revert NotEnoughFunds(id, AssetType.ERC20, token, 0, amount);\n\n        contractBalance[id].erc20[token] -= amount;\n\n        IERC20(token).transfer(to, amount);\n    }\n\n    function _safeTransferERC721(\n        string memory id,\n        address to,\n        address token,\n        uint256 tokenId,\n        bytes memory data\n    ) internal {\n        if (!contractBalance[id].erc721[token][tokenId])\n            revert NotEnoughFunds(id, AssetType.ERC721, token, tokenId, 0);\n\n        contractBalance[id].erc721[token][tokenId] = false;\n\n        IERC721(token).safeTransferFrom(address(this), to, tokenId, data);\n    }\n\n    function _safeTransferERC1155(\n        string memory id,\n        address to,\n        address token,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory data\n    ) internal {\n        if (contractBalance[id].erc1155[token][tokenId] < amount)\n            revert NotEnoughFunds(id, AssetType.ERC1155, token, tokenId, amount);\n\n        contractBalance[id].erc1155[token][tokenId] -= amount;\n\n        IERC1155(token).safeTransferFrom(\n            address(this),\n            to,\n            tokenId,\n            amount,\n            data\n        );\n    }\n\n    function _safeBatchTransferERC1155(\n        string memory id,\n        address to,\n        address token,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            if (contractBalance[id].erc1155[token][tokenIds[i]] < amounts[i])\n                revert NotEnoughFunds(id, AssetType.ERC1155, token, tokenIds[i], amounts[i]);\n\n            contractBalance[id].erc1155[token][tokenIds[i]] -= amounts[i];\n        }\n\n        IERC1155(token).safeBatchTransferFrom(\n            address(this),\n            to,\n            tokenIds,\n            amounts,\n            data\n        );\n    }\n\n    // _withdrawBatchAssets()\n\n    // hooks\n\n    function onERC721Received(\n        address, // operator,\n        address, // from,\n        uint256, // tokenId,\n        bytes calldata // data\n    ) external virtual override returns (bytes4) {\n        return 0x150b7a02;\n    }\n\n    function onERC1155Received(\n        address, // operator,\n        address, // from,\n        uint256, // id,\n        uint256, // value,\n        bytes calldata // data\n    ) external virtual override returns (bytes4) {\n        return 0xf23a6e61;\n    }\n\n    function onERC1155BatchReceived(\n        address, // operator,\n        address, // from,\n        uint256[] calldata, // ids,\n        uint256[] calldata, // values,\n        bytes calldata // data\n    ) external virtual override returns (bytes4) {\n        return 0xbc197c81;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[666],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":667,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":666,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,666],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/access/Ownable2Step.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable2Step.sol","exportedSymbols":{"Ownable":[147],"Ownable2Step":[233]},"id":234,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:1"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"./Ownable.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":234,"sourceUnit":148,"src":"133:38:1","symbolAliases":[{"foreign":{"id":150,"name":"Ownable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"141:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":153,"name":"Ownable","nameLocations":["660:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"660:7:1"},"id":154,"nodeType":"InheritanceSpecifier","src":"660:7:1"}],"canonicalName":"Ownable2Step","contractDependencies":[],"contractKind":"contract","documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"173:452:1","text":" @dev Contract module which provides access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is specified at deployment time in the constructor for `Ownable`. This\n can later be changed with {transferOwnership} and {acceptOwnership}.\n This module is used through inheritance. It will make available all functions\n from parent (Ownable)."},"fullyImplemented":true,"id":233,"linearizedBaseContracts":[233,147,666],"name":"Ownable2Step","nameLocation":"644:12:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":156,"mutability":"mutable","name":"_pendingOwner","nameLocation":"690:13:1","nodeType":"VariableDeclaration","scope":233,"src":"674:29:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"674:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700","id":162,"name":"OwnershipTransferStarted","nameLocation":"716:24:1","nodeType":"EventDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"757:13:1","nodeType":"VariableDeclaration","scope":162,"src":"741:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":157,"name":"address","nodeType":"ElementaryTypeName","src":"741:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":160,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"788:8:1","nodeType":"VariableDeclaration","scope":162,"src":"772:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":159,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"740:57:1"},"src":"710:88:1"},{"body":{"id":170,"nodeType":"Block","src":"936:37:1","statements":[{"expression":{"id":168,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"953:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":167,"id":169,"nodeType":"Return","src":"946:20:1"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"804:65:1","text":" @dev Returns the address of the pending owner."},"functionSelector":"e30c3978","id":171,"implemented":true,"kind":"function","modifiers":[],"name":"pendingOwner","nameLocation":"883:12:1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"895:2:1"},"returnParameters":{"id":167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":171,"src":"927:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"927:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"926:9:1"},"scope":233,"src":"874:99:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[126],"body":{"id":190,"nodeType":"Block","src":"1245:99:1","statements":[{"expression":{"id":182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":180,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1255:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":181,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"1271:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1255:24:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":183,"nodeType":"ExpressionStatement","src":"1255:24:1"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":185,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1319:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1319:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":187,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"1328:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":184,"name":"OwnershipTransferStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1294:24:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1294:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":189,"nodeType":"EmitStatement","src":"1289:48:1"}]},"documentation":{"id":172,"nodeType":"StructuredDocumentation","src":"979:182:1","text":" @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":191,"implemented":true,"kind":"function","modifiers":[{"id":178,"kind":"modifierInvocation","modifierName":{"id":177,"name":"onlyOwner","nameLocations":["1235:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1235:9:1"},"nodeType":"ModifierInvocation","src":"1235:9:1"}],"name":"transferOwnership","nameLocation":"1175:17:1","nodeType":"FunctionDefinition","overrides":{"id":176,"nodeType":"OverrideSpecifier","overrides":[],"src":"1226:8:1"},"parameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"newOwner","nameLocation":"1201:8:1","nodeType":"VariableDeclaration","scope":191,"src":"1193:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1192:18:1"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"1245:0:1"},"scope":233,"src":"1166:178:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[146],"body":{"id":207,"nodeType":"Block","src":"1600:81:1","statements":[{"expression":{"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1610:20:1","subExpression":{"id":198,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1617:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":200,"nodeType":"ExpressionStatement","src":"1610:20:1"},{"expression":{"arguments":[{"id":204,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1665:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":201,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1640:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Ownable2Step_$233_$","typeString":"type(contract super Ownable2Step)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1646:18:1","memberName":"_transferOwnership","nodeType":"MemberAccess","referencedDeclaration":146,"src":"1640:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1640:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"1640:34:1"}]},"documentation":{"id":192,"nodeType":"StructuredDocumentation","src":"1350:173:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n Internal function without access restriction."},"id":208,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1537:18:1","nodeType":"FunctionDefinition","overrides":{"id":196,"nodeType":"OverrideSpecifier","overrides":[],"src":"1591:8:1"},"parameters":{"id":195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":194,"mutability":"mutable","name":"newOwner","nameLocation":"1564:8:1","nodeType":"VariableDeclaration","scope":208,"src":"1556:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1556:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1555:18:1"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[],"src":"1600:0:1"},"scope":233,"src":"1528:153:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":231,"nodeType":"Block","src":"1803:187:1","statements":[{"assignments":[213],"declarations":[{"constant":false,"id":213,"mutability":"mutable","name":"sender","nameLocation":"1821:6:1","nodeType":"VariableDeclaration","scope":231,"src":"1813:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":212,"name":"address","nodeType":"ElementaryTypeName","src":"1813:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":216,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":214,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"1830:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1830:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1813:29:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":217,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"1856:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1856:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":219,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1874:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1856:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":226,"nodeType":"IfStatement","src":"1852:96:1","trueBody":{"id":225,"nodeType":"Block","src":"1882:66:1","statements":[{"errorCall":{"arguments":[{"id":222,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1930:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":221,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1903:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1903:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"RevertStatement","src":"1896:41:1"}]}},{"expression":{"arguments":[{"id":228,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1976:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[208],"referencedDeclaration":208,"src":"1957:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":230,"nodeType":"ExpressionStatement","src":"1957:26:1"}]},"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"1687:69:1","text":" @dev The new owner accepts the ownership transfer."},"functionSelector":"79ba5097","id":232,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1770:15:1","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"1785:2:1"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[],"src":"1803:0:1"},"scope":233,"src":"1761:229:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":234,"src":"626:1366:1","usedErrors":[13,18],"usedEvents":[24,162]}],"src":"107:1886:1"},"id":1},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","exportedSymbols":{"IERC5267":[258]},"id":259,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":235,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC5267","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":258,"linearizedBaseContracts":[258],"name":"IERC5267","nameLocation":"143:8:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"158:84:2","text":" @dev MAY be emitted to signal that the domain could have changed."},"eventSelector":"0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31","id":238,"name":"EIP712DomainChanged","nameLocation":"253:19:2","nodeType":"EventDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"272:2:2"},"src":"247:28:2"},{"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"281:140:2","text":" @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."},"functionSelector":"84b0196e","id":257,"implemented":false,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"435:12:2","nodeType":"FunctionDefinition","parameters":{"id":240,"nodeType":"ParameterList","parameters":[],"src":"447:2:2"},"returnParameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"fields","nameLocation":"517:6:2","nodeType":"VariableDeclaration","scope":257,"src":"510:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":241,"name":"bytes1","nodeType":"ElementaryTypeName","src":"510:6:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"name","nameLocation":"551:4:2","nodeType":"VariableDeclaration","scope":257,"src":"537:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":243,"name":"string","nodeType":"ElementaryTypeName","src":"537:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"version","nameLocation":"583:7:2","nodeType":"VariableDeclaration","scope":257,"src":"569:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":245,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"chainId","nameLocation":"612:7:2","nodeType":"VariableDeclaration","scope":257,"src":"604:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":250,"mutability":"mutable","name":"verifyingContract","nameLocation":"641:17:2","nodeType":"VariableDeclaration","scope":257,"src":"633:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"salt","nameLocation":"680:4:2","nodeType":"VariableDeclaration","scope":257,"src":"672:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"672:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"extensions","nameLocation":"715:10:2","nodeType":"VariableDeclaration","scope":257,"src":"698:27:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"698:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":254,"nodeType":"ArrayTypeName","src":"698:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"496:239:2"},"scope":258,"src":"426:310:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":259,"src":"133:605:2","usedErrors":[],"usedEvents":[238]}],"src":"107:632:2"},"id":2},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[381],"IERC165":[1978]},"id":382,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":260,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"110:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":262,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":382,"sourceUnit":1979,"src":"136:62:3","symbolAliases":[{"foreign":{"id":261,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"144:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":264,"name":"IERC165","nameLocations":["358:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"358:7:3"},"id":265,"nodeType":"InheritanceSpecifier","src":"358:7:3"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":263,"nodeType":"StructuredDocumentation","src":"200:135:3","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP]."},"fullyImplemented":false,"id":381,"linearizedBaseContracts":[381,1978],"name":"IERC1155","nameLocation":"346:8:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":266,"nodeType":"StructuredDocumentation","src":"372:125:3","text":" @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":278,"name":"TransferSingle","nameLocation":"508:14:3","nodeType":"EventDefinition","parameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"539:8:3","nodeType":"VariableDeclaration","scope":278,"src":"523:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":267,"name":"address","nodeType":"ElementaryTypeName","src":"523:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":270,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"565:4:3","nodeType":"VariableDeclaration","scope":278,"src":"549:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":272,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"587:2:3","nodeType":"VariableDeclaration","scope":278,"src":"571:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"571:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":274,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"599:2:3","nodeType":"VariableDeclaration","scope":278,"src":"591:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":276,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"611:5:3","nodeType":"VariableDeclaration","scope":278,"src":"603:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:95:3"},"src":"502:116:3"},{"anonymous":false,"documentation":{"id":279,"nodeType":"StructuredDocumentation","src":"624:144:3","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":293,"name":"TransferBatch","nameLocation":"779:13:3","nodeType":"EventDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"818:8:3","nodeType":"VariableDeclaration","scope":293,"src":"802:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"802:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":283,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"852:4:3","nodeType":"VariableDeclaration","scope":293,"src":"836:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":285,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"882:2:3","nodeType":"VariableDeclaration","scope":293,"src":"866:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":288,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"904:3:3","nodeType":"VariableDeclaration","scope":293,"src":"894:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":287,"nodeType":"ArrayTypeName","src":"894:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":291,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"927:6:3","nodeType":"VariableDeclaration","scope":293,"src":"917:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"917:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":290,"nodeType":"ArrayTypeName","src":"917:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"792:147:3"},"src":"773:167:3"},{"anonymous":false,"documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"946:147:3","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":302,"name":"ApprovalForAll","nameLocation":"1104:14:3","nodeType":"EventDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1135:7:3","nodeType":"VariableDeclaration","scope":302,"src":"1119:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":295,"name":"address","nodeType":"ElementaryTypeName","src":"1119:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":298,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1160:8:3","nodeType":"VariableDeclaration","scope":302,"src":"1144:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"1144:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":300,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1175:8:3","nodeType":"VariableDeclaration","scope":302,"src":"1170:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":299,"name":"bool","nodeType":"ElementaryTypeName","src":"1170:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1118:66:3"},"src":"1098:87:3"},{"anonymous":false,"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"1191:343:3","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":309,"name":"URI","nameLocation":"1545:3:3","nodeType":"EventDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1556:5:3","nodeType":"VariableDeclaration","scope":309,"src":"1549:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":304,"name":"string","nodeType":"ElementaryTypeName","src":"1549:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":307,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1579:2:3","nodeType":"VariableDeclaration","scope":309,"src":"1563:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":306,"name":"uint256","nodeType":"ElementaryTypeName","src":"1563:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1548:34:3"},"src":"1539:44:3"},{"documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"1589:172:3","text":" @dev Returns the value of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":319,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1775:9:3","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"account","nameLocation":"1793:7:3","nodeType":"VariableDeclaration","scope":319,"src":"1785:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":311,"name":"address","nodeType":"ElementaryTypeName","src":"1785:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":314,"mutability":"mutable","name":"id","nameLocation":"1810:2:3","nodeType":"VariableDeclaration","scope":319,"src":"1802:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"1802:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1784:29:3"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"1837:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"1837:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1836:9:3"},"scope":381,"src":"1766:80:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"1852:188:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":332,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2054:14:3","nodeType":"FunctionDefinition","parameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"accounts","nameLocation":"2097:8:3","nodeType":"VariableDeclaration","scope":332,"src":"2078:27:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"2078:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":322,"nodeType":"ArrayTypeName","src":"2078:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":326,"mutability":"mutable","name":"ids","nameLocation":"2134:3:3","nodeType":"VariableDeclaration","scope":332,"src":"2115:22:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":324,"name":"uint256","nodeType":"ElementaryTypeName","src":"2115:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":325,"nodeType":"ArrayTypeName","src":"2115:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2068:75:3"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":332,"src":"2167:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"2167:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":329,"nodeType":"ArrayTypeName","src":"2167:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2166:18:3"},"scope":381,"src":"2045:140:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"2191:248:3","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":340,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2453:17:3","nodeType":"FunctionDefinition","parameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"operator","nameLocation":"2479:8:3","nodeType":"VariableDeclaration","scope":340,"src":"2471:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"2471:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"approved","nameLocation":"2494:8:3","nodeType":"VariableDeclaration","scope":340,"src":"2489:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":336,"name":"bool","nodeType":"ElementaryTypeName","src":"2489:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2470:33:3"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[],"src":"2512:0:3"},"scope":381,"src":"2444:69:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"2519:135:3","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":350,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2668:16:3","nodeType":"FunctionDefinition","parameters":{"id":346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"account","nameLocation":"2693:7:3","nodeType":"VariableDeclaration","scope":350,"src":"2685:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"2685:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":345,"mutability":"mutable","name":"operator","nameLocation":"2710:8:3","nodeType":"VariableDeclaration","scope":350,"src":"2702:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":344,"name":"address","nodeType":"ElementaryTypeName","src":"2702:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2684:35:3"},"returnParameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":350,"src":"2743:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":347,"name":"bool","nodeType":"ElementaryTypeName","src":"2743:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2742:6:3"},"scope":381,"src":"2659:90:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":351,"nodeType":"StructuredDocumentation","src":"2755:910:3","text":" @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n Ensure to follow the checks-effects-interactions pattern and consider employing\n reentrancy guards when interacting with untrusted contracts.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `value` amount.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":364,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3679:16:3","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"from","nameLocation":"3704:4:3","nodeType":"VariableDeclaration","scope":364,"src":"3696:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"3696:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"to","nameLocation":"3718:2:3","nodeType":"VariableDeclaration","scope":364,"src":"3710:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"3710:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"id","nameLocation":"3730:2:3","nodeType":"VariableDeclaration","scope":364,"src":"3722:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"3722:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"value","nameLocation":"3742:5:3","nodeType":"VariableDeclaration","scope":364,"src":"3734:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"3734:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":361,"mutability":"mutable","name":"data","nameLocation":"3764:4:3","nodeType":"VariableDeclaration","scope":364,"src":"3749:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":360,"name":"bytes","nodeType":"ElementaryTypeName","src":"3749:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3695:74:3"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"3778:0:3"},"scope":381,"src":"3670:109:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":365,"nodeType":"StructuredDocumentation","src":"3785:814:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n Ensure to follow the checks-effects-interactions pattern and consider employing\n reentrancy guards when interacting with untrusted contracts.\n Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n Requirements:\n - `ids` and `values` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":380,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4613:21:3","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"mutability":"mutable","name":"from","nameLocation":"4652:4:3","nodeType":"VariableDeclaration","scope":380,"src":"4644:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":366,"name":"address","nodeType":"ElementaryTypeName","src":"4644:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":369,"mutability":"mutable","name":"to","nameLocation":"4674:2:3","nodeType":"VariableDeclaration","scope":380,"src":"4666:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":368,"name":"address","nodeType":"ElementaryTypeName","src":"4666:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"ids","nameLocation":"4705:3:3","nodeType":"VariableDeclaration","scope":380,"src":"4686:22:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":370,"name":"uint256","nodeType":"ElementaryTypeName","src":"4686:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":371,"nodeType":"ArrayTypeName","src":"4686:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":375,"mutability":"mutable","name":"values","nameLocation":"4737:6:3","nodeType":"VariableDeclaration","scope":380,"src":"4718:25:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"4718:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":374,"nodeType":"ArrayTypeName","src":"4718:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"data","nameLocation":"4768:4:3","nodeType":"VariableDeclaration","scope":380,"src":"4753:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":376,"name":"bytes","nodeType":"ElementaryTypeName","src":"4753:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4634:144:3"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[],"src":"4787:0:3"},"scope":381,"src":"4604:184:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":382,"src":"336:4454:3","usedErrors":[],"usedEvents":[278,293,302,309]}],"src":"110:4681:3"},"id":3},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[423],"IERC165":[1978]},"id":424,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":383,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"118:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":385,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":424,"sourceUnit":1979,"src":"144:62:4","symbolAliases":[{"foreign":{"id":384,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"152:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":387,"name":"IERC165","nameLocations":["357:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"357:7:4"},"id":388,"nodeType":"InheritanceSpecifier","src":"357:7:4"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":386,"nodeType":"StructuredDocumentation","src":"208:118:4","text":" @dev Interface that must be implemented by smart contracts in order to receive\n ERC-1155 token transfers."},"fullyImplemented":false,"id":423,"linearizedBaseContracts":[423,1978],"name":"IERC1155Receiver","nameLocation":"337:16:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"371:826:4","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":404,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1211:17:4","nodeType":"FunctionDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"operator","nameLocation":"1246:8:4","nodeType":"VariableDeclaration","scope":404,"src":"1238:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":390,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"from","nameLocation":"1272:4:4","nodeType":"VariableDeclaration","scope":404,"src":"1264:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":392,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":395,"mutability":"mutable","name":"id","nameLocation":"1294:2:4","nodeType":"VariableDeclaration","scope":404,"src":"1286:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"1286:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":397,"mutability":"mutable","name":"value","nameLocation":"1314:5:4","nodeType":"VariableDeclaration","scope":404,"src":"1306:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":396,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":399,"mutability":"mutable","name":"data","nameLocation":"1344:4:4","nodeType":"VariableDeclaration","scope":404,"src":"1329:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":398,"name":"bytes","nodeType":"ElementaryTypeName","src":"1329:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1228:126:4"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":404,"src":"1373:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":401,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1373:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1372:8:4"},"scope":423,"src":"1202:179:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"1387:994:4","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":422,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2395:22:4","nodeType":"FunctionDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"operator","nameLocation":"2435:8:4","nodeType":"VariableDeclaration","scope":422,"src":"2427:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"2427:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"from","nameLocation":"2461:4:4","nodeType":"VariableDeclaration","scope":422,"src":"2453:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":408,"name":"address","nodeType":"ElementaryTypeName","src":"2453:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"ids","nameLocation":"2494:3:4","nodeType":"VariableDeclaration","scope":422,"src":"2475:22:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"2475:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":411,"nodeType":"ArrayTypeName","src":"2475:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"values","nameLocation":"2526:6:4","nodeType":"VariableDeclaration","scope":422,"src":"2507:25:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"2507:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":414,"nodeType":"ArrayTypeName","src":"2507:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"data","nameLocation":"2557:4:4","nodeType":"VariableDeclaration","scope":422,"src":"2542:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":416,"name":"bytes","nodeType":"ElementaryTypeName","src":"2542:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2417:150:4"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"2586:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":419,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2586:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2585:8:4"},"scope":423,"src":"2386:208:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":424,"src":"327:2269:4","usedErrors":[],"usedEvents":[]}],"src":"118:2479:4"},"id":4},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[501]},"id":502,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":425,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":426,"nodeType":"StructuredDocumentation","src":"132:70:5","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":501,"linearizedBaseContracts":[501],"name":"IERC20","nameLocation":"213:6:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"226:158:5","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":435,"name":"Transfer","nameLocation":"395:8:5","nodeType":"EventDefinition","parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"420:4:5","nodeType":"VariableDeclaration","scope":435,"src":"404:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":428,"name":"address","nodeType":"ElementaryTypeName","src":"404:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":431,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"442:2:5","nodeType":"VariableDeclaration","scope":435,"src":"426:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":433,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"454:5:5","nodeType":"VariableDeclaration","scope":435,"src":"446:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:57:5"},"src":"389:72:5"},{"anonymous":false,"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"467:148:5","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":444,"name":"Approval","nameLocation":"626:8:5","nodeType":"EventDefinition","parameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"651:5:5","nodeType":"VariableDeclaration","scope":444,"src":"635:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":437,"name":"address","nodeType":"ElementaryTypeName","src":"635:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":440,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"674:7:5","nodeType":"VariableDeclaration","scope":444,"src":"658:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":442,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"691:5:5","nodeType":"VariableDeclaration","scope":444,"src":"683:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"683:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"634:63:5"},"src":"620:78:5"},{"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"704:65:5","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":450,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:5","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[],"src":"794:2:5"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":450,"src":"820:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":447,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:5"},"scope":501,"src":"774:55:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"835:71:5","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":458,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"920:9:5","nodeType":"FunctionDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"mutability":"mutable","name":"account","nameLocation":"938:7:5","nodeType":"VariableDeclaration","scope":458,"src":"930:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"930:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"929:17:5"},"returnParameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":458,"src":"970:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"970:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"969:9:5"},"scope":501,"src":"911:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"985:213:5","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":468,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1212:8:5","nodeType":"FunctionDefinition","parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"to","nameLocation":"1229:2:5","nodeType":"VariableDeclaration","scope":468,"src":"1221:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"value","nameLocation":"1241:5:5","nodeType":"VariableDeclaration","scope":468,"src":"1233:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":462,"name":"uint256","nodeType":"ElementaryTypeName","src":"1233:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:27:5"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":468,"src":"1266:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"1266:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1265:6:5"},"scope":501,"src":"1203:69:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"1278:264:5","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":478,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1556:9:5","nodeType":"FunctionDefinition","parameters":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"owner","nameLocation":"1574:5:5","nodeType":"VariableDeclaration","scope":478,"src":"1566:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"1566:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"spender","nameLocation":"1589:7:5","nodeType":"VariableDeclaration","scope":478,"src":"1581:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1565:32:5"},"returnParameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":478,"src":"1621:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":475,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1620:9:5"},"scope":501,"src":"1547:83:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":479,"nodeType":"StructuredDocumentation","src":"1636:667:5","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":488,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2317:7:5","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"spender","nameLocation":"2333:7:5","nodeType":"VariableDeclaration","scope":488,"src":"2325:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":480,"name":"address","nodeType":"ElementaryTypeName","src":"2325:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"value","nameLocation":"2350:5:5","nodeType":"VariableDeclaration","scope":488,"src":"2342:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2342:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:32:5"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":488,"src":"2375:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":485,"name":"bool","nodeType":"ElementaryTypeName","src":"2375:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2374:6:5"},"scope":501,"src":"2308:73:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"2387:297:5","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":500,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2698:12:5","nodeType":"FunctionDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":491,"mutability":"mutable","name":"from","nameLocation":"2719:4:5","nodeType":"VariableDeclaration","scope":500,"src":"2711:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":490,"name":"address","nodeType":"ElementaryTypeName","src":"2711:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"to","nameLocation":"2733:2:5","nodeType":"VariableDeclaration","scope":500,"src":"2725:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"2725:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"value","nameLocation":"2745:5:5","nodeType":"VariableDeclaration","scope":500,"src":"2737:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":494,"name":"uint256","nodeType":"ElementaryTypeName","src":"2737:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2710:41:5"},"returnParameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":500,"src":"2770:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":497,"name":"bool","nodeType":"ElementaryTypeName","src":"2770:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2769:6:5"},"scope":501,"src":"2689:87:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":502,"src":"203:2575:5","usedErrors":[],"usedEvents":[435,444]}],"src":"106:2673:5"},"id":5},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1978],"IERC721":[618]},"id":619,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":503,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":619,"sourceUnit":1979,"src":"134:62:6","symbolAliases":[{"foreign":{"id":504,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"142:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":507,"name":"IERC165","nameLocations":["287:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"287:7:6"},"id":508,"nodeType":"InheritanceSpecifier","src":"287:7:6"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"198:67:6","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":618,"linearizedBaseContracts":[618,1978],"name":"IERC721","nameLocation":"276:7:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"301:88:6","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":517,"name":"Transfer","nameLocation":"400:8:6","nodeType":"EventDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:6","nodeType":"VariableDeclaration","scope":517,"src":"409:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":513,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:6","nodeType":"VariableDeclaration","scope":517,"src":"431:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":515,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:6","nodeType":"VariableDeclaration","scope":517,"src":"451:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:6"},"src":"394:82:6"},{"anonymous":false,"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"482:94:6","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":526,"name":"Approval","nameLocation":"587:8:6","nodeType":"EventDefinition","parameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":520,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:6","nodeType":"VariableDeclaration","scope":526,"src":"596:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":522,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:6","nodeType":"VariableDeclaration","scope":526,"src":"619:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":524,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:6","nodeType":"VariableDeclaration","scope":526,"src":"645:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":523,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:6"},"src":"581:89:6"},{"anonymous":false,"documentation":{"id":527,"nodeType":"StructuredDocumentation","src":"676:117:6","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":535,"name":"ApprovalForAll","nameLocation":"804:14:6","nodeType":"EventDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:6","nodeType":"VariableDeclaration","scope":535,"src":"819:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":531,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:6","nodeType":"VariableDeclaration","scope":535,"src":"842:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":530,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":533,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:6","nodeType":"VariableDeclaration","scope":535,"src":"868:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":532,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:6"},"src":"798:85:6"},{"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"889:76:6","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":543,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:6","nodeType":"FunctionDefinition","parameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"owner","nameLocation":"997:5:6","nodeType":"VariableDeclaration","scope":543,"src":"989:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":537,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:6"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"balance","nameLocation":"1035:7:6","nodeType":"VariableDeclaration","scope":543,"src":"1027:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":540,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:6"},"scope":618,"src":"970:74:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"1050:131:6","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":551,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:6","nodeType":"FunctionDefinition","parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:6","nodeType":"VariableDeclaration","scope":551,"src":"1203:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":545,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:6"},"returnParameters":{"id":550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":549,"mutability":"mutable","name":"owner","nameLocation":"1251:5:6","nodeType":"VariableDeclaration","scope":551,"src":"1243:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":548,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:6"},"scope":618,"src":"1186:72:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"1264:565:6","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":563,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:6","nodeType":"FunctionDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"from","nameLocation":"1868:4:6","nodeType":"VariableDeclaration","scope":563,"src":"1860:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"to","nameLocation":"1882:2:6","nodeType":"VariableDeclaration","scope":563,"src":"1874:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:6","nodeType":"VariableDeclaration","scope":563,"src":"1886:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"data","nameLocation":"1918:4:6","nodeType":"VariableDeclaration","scope":563,"src":"1903:19:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":559,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:6"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[],"src":"1932:0:6"},"scope":618,"src":"1834:99:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":564,"nodeType":"StructuredDocumentation","src":"1939:705:6","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":573,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:6","nodeType":"FunctionDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"from","nameLocation":"2683:4:6","nodeType":"VariableDeclaration","scope":573,"src":"2675:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":568,"mutability":"mutable","name":"to","nameLocation":"2697:2:6","nodeType":"VariableDeclaration","scope":573,"src":"2689:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:6","nodeType":"VariableDeclaration","scope":573,"src":"2701:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:6"},"returnParameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"2726:0:6"},"scope":618,"src":"2649:78:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":574,"nodeType":"StructuredDocumentation","src":"2733:732:6","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":583,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:6","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"from","nameLocation":"3500:4:6","nodeType":"VariableDeclaration","scope":583,"src":"3492:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"to","nameLocation":"3514:2:6","nodeType":"VariableDeclaration","scope":583,"src":"3506:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":577,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:6","nodeType":"VariableDeclaration","scope":583,"src":"3518:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:6"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"3543:0:6"},"scope":618,"src":"3470:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"3550:452:6","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":591,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:6","nodeType":"FunctionDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"to","nameLocation":"4032:2:6","nodeType":"VariableDeclaration","scope":591,"src":"4024:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":585,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":588,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:6","nodeType":"VariableDeclaration","scope":591,"src":"4036:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":587,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:6"},"returnParameters":{"id":590,"nodeType":"ParameterList","parameters":[],"src":"4061:0:6"},"scope":618,"src":"4007:55:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"4068:315:6","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":599,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:6","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"operator","nameLocation":"4423:8:6","nodeType":"VariableDeclaration","scope":599,"src":"4415:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":596,"mutability":"mutable","name":"approved","nameLocation":"4438:8:6","nodeType":"VariableDeclaration","scope":599,"src":"4433:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":595,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:6"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[],"src":"4456:0:6"},"scope":618,"src":"4388:69:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"4463:139:6","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":607,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:6","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:6","nodeType":"VariableDeclaration","scope":607,"src":"4628:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":601,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:6"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":605,"mutability":"mutable","name":"operator","nameLocation":"4676:8:6","nodeType":"VariableDeclaration","scope":607,"src":"4668:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":604,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:6"},"scope":618,"src":"4607:79:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":608,"nodeType":"StructuredDocumentation","src":"4692:138:6","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":617,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:6","nodeType":"FunctionDefinition","parameters":{"id":613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"owner","nameLocation":"4869:5:6","nodeType":"VariableDeclaration","scope":617,"src":"4861:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"operator","nameLocation":"4884:8:6","nodeType":"VariableDeclaration","scope":617,"src":"4876:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:6"},"returnParameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":617,"src":"4917:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":614,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:6"},"scope":618,"src":"4835:88:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":619,"src":"266:4659:6","usedErrors":[],"usedEvents":[517,526,535]}],"src":"108:4818:6"},"id":6},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[636]},"id":637,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":620,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":621,"nodeType":"StructuredDocumentation","src":"142:152:7","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":636,"linearizedBaseContracts":[636],"name":"IERC721Receiver","nameLocation":"305:15:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"327:500:7","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":635,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:7","nodeType":"FunctionDefinition","parameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"operator","nameLocation":"875:8:7","nodeType":"VariableDeclaration","scope":635,"src":"867:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":626,"mutability":"mutable","name":"from","nameLocation":"901:4:7","nodeType":"VariableDeclaration","scope":635,"src":"893:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":628,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:7","nodeType":"VariableDeclaration","scope":635,"src":"915:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"data","nameLocation":"955:4:7","nodeType":"VariableDeclaration","scope":635,"src":"940:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":629,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:7"},"returnParameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":635,"src":"984:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":632,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:7"},"scope":636,"src":"832:160:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":637,"src":"295:699:7","usedErrors":[],"usedEvents":[]}],"src":"116:879:7"},"id":7},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[666]},"id":667,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":638,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:8"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":639,"nodeType":"StructuredDocumentation","src":"127:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":666,"linearizedBaseContracts":[666],"name":"Context","nameLocation":"642:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":647,"nodeType":"Block","src":"718:34:8","statements":[{"expression":{"expression":{"id":644,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:8","memberName":"sender","nodeType":"MemberAccess","src":"735:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":643,"id":646,"nodeType":"Return","src":"728:17:8"}]},"id":648,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:8","nodeType":"FunctionDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[],"src":"675:2:8"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":648,"src":"709:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:8"},"scope":666,"src":"656:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":656,"nodeType":"Block","src":"825:32:8","statements":[{"expression":{"expression":{"id":653,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:8","memberName":"data","nodeType":"MemberAccess","src":"842:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":652,"id":655,"nodeType":"Return","src":"835:15:8"}]},"id":657,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:8","nodeType":"FunctionDefinition","parameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"775:2:8"},"returnParameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":657,"src":"809:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":650,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:8"},"scope":666,"src":"758:99:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":664,"nodeType":"Block","src":"935:25:8","statements":[{"expression":{"hexValue":"30","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":661,"id":663,"nodeType":"Return","src":"945:8:8"}]},"id":665,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:8","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[],"src":"892:2:8"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":665,"src":"926:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":659,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:8"},"scope":666,"src":"863:97:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":667,"src":"624:338:8","usedErrors":[],"usedEvents":[]}],"src":"101:862:8"},"id":8},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[735]},"id":736,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":668,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:9"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"135:750:9","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":735,"linearizedBaseContracts":[735],"name":"ReentrancyGuard","nameLocation":"904:15:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":672,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1699:11:9","nodeType":"VariableDeclaration","scope":735,"src":"1674:40:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":670,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1713:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":675,"mutability":"constant","name":"ENTERED","nameLocation":"1745:7:9","nodeType":"VariableDeclaration","scope":735,"src":"1720:36:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":673,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1755:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":677,"mutability":"mutable","name":"_status","nameLocation":"1779:7:9","nodeType":"VariableDeclaration","scope":735,"src":"1763:23:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":676,"name":"uint256","nodeType":"ElementaryTypeName","src":"1763:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"1793:52:9","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":680,"name":"ReentrancyGuardReentrantCall","nameLocation":"1856:28:9","nodeType":"ErrorDefinition","parameters":{"id":679,"nodeType":"ParameterList","parameters":[],"src":"1884:2:9"},"src":"1850:37:9"},{"body":{"id":687,"nodeType":"Block","src":"1907:38:9","statements":[{"expression":{"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":683,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"1917:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":684,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"1927:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1917:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":686,"nodeType":"ExpressionStatement","src":"1917:21:9"}]},"id":688,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":681,"nodeType":"ParameterList","parameters":[],"src":"1904:2:9"},"returnParameters":{"id":682,"nodeType":"ParameterList","parameters":[],"src":"1907:0:9"},"scope":735,"src":"1893:52:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":698,"nodeType":"Block","src":"2346:79:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":691,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"2356:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"ExpressionStatement","src":"2356:21:9"},{"id":694,"nodeType":"PlaceholderStatement","src":"2387:1:9"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":695,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"2398:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2398:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":697,"nodeType":"ExpressionStatement","src":"2398:20:9"}]},"documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"1951:366:9","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":699,"name":"nonReentrant","nameLocation":"2331:12:9","nodeType":"ModifierDefinition","parameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"2343:2:9"},"src":"2322:103:9","virtual":false,"visibility":"internal"},{"body":{"id":714,"nodeType":"Block","src":"2470:268:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":702,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"2558:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":703,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"2569:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2558:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":709,"nodeType":"IfStatement","src":"2554:86:9","trueBody":{"id":708,"nodeType":"Block","src":"2578:62:9","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":705,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"2599:28:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":707,"nodeType":"RevertStatement","src":"2592:37:9"}]}},{"expression":{"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":710,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"2714:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":711,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"2724:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":713,"nodeType":"ExpressionStatement","src":"2714:17:9"}]},"id":715,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2440:19:9","nodeType":"FunctionDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"2459:2:9"},"returnParameters":{"id":701,"nodeType":"ParameterList","parameters":[],"src":"2470:0:9"},"scope":735,"src":"2431:307:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":722,"nodeType":"Block","src":"2782:170:9","statements":[{"expression":{"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":718,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"2924:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":719,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"2934:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":721,"nodeType":"ExpressionStatement","src":"2924:21:9"}]},"id":723,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2753:18:9","nodeType":"FunctionDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[],"src":"2771:2:9"},"returnParameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"2782:0:9"},"scope":735,"src":"2744:208:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":733,"nodeType":"Block","src":"3195:42:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":729,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":677,"src":"3212:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":730,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":675,"src":"3223:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3212:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":728,"id":732,"nodeType":"Return","src":"3205:25:9"}]},"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"2958:168:9","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":734,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3140:23:9","nodeType":"FunctionDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[],"src":"3163:2:9"},"returnParameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":734,"src":"3189:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":726,"name":"bool","nodeType":"ElementaryTypeName","src":"3189:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3188:6:9"},"scope":735,"src":"3131:106:9","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":736,"src":"886:2353:9","usedErrors":[680],"usedEvents":[]}],"src":"109:3131:9"},"id":9},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","exportedSymbols":{"ShortString":[741],"ShortStrings":[952],"StorageSlot":[1062]},"id":953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":737,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:10"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"./StorageSlot.sol","id":739,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":953,"sourceUnit":1063,"src":"132:46:10","symbolAliases":[{"foreign":{"id":738,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"140:11:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"ShortString","id":741,"name":"ShortString","nameLocation":"353:11:10","nodeType":"UserDefinedValueTypeDefinition","src":"348:28:10","underlyingType":{"id":740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"368:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"abstract":false,"baseContracts":[],"canonicalName":"ShortStrings","contractDependencies":[],"contractKind":"library","documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"378:876:10","text":" @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"},"fullyImplemented":true,"id":952,"linearizedBaseContracts":[952],"name":"ShortStrings","nameLocation":"1263:12:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":745,"mutability":"constant","name":"FALLBACK_SENTINEL","nameLocation":"1370:17:10","nodeType":"VariableDeclaration","scope":952,"src":"1345:111:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":743,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1345:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646","id":744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:66:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0x00000000000000000000000000000000000000000000000000000000000000FF"},"visibility":"private"},{"errorSelector":"305a27a9","id":749,"name":"StringTooLong","nameLocation":"1469:13:10","nodeType":"ErrorDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"str","nameLocation":"1490:3:10","nodeType":"VariableDeclaration","scope":749,"src":"1483:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":746,"name":"string","nodeType":"ElementaryTypeName","src":"1483:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1482:12:10"},"src":"1463:32:10"},{"errorSelector":"b3512b0c","id":751,"name":"InvalidShortString","nameLocation":"1506:18:10","nodeType":"ErrorDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[],"src":"1524:2:10"},"src":"1500:27:10"},{"body":{"id":794,"nodeType":"Block","src":"1786:208:10","statements":[{"assignments":[761],"declarations":[{"constant":false,"id":761,"mutability":"mutable","name":"bstr","nameLocation":"1809:4:10","nodeType":"VariableDeclaration","scope":794,"src":"1796:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":760,"name":"bytes","nodeType":"ElementaryTypeName","src":"1796:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":766,"initialValue":{"arguments":[{"id":764,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"1822:3:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1816:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":762,"name":"bytes","nodeType":"ElementaryTypeName","src":"1816:5:10","typeDescriptions":{}}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1816:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1796:30:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":767,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"1840:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1845:6:10","memberName":"length","nodeType":"MemberAccess","src":"1840:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1854:2:10","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1840:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":776,"nodeType":"IfStatement","src":"1836:72:10","trueBody":{"id":775,"nodeType":"Block","src":"1858:50:10","statements":[{"errorCall":{"arguments":[{"id":772,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"1893:3:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":771,"name":"StringTooLong","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"1879:13:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1879:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":774,"nodeType":"RevertStatement","src":"1872:25:10"}]}},{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":785,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"1965:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1957:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":783,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1957:7:10","typeDescriptions":{}}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1949:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":781,"name":"uint256","nodeType":"ElementaryTypeName","src":"1949:7:10","typeDescriptions":{}}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1949:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"expression":{"id":788,"name":"bstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"1974:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1979:6:10","memberName":"length","nodeType":"MemberAccess","src":"1974:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1949:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1941:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1941:7:10","typeDescriptions":{}}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:45:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":777,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1924:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$741_$","typeString":"type(ShortString)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1936:4:10","memberName":"wrap","nodeType":"MemberAccess","src":"1924:16:10","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$741_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:63:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"functionReturnParameters":759,"id":793,"nodeType":"Return","src":"1917:70:10"}]},"documentation":{"id":752,"nodeType":"StructuredDocumentation","src":"1533:170:10","text":" @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."},"id":795,"implemented":true,"kind":"function","modifiers":[],"name":"toShortString","nameLocation":"1717:13:10","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"str","nameLocation":"1745:3:10","nodeType":"VariableDeclaration","scope":795,"src":"1731:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":753,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1730:19:10"},"returnParameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":795,"src":"1773:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":757,"nodeType":"UserDefinedTypeName","pathNode":{"id":756,"name":"ShortString","nameLocations":["1773:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"1773:11:10"},"referencedDeclaration":741,"src":"1773:11:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"internal"}],"src":"1772:13:10"},"scope":952,"src":"1708:286:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":820,"nodeType":"Block","src":"2152:331:10","statements":[{"assignments":[805],"declarations":[{"constant":false,"id":805,"mutability":"mutable","name":"len","nameLocation":"2170:3:10","nodeType":"VariableDeclaration","scope":820,"src":"2162:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":809,"initialValue":{"arguments":[{"id":807,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"2187:4:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}],"id":806,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"2176:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$741_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:16:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2162:30:10"},{"assignments":[811],"declarations":[{"constant":false,"id":811,"mutability":"mutable","name":"str","nameLocation":"2294:3:10","nodeType":"VariableDeclaration","scope":820,"src":"2280:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":810,"name":"string","nodeType":"ElementaryTypeName","src":"2280:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":816,"initialValue":{"arguments":[{"hexValue":"3332","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2311:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2300:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":812,"name":"string","nodeType":"ElementaryTypeName","src":"2304:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2280:34:10"},{"AST":{"nativeSrc":"2376:81:10","nodeType":"YulBlock","src":"2376:81:10","statements":[{"expression":{"arguments":[{"name":"str","nativeSrc":"2397:3:10","nodeType":"YulIdentifier","src":"2397:3:10"},{"name":"len","nativeSrc":"2402:3:10","nodeType":"YulIdentifier","src":"2402:3:10"}],"functionName":{"name":"mstore","nativeSrc":"2390:6:10","nodeType":"YulIdentifier","src":"2390:6:10"},"nativeSrc":"2390:16:10","nodeType":"YulFunctionCall","src":"2390:16:10"},"nativeSrc":"2390:16:10","nodeType":"YulExpressionStatement","src":"2390:16:10"},{"expression":{"arguments":[{"arguments":[{"name":"str","nativeSrc":"2430:3:10","nodeType":"YulIdentifier","src":"2430:3:10"},{"kind":"number","nativeSrc":"2435:4:10","nodeType":"YulLiteral","src":"2435:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2426:3:10","nodeType":"YulIdentifier","src":"2426:3:10"},"nativeSrc":"2426:14:10","nodeType":"YulFunctionCall","src":"2426:14:10"},{"name":"sstr","nativeSrc":"2442:4:10","nodeType":"YulIdentifier","src":"2442:4:10"}],"functionName":{"name":"mstore","nativeSrc":"2419:6:10","nodeType":"YulIdentifier","src":"2419:6:10"},"nativeSrc":"2419:28:10","nodeType":"YulFunctionCall","src":"2419:28:10"},"nativeSrc":"2419:28:10","nodeType":"YulExpressionStatement","src":"2419:28:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":805,"isOffset":false,"isSlot":false,"src":"2402:3:10","valueSize":1},{"declaration":799,"isOffset":false,"isSlot":false,"src":"2442:4:10","valueSize":1},{"declaration":811,"isOffset":false,"isSlot":false,"src":"2397:3:10","valueSize":1},{"declaration":811,"isOffset":false,"isSlot":false,"src":"2430:3:10","valueSize":1}],"id":817,"nodeType":"InlineAssembly","src":"2367:90:10"},{"expression":{"id":818,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2473:3:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":803,"id":819,"nodeType":"Return","src":"2466:10:10"}]},"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"2000:73:10","text":" @dev Decode a `ShortString` back to a \"normal\" string."},"id":821,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"2087:8:10","nodeType":"FunctionDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"sstr","nameLocation":"2108:4:10","nodeType":"VariableDeclaration","scope":821,"src":"2096:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":798,"nodeType":"UserDefinedTypeName","pathNode":{"id":797,"name":"ShortString","nameLocations":["2096:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"2096:11:10"},"referencedDeclaration":741,"src":"2096:11:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"internal"}],"src":"2095:18:10"},"returnParameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":821,"src":"2137:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":801,"name":"string","nodeType":"ElementaryTypeName","src":"2137:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2136:15:10"},"scope":952,"src":"2078:405:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":852,"nodeType":"Block","src":"2625:175:10","statements":[{"assignments":[831],"declarations":[{"constant":false,"id":831,"mutability":"mutable","name":"result","nameLocation":"2643:6:10","nodeType":"VariableDeclaration","scope":852,"src":"2635:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"2635:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":841,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":836,"name":"sstr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2679:4:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}],"expression":{"id":834,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"2660:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$741_$","typeString":"type(ShortString)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2672:6:10","memberName":"unwrap","nodeType":"MemberAccess","src":"2660:18:10","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$741_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2652:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:10","typeDescriptions":{}}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2652:33:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30784646","id":839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2688:4:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"2652:40:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2635:57:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"2706:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3331","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2715:2:10","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"2706:11:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":849,"nodeType":"IfStatement","src":"2702:69:10","trueBody":{"id":848,"nodeType":"Block","src":"2719:52:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":845,"name":"InvalidShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"2740:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2740:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":847,"nodeType":"RevertStatement","src":"2733:27:10"}]}},{"expression":{"id":850,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"2787:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":829,"id":851,"nodeType":"Return","src":"2780:13:10"}]},"documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"2489:61:10","text":" @dev Return the length of a `ShortString`."},"id":853,"implemented":true,"kind":"function","modifiers":[],"name":"byteLength","nameLocation":"2564:10:10","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"sstr","nameLocation":"2587:4:10","nodeType":"VariableDeclaration","scope":853,"src":"2575:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":824,"nodeType":"UserDefinedTypeName","pathNode":{"id":823,"name":"ShortString","nameLocations":["2575:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"2575:11:10"},"referencedDeclaration":741,"src":"2575:11:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"internal"}],"src":"2574:18:10"},"returnParameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":853,"src":"2616:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":827,"name":"uint256","nodeType":"ElementaryTypeName","src":"2616:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2615:9:10"},"scope":952,"src":"2555:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":892,"nodeType":"Block","src":"3023:231:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"3043:5:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3037:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":864,"name":"bytes","nodeType":"ElementaryTypeName","src":"3037:5:10","typeDescriptions":{}}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3037:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3050:6:10","memberName":"length","nodeType":"MemberAccess","src":"3037:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3059:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3037:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":890,"nodeType":"Block","src":"3121:127:10","statements":[{"expression":{"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":879,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"3161:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"expression":{"id":876,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"3135:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1062_$","typeString":"type(library StorageSlot)"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3147:13:10","memberName":"getStringSlot","nodeType":"MemberAccess","referencedDeclaration":1039,"src":"3135:25:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$970_storage_ptr_$","typeString":"function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"}},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3135:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$970_storage_ptr","typeString":"struct StorageSlot.StringSlot storage pointer"}},"id":881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3168:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":969,"src":"3135:38:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"3176:5:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3135:46:10","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":884,"nodeType":"ExpressionStatement","src":"3135:46:10"},{"expression":{"arguments":[{"id":887,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"3219:17:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":885,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"3202:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$741_$","typeString":"type(ShortString)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3214:4:10","memberName":"wrap","nodeType":"MemberAccess","src":"3202:16:10","typeDescriptions":{"typeIdentifier":"t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$741_$","typeString":"function (bytes32) pure returns (ShortString)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3202:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"functionReturnParameters":863,"id":889,"nodeType":"Return","src":"3195:42:10"}]},"id":891,"nodeType":"IfStatement","src":"3033:215:10","trueBody":{"id":875,"nodeType":"Block","src":"3063:52:10","statements":[{"expression":{"arguments":[{"id":872,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"3098:5:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":871,"name":"toShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"3084:13:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$741_$","typeString":"function (string memory) pure returns (ShortString)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3084:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"functionReturnParameters":863,"id":874,"nodeType":"Return","src":"3077:27:10"}]}}]},"documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"2806:103:10","text":" @dev Encode a string into a `ShortString`, or write it to storage if it is too long."},"id":893,"implemented":true,"kind":"function","modifiers":[],"name":"toShortStringWithFallback","nameLocation":"2923:25:10","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"value","nameLocation":"2963:5:10","nodeType":"VariableDeclaration","scope":893,"src":"2949:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":855,"name":"string","nodeType":"ElementaryTypeName","src":"2949:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":858,"mutability":"mutable","name":"store","nameLocation":"2985:5:10","nodeType":"VariableDeclaration","scope":893,"src":"2970:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":857,"name":"string","nodeType":"ElementaryTypeName","src":"2970:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2948:43:10"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":893,"src":"3010:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":861,"nodeType":"UserDefinedTypeName","pathNode":{"id":860,"name":"ShortString","nameLocations":["3010:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"3010:11:10"},"referencedDeclaration":741,"src":"3010:11:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"internal"}],"src":"3009:13:10"},"scope":952,"src":"2914:340:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":919,"nodeType":"Block","src":"3494:158:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":906,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"3527:5:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}],"expression":{"id":904,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"3508:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$741_$","typeString":"type(ShortString)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3520:6:10","memberName":"unwrap","nodeType":"MemberAccess","src":"3508:18:10","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$741_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3508:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":908,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"3537:17:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3508:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":917,"nodeType":"Block","src":"3609:37:10","statements":[{"expression":{"id":915,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"3630:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}},"functionReturnParameters":903,"id":916,"nodeType":"Return","src":"3623:12:10"}]},"id":918,"nodeType":"IfStatement","src":"3504:142:10","trueBody":{"id":914,"nodeType":"Block","src":"3556:47:10","statements":[{"expression":{"arguments":[{"id":911,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"3586:5:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}],"id":910,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"3577:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$741_$returns$_t_string_memory_ptr_$","typeString":"function (ShortString) pure returns (string memory)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3577:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":903,"id":913,"nodeType":"Return","src":"3570:22:10"}]}}]},"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"3260:120:10","text":" @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."},"id":920,"implemented":true,"kind":"function","modifiers":[],"name":"toStringWithFallback","nameLocation":"3394:20:10","nodeType":"FunctionDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"value","nameLocation":"3427:5:10","nodeType":"VariableDeclaration","scope":920,"src":"3415:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":896,"nodeType":"UserDefinedTypeName","pathNode":{"id":895,"name":"ShortString","nameLocations":["3415:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"3415:11:10"},"referencedDeclaration":741,"src":"3415:11:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"store","nameLocation":"3449:5:10","nodeType":"VariableDeclaration","scope":920,"src":"3434:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":898,"name":"string","nodeType":"ElementaryTypeName","src":"3434:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3414:41:10"},"returnParameters":{"id":903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":902,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":920,"src":"3479:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":901,"name":"string","nodeType":"ElementaryTypeName","src":"3479:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3478:15:10"},"scope":952,"src":"3385:267:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":950,"nodeType":"Block","src":"4132:174:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"4165:5:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}],"expression":{"id":931,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4146:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_userDefinedValueType$_ShortString_$741_$","typeString":"type(ShortString)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4158:6:10","memberName":"unwrap","nodeType":"MemberAccess","src":"4146:18:10","typeDescriptions":{"typeIdentifier":"t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$741_$returns$_t_bytes32_$","typeString":"function (ShortString) pure returns (bytes32)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4146:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":935,"name":"FALLBACK_SENTINEL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"4175:17:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4146:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":948,"nodeType":"Block","src":"4249:51:10","statements":[{"expression":{"expression":{"arguments":[{"id":944,"name":"store","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"4276:5:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage_ptr","typeString":"string storage pointer"}],"id":943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4270:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":942,"name":"bytes","nodeType":"ElementaryTypeName","src":"4270:5:10","typeDescriptions":{}}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4283:6:10","memberName":"length","nodeType":"MemberAccess","src":"4270:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":930,"id":947,"nodeType":"Return","src":"4263:26:10"}]},"id":949,"nodeType":"IfStatement","src":"4142:158:10","trueBody":{"id":941,"nodeType":"Block","src":"4194:49:10","statements":[{"expression":{"arguments":[{"id":938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"4226:5:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}],"id":937,"name":"byteLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"4215:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$741_$returns$_t_uint256_$","typeString":"function (ShortString) pure returns (uint256)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4215:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":930,"id":940,"nodeType":"Return","src":"4208:24:10"}]}}]},"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"3658:364:10","text":" @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."},"id":951,"implemented":true,"kind":"function","modifiers":[],"name":"byteLengthWithFallback","nameLocation":"4036:22:10","nodeType":"FunctionDefinition","parameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"value","nameLocation":"4071:5:10","nodeType":"VariableDeclaration","scope":951,"src":"4059:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":923,"nodeType":"UserDefinedTypeName","pathNode":{"id":922,"name":"ShortString","nameLocations":["4059:11:10"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"4059:11:10"},"referencedDeclaration":741,"src":"4059:11:10","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"store","nameLocation":"4093:5:10","nodeType":"VariableDeclaration","scope":951,"src":"4078:20:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":925,"name":"string","nodeType":"ElementaryTypeName","src":"4078:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4058:41:10"},"returnParameters":{"id":930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":951,"src":"4123:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":928,"name":"uint256","nodeType":"ElementaryTypeName","src":"4123:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4122:9:10"},"scope":952,"src":"4027:279:10","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":953,"src":"1255:3053:10","usedErrors":[749,751],"usedEvents":[]}],"src":"106:4203:10"},"id":10},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1062]},"id":1063,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":954,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":955,"nodeType":"StructuredDocumentation","src":"219:1025:11","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"},"fullyImplemented":true,"id":1062,"linearizedBaseContracts":[1062],"name":"StorageSlot","nameLocation":"1253:11:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":958,"members":[{"constant":false,"id":957,"mutability":"mutable","name":"value","nameLocation":"1308:5:11","nodeType":"VariableDeclaration","scope":958,"src":"1300:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":956,"name":"address","nodeType":"ElementaryTypeName","src":"1300:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1278:11:11","nodeType":"StructDefinition","scope":1062,"src":"1271:49:11","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":961,"members":[{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"1360:5:11","nodeType":"VariableDeclaration","scope":961,"src":"1355:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":959,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1333:11:11","nodeType":"StructDefinition","scope":1062,"src":"1326:46:11","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":964,"members":[{"constant":false,"id":963,"mutability":"mutable","name":"value","nameLocation":"1415:5:11","nodeType":"VariableDeclaration","scope":964,"src":"1407:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":962,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1407:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1385:11:11","nodeType":"StructDefinition","scope":1062,"src":"1378:49:11","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":967,"members":[{"constant":false,"id":966,"mutability":"mutable","name":"value","nameLocation":"1470:5:11","nodeType":"VariableDeclaration","scope":967,"src":"1462:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":965,"name":"uint256","nodeType":"ElementaryTypeName","src":"1462:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1440:11:11","nodeType":"StructDefinition","scope":1062,"src":"1433:49:11","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":970,"members":[{"constant":false,"id":969,"mutability":"mutable","name":"value","nameLocation":"1523:5:11","nodeType":"VariableDeclaration","scope":970,"src":"1516:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":968,"name":"string","nodeType":"ElementaryTypeName","src":"1516:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1495:10:11","nodeType":"StructDefinition","scope":1062,"src":"1488:47:11","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":973,"members":[{"constant":false,"id":972,"mutability":"mutable","name":"value","nameLocation":"1574:5:11","nodeType":"VariableDeclaration","scope":973,"src":"1568:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":971,"name":"bytes","nodeType":"ElementaryTypeName","src":"1568:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1548:9:11","nodeType":"StructDefinition","scope":1062,"src":"1541:45:11","visibility":"public"},{"body":{"id":983,"nodeType":"Block","src":"1768:106:11","statements":[{"AST":{"nativeSrc":"1830:38:11","nodeType":"YulBlock","src":"1830:38:11","statements":[{"nativeSrc":"1844:14:11","nodeType":"YulAssignment","src":"1844:14:11","value":{"name":"slot","nativeSrc":"1854:4:11","nodeType":"YulIdentifier","src":"1854:4:11"},"variableNames":[{"name":"r.slot","nativeSrc":"1844:6:11","nodeType":"YulIdentifier","src":"1844:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":980,"isOffset":false,"isSlot":true,"src":"1844:6:11","suffix":"slot","valueSize":1},{"declaration":976,"isOffset":false,"isSlot":false,"src":"1854:4:11","valueSize":1}],"id":982,"nodeType":"InlineAssembly","src":"1821:47:11"}]},"documentation":{"id":974,"nodeType":"StructuredDocumentation","src":"1592:87:11","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":984,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1693:14:11","nodeType":"FunctionDefinition","parameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"slot","nameLocation":"1716:4:11","nodeType":"VariableDeclaration","scope":984,"src":"1708:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":975,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1708:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1707:14:11"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":980,"mutability":"mutable","name":"r","nameLocation":"1765:1:11","nodeType":"VariableDeclaration","scope":984,"src":"1745:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$958_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":979,"nodeType":"UserDefinedTypeName","pathNode":{"id":978,"name":"AddressSlot","nameLocations":["1745:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":958,"src":"1745:11:11"},"referencedDeclaration":958,"src":"1745:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$958_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1744:23:11"},"scope":1062,"src":"1684:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":994,"nodeType":"Block","src":"2056:106:11","statements":[{"AST":{"nativeSrc":"2118:38:11","nodeType":"YulBlock","src":"2118:38:11","statements":[{"nativeSrc":"2132:14:11","nodeType":"YulAssignment","src":"2132:14:11","value":{"name":"slot","nativeSrc":"2142:4:11","nodeType":"YulIdentifier","src":"2142:4:11"},"variableNames":[{"name":"r.slot","nativeSrc":"2132:6:11","nodeType":"YulIdentifier","src":"2132:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":991,"isOffset":false,"isSlot":true,"src":"2132:6:11","suffix":"slot","valueSize":1},{"declaration":987,"isOffset":false,"isSlot":false,"src":"2142:4:11","valueSize":1}],"id":993,"nodeType":"InlineAssembly","src":"2109:47:11"}]},"documentation":{"id":985,"nodeType":"StructuredDocumentation","src":"1880:87:11","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":995,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1981:14:11","nodeType":"FunctionDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":987,"mutability":"mutable","name":"slot","nameLocation":"2004:4:11","nodeType":"VariableDeclaration","scope":995,"src":"1996:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":986,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1995:14:11"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"r","nameLocation":"2053:1:11","nodeType":"VariableDeclaration","scope":995,"src":"2033:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$961_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":990,"nodeType":"UserDefinedTypeName","pathNode":{"id":989,"name":"BooleanSlot","nameLocations":["2033:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":961,"src":"2033:11:11"},"referencedDeclaration":961,"src":"2033:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$961_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2032:23:11"},"scope":1062,"src":"1972:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1005,"nodeType":"Block","src":"2344:106:11","statements":[{"AST":{"nativeSrc":"2406:38:11","nodeType":"YulBlock","src":"2406:38:11","statements":[{"nativeSrc":"2420:14:11","nodeType":"YulAssignment","src":"2420:14:11","value":{"name":"slot","nativeSrc":"2430:4:11","nodeType":"YulIdentifier","src":"2430:4:11"},"variableNames":[{"name":"r.slot","nativeSrc":"2420:6:11","nodeType":"YulIdentifier","src":"2420:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1002,"isOffset":false,"isSlot":true,"src":"2420:6:11","suffix":"slot","valueSize":1},{"declaration":998,"isOffset":false,"isSlot":false,"src":"2430:4:11","valueSize":1}],"id":1004,"nodeType":"InlineAssembly","src":"2397:47:11"}]},"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"2168:87:11","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1006,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2269:14:11","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"slot","nameLocation":"2292:4:11","nodeType":"VariableDeclaration","scope":1006,"src":"2284:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2284:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2283:14:11"},"returnParameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1002,"mutability":"mutable","name":"r","nameLocation":"2341:1:11","nodeType":"VariableDeclaration","scope":1006,"src":"2321:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$964_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1001,"nodeType":"UserDefinedTypeName","pathNode":{"id":1000,"name":"Bytes32Slot","nameLocations":["2321:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":964,"src":"2321:11:11"},"referencedDeclaration":964,"src":"2321:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$964_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2320:23:11"},"scope":1062,"src":"2260:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1016,"nodeType":"Block","src":"2632:106:11","statements":[{"AST":{"nativeSrc":"2694:38:11","nodeType":"YulBlock","src":"2694:38:11","statements":[{"nativeSrc":"2708:14:11","nodeType":"YulAssignment","src":"2708:14:11","value":{"name":"slot","nativeSrc":"2718:4:11","nodeType":"YulIdentifier","src":"2718:4:11"},"variableNames":[{"name":"r.slot","nativeSrc":"2708:6:11","nodeType":"YulIdentifier","src":"2708:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1013,"isOffset":false,"isSlot":true,"src":"2708:6:11","suffix":"slot","valueSize":1},{"declaration":1009,"isOffset":false,"isSlot":false,"src":"2718:4:11","valueSize":1}],"id":1015,"nodeType":"InlineAssembly","src":"2685:47:11"}]},"documentation":{"id":1007,"nodeType":"StructuredDocumentation","src":"2456:87:11","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1017,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2557:14:11","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"slot","nameLocation":"2580:4:11","nodeType":"VariableDeclaration","scope":1017,"src":"2572:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1008,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2572:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2571:14:11"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"r","nameLocation":"2629:1:11","nodeType":"VariableDeclaration","scope":1017,"src":"2609:21:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$967_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1012,"nodeType":"UserDefinedTypeName","pathNode":{"id":1011,"name":"Uint256Slot","nameLocations":["2609:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":967,"src":"2609:11:11"},"referencedDeclaration":967,"src":"2609:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$967_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2608:23:11"},"scope":1062,"src":"2548:190:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1027,"nodeType":"Block","src":"2917:106:11","statements":[{"AST":{"nativeSrc":"2979:38:11","nodeType":"YulBlock","src":"2979:38:11","statements":[{"nativeSrc":"2993:14:11","nodeType":"YulAssignment","src":"2993:14:11","value":{"name":"slot","nativeSrc":"3003:4:11","nodeType":"YulIdentifier","src":"3003:4:11"},"variableNames":[{"name":"r.slot","nativeSrc":"2993:6:11","nodeType":"YulIdentifier","src":"2993:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1024,"isOffset":false,"isSlot":true,"src":"2993:6:11","suffix":"slot","valueSize":1},{"declaration":1020,"isOffset":false,"isSlot":false,"src":"3003:4:11","valueSize":1}],"id":1026,"nodeType":"InlineAssembly","src":"2970:47:11"}]},"documentation":{"id":1018,"nodeType":"StructuredDocumentation","src":"2744:86:11","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1028,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"2844:13:11","nodeType":"FunctionDefinition","parameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1020,"mutability":"mutable","name":"slot","nameLocation":"2866:4:11","nodeType":"VariableDeclaration","scope":1028,"src":"2858:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1019,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2858:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2857:14:11"},"returnParameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1024,"mutability":"mutable","name":"r","nameLocation":"2914:1:11","nodeType":"VariableDeclaration","scope":1028,"src":"2895:20:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$970_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1023,"nodeType":"UserDefinedTypeName","pathNode":{"id":1022,"name":"StringSlot","nameLocations":["2895:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":970,"src":"2895:10:11"},"referencedDeclaration":970,"src":"2895:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$970_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"2894:22:11"},"scope":1062,"src":"2835:188:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1038,"nodeType":"Block","src":"3225:112:11","statements":[{"AST":{"nativeSrc":"3287:44:11","nodeType":"YulBlock","src":"3287:44:11","statements":[{"nativeSrc":"3301:20:11","nodeType":"YulAssignment","src":"3301:20:11","value":{"name":"store.slot","nativeSrc":"3311:10:11","nodeType":"YulIdentifier","src":"3311:10:11"},"variableNames":[{"name":"r.slot","nativeSrc":"3301:6:11","nodeType":"YulIdentifier","src":"3301:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1035,"isOffset":false,"isSlot":true,"src":"3301:6:11","suffix":"slot","valueSize":1},{"declaration":1031,"isOffset":false,"isSlot":true,"src":"3311:10:11","suffix":"slot","valueSize":1}],"id":1037,"nodeType":"InlineAssembly","src":"3278:53:11"}]},"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"3029:101:11","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1039,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3144:13:11","nodeType":"FunctionDefinition","parameters":{"id":1032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1031,"mutability":"mutable","name":"store","nameLocation":"3173:5:11","nodeType":"VariableDeclaration","scope":1039,"src":"3158:20:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1030,"name":"string","nodeType":"ElementaryTypeName","src":"3158:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3157:22:11"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1035,"mutability":"mutable","name":"r","nameLocation":"3222:1:11","nodeType":"VariableDeclaration","scope":1039,"src":"3203:20:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$970_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1034,"nodeType":"UserDefinedTypeName","pathNode":{"id":1033,"name":"StringSlot","nameLocations":["3203:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":970,"src":"3203:10:11"},"referencedDeclaration":970,"src":"3203:10:11","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$970_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3202:22:11"},"scope":1062,"src":"3135:202:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1049,"nodeType":"Block","src":"3513:106:11","statements":[{"AST":{"nativeSrc":"3575:38:11","nodeType":"YulBlock","src":"3575:38:11","statements":[{"nativeSrc":"3589:14:11","nodeType":"YulAssignment","src":"3589:14:11","value":{"name":"slot","nativeSrc":"3599:4:11","nodeType":"YulIdentifier","src":"3599:4:11"},"variableNames":[{"name":"r.slot","nativeSrc":"3589:6:11","nodeType":"YulIdentifier","src":"3589:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1046,"isOffset":false,"isSlot":true,"src":"3589:6:11","suffix":"slot","valueSize":1},{"declaration":1042,"isOffset":false,"isSlot":false,"src":"3599:4:11","valueSize":1}],"id":1048,"nodeType":"InlineAssembly","src":"3566:47:11"}]},"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"3343:85:11","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1050,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3442:12:11","nodeType":"FunctionDefinition","parameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"slot","nameLocation":"3463:4:11","nodeType":"VariableDeclaration","scope":1050,"src":"3455:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3455:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3454:14:11"},"returnParameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"r","nameLocation":"3510:1:11","nodeType":"VariableDeclaration","scope":1050,"src":"3492:19:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$973_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1045,"nodeType":"UserDefinedTypeName","pathNode":{"id":1044,"name":"BytesSlot","nameLocations":["3492:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":973,"src":"3492:9:11"},"referencedDeclaration":973,"src":"3492:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$973_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3491:21:11"},"scope":1062,"src":"3433:186:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1060,"nodeType":"Block","src":"3816:112:11","statements":[{"AST":{"nativeSrc":"3878:44:11","nodeType":"YulBlock","src":"3878:44:11","statements":[{"nativeSrc":"3892:20:11","nodeType":"YulAssignment","src":"3892:20:11","value":{"name":"store.slot","nativeSrc":"3902:10:11","nodeType":"YulIdentifier","src":"3902:10:11"},"variableNames":[{"name":"r.slot","nativeSrc":"3892:6:11","nodeType":"YulIdentifier","src":"3892:6:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1057,"isOffset":false,"isSlot":true,"src":"3892:6:11","suffix":"slot","valueSize":1},{"declaration":1053,"isOffset":false,"isSlot":true,"src":"3902:10:11","suffix":"slot","valueSize":1}],"id":1059,"nodeType":"InlineAssembly","src":"3869:53:11"}]},"documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"3625:99:11","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1061,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3738:12:11","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"store","nameLocation":"3765:5:11","nodeType":"VariableDeclaration","scope":1061,"src":"3751:19:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1052,"name":"bytes","nodeType":"ElementaryTypeName","src":"3751:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3750:21:11"},"returnParameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"mutability":"mutable","name":"r","nameLocation":"3813:1:11","nodeType":"VariableDeclaration","scope":1061,"src":"3795:19:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$973_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1056,"nodeType":"UserDefinedTypeName","pathNode":{"id":1055,"name":"BytesSlot","nameLocations":["3795:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":973,"src":"3795:9:11"},"referencedDeclaration":973,"src":"3795:9:11","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$973_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3794:21:11"},"scope":1062,"src":"3729:199:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1063,"src":"1245:2685:11","usedErrors":[],"usedEvents":[]}],"src":"193:3738:11"},"id":11},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3032],"SignedMath":[3137],"Strings":[1317]},"id":1318,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1064,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:12"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1066,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1318,"sourceUnit":3033,"src":"127:37:12","symbolAliases":[{"foreign":{"id":1065,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"135:4:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1068,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1318,"sourceUnit":3138,"src":"165:49:12","symbolAliases":[{"foreign":{"id":1067,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"173:10:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1069,"nodeType":"StructuredDocumentation","src":"216:34:12","text":" @dev String operations."},"fullyImplemented":true,"id":1317,"linearizedBaseContracts":[1317],"name":"Strings","nameLocation":"259:7:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1072,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:12","nodeType":"VariableDeclaration","scope":1317,"src":"273:56:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1070,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:12","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1075,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:12","nodeType":"VariableDeclaration","scope":1317,"src":"335:42:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1073,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:12","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"384:81:12","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1082,"name":"StringsInsufficientHexLength","nameLocation":"476:28:12","nodeType":"ErrorDefinition","parameters":{"id":1081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"value","nameLocation":"513:5:12","nodeType":"VariableDeclaration","scope":1082,"src":"505:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1080,"mutability":"mutable","name":"length","nameLocation":"528:6:12","nodeType":"VariableDeclaration","scope":1082,"src":"520:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1079,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:12"},"src":"470:66:12"},{"body":{"id":1129,"nodeType":"Block","src":"708:627:12","statements":[{"id":1128,"nodeType":"UncheckedBlock","src":"718:611:12","statements":[{"assignments":[1091],"declarations":[{"constant":false,"id":1091,"mutability":"mutable","name":"length","nameLocation":"750:6:12","nodeType":"VariableDeclaration","scope":1128,"src":"742:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1098,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"770:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1092,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"759:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3032_$","typeString":"type(library Math)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:12","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2852,"src":"759:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:12"},{"assignments":[1100],"declarations":[{"constant":false,"id":1100,"mutability":"mutable","name":"buffer","nameLocation":"808:6:12","nodeType":"VariableDeclaration","scope":1128,"src":"794:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1099,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1105,"initialValue":{"arguments":[{"id":1103,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"828:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1101,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:12"},{"assignments":[1107],"declarations":[{"constant":false,"id":1107,"mutability":"mutable","name":"ptr","nameLocation":"857:3:12","nodeType":"VariableDeclaration","scope":1128,"src":"849:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1108,"nodeType":"VariableDeclarationStatement","src":"849:11:12"},{"AST":{"nativeSrc":"930:67:12","nodeType":"YulBlock","src":"930:67:12","statements":[{"nativeSrc":"948:35:12","nodeType":"YulAssignment","src":"948:35:12","value":{"arguments":[{"name":"buffer","nativeSrc":"959:6:12","nodeType":"YulIdentifier","src":"959:6:12"},{"arguments":[{"kind":"number","nativeSrc":"971:2:12","nodeType":"YulLiteral","src":"971:2:12","type":"","value":"32"},{"name":"length","nativeSrc":"975:6:12","nodeType":"YulIdentifier","src":"975:6:12"}],"functionName":{"name":"add","nativeSrc":"967:3:12","nodeType":"YulIdentifier","src":"967:3:12"},"nativeSrc":"967:15:12","nodeType":"YulFunctionCall","src":"967:15:12"}],"functionName":{"name":"add","nativeSrc":"955:3:12","nodeType":"YulIdentifier","src":"955:3:12"},"nativeSrc":"955:28:12","nodeType":"YulFunctionCall","src":"955:28:12"},"variableNames":[{"name":"ptr","nativeSrc":"948:3:12","nodeType":"YulIdentifier","src":"948:3:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1100,"isOffset":false,"isSlot":false,"src":"959:6:12","valueSize":1},{"declaration":1091,"isOffset":false,"isSlot":false,"src":"975:6:12","valueSize":1},{"declaration":1107,"isOffset":false,"isSlot":false,"src":"948:3:12","valueSize":1}],"id":1109,"nodeType":"InlineAssembly","src":"921:76:12"},{"body":{"id":1124,"nodeType":"Block","src":"1023:269:12","statements":[{"expression":{"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:12","subExpression":{"id":1111,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"1041:3:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1113,"nodeType":"ExpressionStatement","src":"1041:5:12"},{"AST":{"nativeSrc":"1124:86:12","nodeType":"YulBlock","src":"1124:86:12","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1154:3:12","nodeType":"YulIdentifier","src":"1154:3:12"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:12","nodeType":"YulIdentifier","src":"1168:5:12"},{"kind":"number","nativeSrc":"1175:2:12","nodeType":"YulLiteral","src":"1175:2:12","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1164:3:12","nodeType":"YulIdentifier","src":"1164:3:12"},"nativeSrc":"1164:14:12","nodeType":"YulFunctionCall","src":"1164:14:12"},{"name":"HEX_DIGITS","nativeSrc":"1180:10:12","nodeType":"YulIdentifier","src":"1180:10:12"}],"functionName":{"name":"byte","nativeSrc":"1159:4:12","nodeType":"YulIdentifier","src":"1159:4:12"},"nativeSrc":"1159:32:12","nodeType":"YulFunctionCall","src":"1159:32:12"}],"functionName":{"name":"mstore8","nativeSrc":"1146:7:12","nodeType":"YulIdentifier","src":"1146:7:12"},"nativeSrc":"1146:46:12","nodeType":"YulFunctionCall","src":"1146:46:12"},"nativeSrc":"1146:46:12","nodeType":"YulExpressionStatement","src":"1146:46:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1072,"isOffset":false,"isSlot":false,"src":"1180:10:12","valueSize":1},{"declaration":1107,"isOffset":false,"isSlot":false,"src":"1154:3:12","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"1168:5:12","valueSize":1}],"id":1114,"nodeType":"InlineAssembly","src":"1115:95:12"},{"expression":{"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"1227:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1118,"nodeType":"ExpressionStatement","src":"1227:11:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"1260:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1123,"nodeType":"IfStatement","src":"1256:21:12","trueBody":{"id":1122,"nodeType":"Break","src":"1272:5:12"}}]},"condition":{"hexValue":"74727565","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1125,"nodeType":"WhileStatement","src":"1010:282:12"},{"expression":{"id":1126,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"1312:6:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1089,"id":1127,"nodeType":"Return","src":"1305:13:12"}]}]},"documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"542:90:12","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1130,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:12","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"value","nameLocation":"663:5:12","nodeType":"VariableDeclaration","scope":1130,"src":"655:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:12"},"returnParameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1130,"src":"693:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1087,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:12"},"scope":1317,"src":"637:698:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"1511:92:12","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"1542:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:12","trueExpression":{"hexValue":"2d","id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1150,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1133,"src":"1588:5:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1148,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"1573:10:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3137_$","typeString":"type(library SignedMath)"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:12","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3136,"src":"1573:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1147,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1564:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1138,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:12","typeDescriptions":{}}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:12","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:12","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1137,"id":1154,"nodeType":"Return","src":"1521:75:12"}]},"documentation":{"id":1131,"nodeType":"StructuredDocumentation","src":"1341:89:12","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:12","nodeType":"FunctionDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"value","nameLocation":"1466:5:12","nodeType":"VariableDeclaration","scope":1156,"src":"1459:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1132,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:12"},"returnParameters":{"id":1137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1156,"src":"1496:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1135,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:12"},"scope":1317,"src":"1435:168:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1175,"nodeType":"Block","src":"1782:100:12","statements":[{"id":1174,"nodeType":"UncheckedBlock","src":"1792:84:12","statements":[{"expression":{"arguments":[{"id":1165,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"1835:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1168,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"1854:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1166,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"1842:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3032_$","typeString":"type(library Math)"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:12","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2974,"src":"1842:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1164,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1176,1259,1279],"referencedDeclaration":1259,"src":"1823:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1163,"id":1173,"nodeType":"Return","src":"1816:49:12"}]}]},"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"1609:94:12","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1176,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:12","nodeType":"FunctionDefinition","parameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"value","nameLocation":"1737:5:12","nodeType":"VariableDeclaration","scope":1176,"src":"1729:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:12"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1176,"src":"1767:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1161,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:12"},"scope":1317,"src":"1708:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1258,"nodeType":"Block","src":"2095:435:12","statements":[{"assignments":[1187],"declarations":[{"constant":false,"id":1187,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:12","nodeType":"VariableDeclaration","scope":1258,"src":"2105:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1186,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1189,"initialValue":{"id":1188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2126:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:12"},{"assignments":[1191],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:12","nodeType":"VariableDeclaration","scope":1258,"src":"2141:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1190,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1200,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1195,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"2177:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1192,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:12"},{"expression":{"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1201,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2198:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1203,"indexExpression":{"hexValue":"30","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1206,"nodeType":"ExpressionStatement","src":"2198:15:12"},{"expression":{"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1207,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2223:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1209,"indexExpression":{"hexValue":"31","id":1208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1212,"nodeType":"ExpressionStatement","src":"2223:15:12"},{"body":{"id":1241,"nodeType":"Block","src":"2293:95:12","statements":[{"expression":{"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1227,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2307:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1229,"indexExpression":{"id":1228,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"2314:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1230,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"2319:10:12","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1234,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1231,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"2330:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:12","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1236,"nodeType":"ExpressionStatement","src":"2307:40:12"},{"expression":{"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1237,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"2361:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:12","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1240,"nodeType":"ExpressionStatement","src":"2361:16:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"2281:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1242,"initializationExpression":{"assignments":[1214],"declarations":[{"constant":false,"id":1214,"mutability":"mutable","name":"i","nameLocation":"2261:1:12","nodeType":"VariableDeclaration","scope":1242,"src":"2253:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1220,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1216,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"2269:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:12"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:12","subExpression":{"id":1224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"2290:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1226,"nodeType":"ExpressionStatement","src":"2288:3:12"},"nodeType":"ForStatement","src":"2248:140:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1243,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"2401:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1252,"nodeType":"IfStatement","src":"2397:96:12","trueBody":{"id":1251,"nodeType":"Block","src":"2418:75:12","statements":[{"errorCall":{"arguments":[{"id":1247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"2468:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1248,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"2475:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1246,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"2439:28:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1250,"nodeType":"RevertStatement","src":"2432:50:12"}]}},{"expression":{"arguments":[{"id":1255,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2516:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1253,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:12","typeDescriptions":{}}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1185,"id":1257,"nodeType":"Return","src":"2502:21:12"}]},"documentation":{"id":1177,"nodeType":"StructuredDocumentation","src":"1888:112:12","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1259,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:12","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"value","nameLocation":"2034:5:12","nodeType":"VariableDeclaration","scope":1259,"src":"2026:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1181,"mutability":"mutable","name":"length","nameLocation":"2049:6:12","nodeType":"VariableDeclaration","scope":1259,"src":"2041:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:12"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1259,"src":"2080:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1183,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:12"},"scope":1317,"src":"2005:525:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1278,"nodeType":"Block","src":"2762:75:12","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1272,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1262,"src":"2807:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1270,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:12","typeDescriptions":{}}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1268,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:12","typeDescriptions":{}}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1275,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"2815:14:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1267,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1176,1259,1279],"referencedDeclaration":1259,"src":"2779:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1266,"id":1277,"nodeType":"Return","src":"2772:58:12"}]},"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"2536:148:12","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":1279,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:12","nodeType":"FunctionDefinition","parameters":{"id":1263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"addr","nameLocation":"2718:4:12","nodeType":"VariableDeclaration","scope":1279,"src":"2710:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1261,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:12"},"returnParameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1279,"src":"2747:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1264,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:12"},"scope":1317,"src":"2689:148:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1315,"nodeType":"Block","src":"2992:104:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1291,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"3015:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1289,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:12","typeDescriptions":{}}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:12","memberName":"length","nodeType":"MemberAccess","src":"3009:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1296,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"3034:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1294,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:12","typeDescriptions":{}}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:12","memberName":"length","nodeType":"MemberAccess","src":"3028:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1303,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"3063:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1301,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:12","typeDescriptions":{}}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1300,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1309,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"3086:1:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1307,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:12","typeDescriptions":{}}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1306,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1288,"id":1314,"nodeType":"Return","src":"3002:87:12"}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"2843:66:12","text":" @dev Returns true if the two strings are equal."},"id":1316,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:12","nodeType":"FunctionDefinition","parameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"a","nameLocation":"2943:1:12","nodeType":"VariableDeclaration","scope":1316,"src":"2929:15:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1281,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"b","nameLocation":"2960:1:12","nodeType":"VariableDeclaration","scope":1316,"src":"2946:15:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1283,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:12"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1316,"src":"2986:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1286,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:12"},"scope":1317,"src":"2914:182:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1318,"src":"251:2847:12","usedErrors":[1082],"usedEvents":[]}],"src":"101:2998:12"},"id":12},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[1665]},"id":1666,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1319,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1320,"nodeType":"StructuredDocumentation","src":"138:205:13","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1665,"linearizedBaseContracts":[1665],"name":"ECDSA","nameLocation":"352:5:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1325,"members":[{"id":1321,"name":"NoError","nameLocation":"392:7:13","nodeType":"EnumValue","src":"392:7:13"},{"id":1322,"name":"InvalidSignature","nameLocation":"409:16:13","nodeType":"EnumValue","src":"409:16:13"},{"id":1323,"name":"InvalidSignatureLength","nameLocation":"435:22:13","nodeType":"EnumValue","src":"435:22:13"},{"id":1324,"name":"InvalidSignatureS","nameLocation":"467:17:13","nodeType":"EnumValue","src":"467:17:13"}],"name":"RecoverError","nameLocation":"369:12:13","nodeType":"EnumDefinition","src":"364:126:13"},{"documentation":{"id":1326,"nodeType":"StructuredDocumentation","src":"496:63:13","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":1328,"name":"ECDSAInvalidSignature","nameLocation":"570:21:13","nodeType":"ErrorDefinition","parameters":{"id":1327,"nodeType":"ParameterList","parameters":[],"src":"591:2:13"},"src":"564:30:13"},{"documentation":{"id":1329,"nodeType":"StructuredDocumentation","src":"600:60:13","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":1333,"name":"ECDSAInvalidSignatureLength","nameLocation":"671:27:13","nodeType":"ErrorDefinition","parameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"length","nameLocation":"707:6:13","nodeType":"VariableDeclaration","scope":1333,"src":"699:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1330,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:16:13"},"src":"665:50:13"},{"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"721:85:13","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":1338,"name":"ECDSAInvalidSignatureS","nameLocation":"817:22:13","nodeType":"ErrorDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"s","nameLocation":"848:1:13","nodeType":"VariableDeclaration","scope":1338,"src":"840:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"840:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:11:13"},"src":"811:40:13"},{"body":{"id":1390,"nodeType":"Block","src":"2242:653:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1353,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"2256:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2266:6:13","memberName":"length","nodeType":"MemberAccess","src":"2256:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2276:2:13","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2256:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1388,"nodeType":"Block","src":"2781:108:13","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2811:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2803:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1375,"name":"address","nodeType":"ElementaryTypeName","src":"2803:7:13","typeDescriptions":{}}},"id":1378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2803:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1379,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"2815:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2828:22:13","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1323,"src":"2815:35:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":1383,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"2860:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2870:6:13","memberName":"length","nodeType":"MemberAccess","src":"2860:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2852:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2852:7:13","typeDescriptions":{}}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2802:76:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1352,"id":1387,"nodeType":"Return","src":"2795:83:13"}]},"id":1389,"nodeType":"IfStatement","src":"2252:637:13","trueBody":{"id":1374,"nodeType":"Block","src":"2280:495:13","statements":[{"assignments":[1358],"declarations":[{"constant":false,"id":1358,"mutability":"mutable","name":"r","nameLocation":"2302:1:13","nodeType":"VariableDeclaration","scope":1374,"src":"2294:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2294:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1359,"nodeType":"VariableDeclarationStatement","src":"2294:9:13"},{"assignments":[1361],"declarations":[{"constant":false,"id":1361,"mutability":"mutable","name":"s","nameLocation":"2325:1:13","nodeType":"VariableDeclaration","scope":1374,"src":"2317:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1362,"nodeType":"VariableDeclarationStatement","src":"2317:9:13"},{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"v","nameLocation":"2346:1:13","nodeType":"VariableDeclaration","scope":1374,"src":"2340:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1363,"name":"uint8","nodeType":"ElementaryTypeName","src":"2340:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1365,"nodeType":"VariableDeclarationStatement","src":"2340:7:13"},{"AST":{"nativeSrc":"2548:171:13","nodeType":"YulBlock","src":"2548:171:13","statements":[{"nativeSrc":"2566:32:13","nodeType":"YulAssignment","src":"2566:32:13","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2581:9:13","nodeType":"YulIdentifier","src":"2581:9:13"},{"kind":"number","nativeSrc":"2592:4:13","nodeType":"YulLiteral","src":"2592:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2577:3:13","nodeType":"YulIdentifier","src":"2577:3:13"},"nativeSrc":"2577:20:13","nodeType":"YulFunctionCall","src":"2577:20:13"}],"functionName":{"name":"mload","nativeSrc":"2571:5:13","nodeType":"YulIdentifier","src":"2571:5:13"},"nativeSrc":"2571:27:13","nodeType":"YulFunctionCall","src":"2571:27:13"},"variableNames":[{"name":"r","nativeSrc":"2566:1:13","nodeType":"YulIdentifier","src":"2566:1:13"}]},{"nativeSrc":"2615:32:13","nodeType":"YulAssignment","src":"2615:32:13","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2630:9:13","nodeType":"YulIdentifier","src":"2630:9:13"},{"kind":"number","nativeSrc":"2641:4:13","nodeType":"YulLiteral","src":"2641:4:13","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2626:3:13","nodeType":"YulIdentifier","src":"2626:3:13"},"nativeSrc":"2626:20:13","nodeType":"YulFunctionCall","src":"2626:20:13"}],"functionName":{"name":"mload","nativeSrc":"2620:5:13","nodeType":"YulIdentifier","src":"2620:5:13"},"nativeSrc":"2620:27:13","nodeType":"YulFunctionCall","src":"2620:27:13"},"variableNames":[{"name":"s","nativeSrc":"2615:1:13","nodeType":"YulIdentifier","src":"2615:1:13"}]},{"nativeSrc":"2664:41:13","nodeType":"YulAssignment","src":"2664:41:13","value":{"arguments":[{"kind":"number","nativeSrc":"2674:1:13","nodeType":"YulLiteral","src":"2674:1:13","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2687:9:13","nodeType":"YulIdentifier","src":"2687:9:13"},{"kind":"number","nativeSrc":"2698:4:13","nodeType":"YulLiteral","src":"2698:4:13","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2683:3:13","nodeType":"YulIdentifier","src":"2683:3:13"},"nativeSrc":"2683:20:13","nodeType":"YulFunctionCall","src":"2683:20:13"}],"functionName":{"name":"mload","nativeSrc":"2677:5:13","nodeType":"YulIdentifier","src":"2677:5:13"},"nativeSrc":"2677:27:13","nodeType":"YulFunctionCall","src":"2677:27:13"}],"functionName":{"name":"byte","nativeSrc":"2669:4:13","nodeType":"YulIdentifier","src":"2669:4:13"},"nativeSrc":"2669:36:13","nodeType":"YulFunctionCall","src":"2669:36:13"},"variableNames":[{"name":"v","nativeSrc":"2664:1:13","nodeType":"YulIdentifier","src":"2664:1:13"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1358,"isOffset":false,"isSlot":false,"src":"2566:1:13","valueSize":1},{"declaration":1361,"isOffset":false,"isSlot":false,"src":"2615:1:13","valueSize":1},{"declaration":1343,"isOffset":false,"isSlot":false,"src":"2581:9:13","valueSize":1},{"declaration":1343,"isOffset":false,"isSlot":false,"src":"2630:9:13","valueSize":1},{"declaration":1343,"isOffset":false,"isSlot":false,"src":"2687:9:13","valueSize":1},{"declaration":1364,"isOffset":false,"isSlot":false,"src":"2664:1:13","valueSize":1}],"id":1366,"nodeType":"InlineAssembly","src":"2539:180:13"},{"expression":{"arguments":[{"id":1368,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"2750:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1369,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2756:1:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1370,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"2759:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1371,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"2762:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1367,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1391,1471,1579],"referencedDeclaration":1579,"src":"2739:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1352,"id":1373,"nodeType":"Return","src":"2732:32:13"}]}}]},"documentation":{"id":1339,"nodeType":"StructuredDocumentation","src":"857:1267:13","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2138:10:13","nodeType":"FunctionDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"hash","nameLocation":"2157:4:13","nodeType":"VariableDeclaration","scope":1391,"src":"2149:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2149:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"signature","nameLocation":"2176:9:13","nodeType":"VariableDeclaration","scope":1391,"src":"2163:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1342,"name":"bytes","nodeType":"ElementaryTypeName","src":"2163:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2148:38:13"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"2210:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1345,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"2219:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1348,"nodeType":"UserDefinedTypeName","pathNode":{"id":1347,"name":"RecoverError","nameLocations":["2219:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"2219:12:13"},"referencedDeclaration":1325,"src":"2219:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1391,"src":"2233:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2233:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2209:32:13"},"scope":1665,"src":"2129:766:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1420,"nodeType":"Block","src":"3789:168:13","statements":[{"assignments":[1402,1405,1407],"declarations":[{"constant":false,"id":1402,"mutability":"mutable","name":"recovered","nameLocation":"3808:9:13","nodeType":"VariableDeclaration","scope":1420,"src":"3800:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1401,"name":"address","nodeType":"ElementaryTypeName","src":"3800:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"error","nameLocation":"3832:5:13","nodeType":"VariableDeclaration","scope":1420,"src":"3819:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1404,"nodeType":"UserDefinedTypeName","pathNode":{"id":1403,"name":"RecoverError","nameLocations":["3819:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"3819:12:13"},"referencedDeclaration":1325,"src":"3819:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1407,"mutability":"mutable","name":"errorArg","nameLocation":"3847:8:13","nodeType":"VariableDeclaration","scope":1420,"src":"3839:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3839:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1412,"initialValue":{"arguments":[{"id":1409,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"3870:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1410,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"3876:9:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1408,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1391,1471,1579],"referencedDeclaration":1391,"src":"3859:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3799:87:13"},{"expression":{"arguments":[{"id":1414,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"3908:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"id":1415,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3915:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1413,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"3896:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1325_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1417,"nodeType":"ExpressionStatement","src":"3896:28:13"},{"expression":{"id":1418,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"3941:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1400,"id":1419,"nodeType":"Return","src":"3934:16:13"}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"2901:796:13","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":1421,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3711:7:13","nodeType":"FunctionDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"hash","nameLocation":"3727:4:13","nodeType":"VariableDeclaration","scope":1421,"src":"3719:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3719:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"signature","nameLocation":"3746:9:13","nodeType":"VariableDeclaration","scope":1421,"src":"3733:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1395,"name":"bytes","nodeType":"ElementaryTypeName","src":"3733:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3718:38:13"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1421,"src":"3780:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"3780:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3779:9:13"},"scope":1665,"src":"3702:255:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1470,"nodeType":"Block","src":"4285:342:13","statements":[{"id":1469,"nodeType":"UncheckedBlock","src":"4295:326:13","statements":[{"assignments":[1439],"declarations":[{"constant":false,"id":1439,"mutability":"mutable","name":"s","nameLocation":"4327:1:13","nodeType":"VariableDeclaration","scope":1469,"src":"4319:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4319:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1446,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1440,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"4331:2:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4344:66:13","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4336:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4336:7:13","typeDescriptions":{}}},"id":1444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4336:75:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4331:80:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4319:92:13"},{"assignments":[1448],"declarations":[{"constant":false,"id":1448,"mutability":"mutable","name":"v","nameLocation":"4528:1:13","nodeType":"VariableDeclaration","scope":1469,"src":"4522:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1447,"name":"uint8","nodeType":"ElementaryTypeName","src":"4522:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1461,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1453,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"4547:2:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4539:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1451,"name":"uint256","nodeType":"ElementaryTypeName","src":"4539:7:13","typeDescriptions":{}}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4539:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4554:3:13","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4539:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4538:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4561:2:13","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4538:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4532:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1449,"name":"uint8","nodeType":"ElementaryTypeName","src":"4532:5:13","typeDescriptions":{}}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4532:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4522:42:13"},{"expression":{"arguments":[{"id":1463,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"4596:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1464,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"4602:1:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1465,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"4605:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1466,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"4608:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1462,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1391,1471,1579],"referencedDeclaration":1579,"src":"4585:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4585:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1437,"id":1468,"nodeType":"Return","src":"4578:32:13"}]}]},"documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"3963:205:13","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"},"id":1471,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4182:10:13","nodeType":"FunctionDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"hash","nameLocation":"4201:4:13","nodeType":"VariableDeclaration","scope":1471,"src":"4193:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1423,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"r","nameLocation":"4215:1:13","nodeType":"VariableDeclaration","scope":1471,"src":"4207:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4207:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"vs","nameLocation":"4226:2:13","nodeType":"VariableDeclaration","scope":1471,"src":"4218:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1427,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4218:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4192:37:13"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1471,"src":"4253:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1430,"name":"address","nodeType":"ElementaryTypeName","src":"4253:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1471,"src":"4262:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1433,"nodeType":"UserDefinedTypeName","pathNode":{"id":1432,"name":"RecoverError","nameLocations":["4262:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"4262:12:13"},"referencedDeclaration":1325,"src":"4262:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1471,"src":"4276:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4276:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4252:32:13"},"scope":1665,"src":"4173:454:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1503,"nodeType":"Block","src":"4840:164:13","statements":[{"assignments":[1484,1487,1489],"declarations":[{"constant":false,"id":1484,"mutability":"mutable","name":"recovered","nameLocation":"4859:9:13","nodeType":"VariableDeclaration","scope":1503,"src":"4851:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1483,"name":"address","nodeType":"ElementaryTypeName","src":"4851:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"error","nameLocation":"4883:5:13","nodeType":"VariableDeclaration","scope":1503,"src":"4870:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1486,"nodeType":"UserDefinedTypeName","pathNode":{"id":1485,"name":"RecoverError","nameLocations":["4870:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"4870:12:13"},"referencedDeclaration":1325,"src":"4870:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1489,"mutability":"mutable","name":"errorArg","nameLocation":"4898:8:13","nodeType":"VariableDeclaration","scope":1503,"src":"4890:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4890:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1495,"initialValue":{"arguments":[{"id":1491,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"4921:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1492,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"4927:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1493,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"4930:2:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1490,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1391,1471,1579],"referencedDeclaration":1471,"src":"4910:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4910:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4850:83:13"},{"expression":{"arguments":[{"id":1497,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"4955:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"id":1498,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"4962:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1496,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"4943:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1325_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4943:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1500,"nodeType":"ExpressionStatement","src":"4943:28:13"},{"expression":{"id":1501,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"4988:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1482,"id":1502,"nodeType":"Return","src":"4981:16:13"}]},"documentation":{"id":1472,"nodeType":"StructuredDocumentation","src":"4633:116:13","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4763:7:13","nodeType":"FunctionDefinition","parameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"hash","nameLocation":"4779:4:13","nodeType":"VariableDeclaration","scope":1504,"src":"4771:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4771:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"r","nameLocation":"4793:1:13","nodeType":"VariableDeclaration","scope":1504,"src":"4785:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4785:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"vs","nameLocation":"4804:2:13","nodeType":"VariableDeclaration","scope":1504,"src":"4796:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4796:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4770:37:13"},"returnParameters":{"id":1482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1504,"src":"4831:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"4831:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4830:9:13"},"scope":1665,"src":"4754:250:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1578,"nodeType":"Block","src":"5298:1372:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1525,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"6194:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6186:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1523,"name":"uint256","nodeType":"ElementaryTypeName","src":"6186:7:13","typeDescriptions":{}}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6199:66:13","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6186:79:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1539,"nodeType":"IfStatement","src":"6182:164:13","trueBody":{"id":1538,"nodeType":"Block","src":"6267:79:13","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6297:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6289:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"6289:7:13","typeDescriptions":{}}},"id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6289:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1533,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6301:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6314:17:13","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1324,"src":"6301:30:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"id":1535,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"6333:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1536,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6288:47:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1522,"id":1537,"nodeType":"Return","src":"6281:54:13"}]}},{"assignments":[1541],"declarations":[{"constant":false,"id":1541,"mutability":"mutable","name":"signer","nameLocation":"6448:6:13","nodeType":"VariableDeclaration","scope":1578,"src":"6440:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1540,"name":"address","nodeType":"ElementaryTypeName","src":"6440:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1548,"initialValue":{"arguments":[{"id":1543,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"6467:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1544,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"6473:1:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1545,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"6476:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1546,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"6479:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1542,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6457:9:13","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6457:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6440:41:13"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1549,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"6495:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6513:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6505:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1550,"name":"address","nodeType":"ElementaryTypeName","src":"6505:7:13","typeDescriptions":{}}},"id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6505:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6495:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1568,"nodeType":"IfStatement","src":"6491:113:13","trueBody":{"id":1567,"nodeType":"Block","src":"6517:87:13","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6547:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6539:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1555,"name":"address","nodeType":"ElementaryTypeName","src":"6539:7:13","typeDescriptions":{}}},"id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6539:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1559,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6551:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6564:16:13","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1322,"src":"6551:29:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6590:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6582:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6582:7:13","typeDescriptions":{}}},"id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6582:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1565,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6538:55:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1522,"id":1566,"nodeType":"Return","src":"6531:62:13"}]}},{"expression":{"components":[{"id":1569,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"6622:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1570,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6630:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6643:7:13","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1321,"src":"6630:20:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6660:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6652:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6652:7:13","typeDescriptions":{}}},"id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6652:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1576,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6621:42:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":1522,"id":1577,"nodeType":"Return","src":"6614:49:13"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"5010:125:13","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5149:10:13","nodeType":"FunctionDefinition","parameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"hash","nameLocation":"5177:4:13","nodeType":"VariableDeclaration","scope":1579,"src":"5169:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5169:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"v","nameLocation":"5197:1:13","nodeType":"VariableDeclaration","scope":1579,"src":"5191:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1508,"name":"uint8","nodeType":"ElementaryTypeName","src":"5191:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"r","nameLocation":"5216:1:13","nodeType":"VariableDeclaration","scope":1579,"src":"5208:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5208:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1513,"mutability":"mutable","name":"s","nameLocation":"5235:1:13","nodeType":"VariableDeclaration","scope":1579,"src":"5227:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5227:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5159:83:13"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"5266:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1515,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"5275:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1518,"nodeType":"UserDefinedTypeName","pathNode":{"id":1517,"name":"RecoverError","nameLocations":["5275:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"5275:12:13"},"referencedDeclaration":1325,"src":"5275:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1521,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"5289:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5289:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5265:32:13"},"scope":1665,"src":"5140:1530:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1614,"nodeType":"Block","src":"6897:166:13","statements":[{"assignments":[1594,1597,1599],"declarations":[{"constant":false,"id":1594,"mutability":"mutable","name":"recovered","nameLocation":"6916:9:13","nodeType":"VariableDeclaration","scope":1614,"src":"6908:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1593,"name":"address","nodeType":"ElementaryTypeName","src":"6908:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1597,"mutability":"mutable","name":"error","nameLocation":"6940:5:13","nodeType":"VariableDeclaration","scope":1614,"src":"6927:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1596,"nodeType":"UserDefinedTypeName","pathNode":{"id":1595,"name":"RecoverError","nameLocations":["6927:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"6927:12:13"},"referencedDeclaration":1325,"src":"6927:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1599,"mutability":"mutable","name":"errorArg","nameLocation":"6955:8:13","nodeType":"VariableDeclaration","scope":1614,"src":"6947:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1598,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6947:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1606,"initialValue":{"arguments":[{"id":1601,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6978:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1602,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6984:1:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1603,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"6987:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1604,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"6990:1:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1600,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1391,1471,1579],"referencedDeclaration":1579,"src":"6967:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6967:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1325_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"6907:85:13"},{"expression":{"arguments":[{"id":1608,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"7014:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},{"id":1609,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"7021:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1607,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"7002:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1325_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7002:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1611,"nodeType":"ExpressionStatement","src":"7002:28:13"},{"expression":{"id":1612,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"7047:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1592,"id":1613,"nodeType":"Return","src":"7040:16:13"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"6676:122:13","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1615,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6812:7:13","nodeType":"FunctionDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"hash","nameLocation":"6828:4:13","nodeType":"VariableDeclaration","scope":1615,"src":"6820:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1581,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6820:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"v","nameLocation":"6840:1:13","nodeType":"VariableDeclaration","scope":1615,"src":"6834:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1583,"name":"uint8","nodeType":"ElementaryTypeName","src":"6834:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"r","nameLocation":"6851:1:13","nodeType":"VariableDeclaration","scope":1615,"src":"6843:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6843:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1588,"mutability":"mutable","name":"s","nameLocation":"6862:1:13","nodeType":"VariableDeclaration","scope":1615,"src":"6854:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6854:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6819:45:13"},"returnParameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1615,"src":"6888:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1590,"name":"address","nodeType":"ElementaryTypeName","src":"6888:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6887:9:13"},"scope":1665,"src":"6803:260:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1663,"nodeType":"Block","src":"7268:460:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1624,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"7282:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1625,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"7291:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7304:7:13","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1321,"src":"7291:20:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"src":"7282:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1630,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"7378:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1631,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"7387:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7400:16:13","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1322,"src":"7387:29:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"src":"7378:38:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1638,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"7483:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1639,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"7492:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7505:22:13","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1323,"src":"7492:35:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"src":"7483:44:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1650,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"7617:5:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1651,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"7626:12:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1325_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7639:17:13","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1324,"src":"7626:30:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"src":"7617:39:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1659,"nodeType":"IfStatement","src":"7613:109:13","trueBody":{"id":1658,"nodeType":"Block","src":"7658:64:13","statements":[{"errorCall":{"arguments":[{"id":1655,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"7702:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1654,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"7679:22:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7679:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1657,"nodeType":"RevertStatement","src":"7672:39:13"}]}},"id":1660,"nodeType":"IfStatement","src":"7479:243:13","trueBody":{"id":1649,"nodeType":"Block","src":"7529:78:13","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1645,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"7586:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7578:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1643,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:13","typeDescriptions":{}}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1642,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"7550:27:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7550:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1648,"nodeType":"RevertStatement","src":"7543:53:13"}]}},"id":1661,"nodeType":"IfStatement","src":"7374:348:13","trueBody":{"id":1637,"nodeType":"Block","src":"7418:55:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1634,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"7439:21:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7439:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1636,"nodeType":"RevertStatement","src":"7432:30:13"}]}},"id":1662,"nodeType":"IfStatement","src":"7278:444:13","trueBody":{"id":1629,"nodeType":"Block","src":"7313:55:13","statements":[{"functionReturnParameters":1623,"id":1628,"nodeType":"Return","src":"7327:7:13"}]}}]},"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"7069:122:13","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":1664,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7205:11:13","nodeType":"FunctionDefinition","parameters":{"id":1622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1619,"mutability":"mutable","name":"error","nameLocation":"7230:5:13","nodeType":"VariableDeclaration","scope":1664,"src":"7217:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1618,"nodeType":"UserDefinedTypeName","pathNode":{"id":1617,"name":"RecoverError","nameLocations":["7217:12:13"],"nodeType":"IdentifierPath","referencedDeclaration":1325,"src":"7217:12:13"},"referencedDeclaration":1325,"src":"7217:12:13","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1325","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":1621,"mutability":"mutable","name":"errorArg","nameLocation":"7245:8:13","nodeType":"VariableDeclaration","scope":1664,"src":"7237:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7237:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7216:38:13"},"returnParameters":{"id":1623,"nodeType":"ParameterList","parameters":[],"src":"7268:0:13"},"scope":1665,"src":"7196:532:13","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1666,"src":"344:7386:13","usedErrors":[1328,1333,1338],"usedEvents":[]}],"src":"112:7619:13"},"id":13},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"EIP712":[1892],"IERC5267":[258],"MessageHashUtils":[1966],"ShortString":[741],"ShortStrings":[952]},"id":1893,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1667,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:14"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","file":"./MessageHashUtils.sol","id":1669,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1893,"sourceUnit":1967,"src":"139:56:14","symbolAliases":[{"foreign":{"id":1668,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"147:16:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ShortStrings.sol","file":"../ShortStrings.sol","id":1672,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1893,"sourceUnit":953,"src":"196:62:14","symbolAliases":[{"foreign":{"id":1670,"name":"ShortStrings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"204:12:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1671,"name":"ShortString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"218:11:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC5267.sol","file":"../../interfaces/IERC5267.sol","id":1674,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1893,"sourceUnit":259,"src":"259:55:14","symbolAliases":[{"foreign":{"id":1673,"name":"IERC5267","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"267:8:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1676,"name":"IERC5267","nameLocations":["1988:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":258,"src":"1988:8:14"},"id":1677,"nodeType":"InheritanceSpecifier","src":"1988:8:14"}],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":1675,"nodeType":"StructuredDocumentation","src":"316:1643:14","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"},"fullyImplemented":true,"id":1892,"linearizedBaseContracts":[1892,258],"name":"EIP712","nameLocation":"1978:6:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1679,"libraryName":{"id":1678,"name":"ShortStrings","nameLocations":["2009:12:14"],"nodeType":"IdentifierPath","referencedDeclaration":952,"src":"2009:12:14"},"nodeType":"UsingForDirective","src":"2003:25:14"},{"constant":true,"id":1684,"mutability":"constant","name":"TYPE_HASH","nameLocation":"2059:9:14","nodeType":"VariableDeclaration","scope":1892,"src":"2034:140:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2034:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2089:84:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":1681,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2079:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2079:95:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1686,"mutability":"immutable","name":"_cachedDomainSeparator","nameLocation":"2399:22:14","nodeType":"VariableDeclaration","scope":1892,"src":"2373:48:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2373:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1688,"mutability":"immutable","name":"_cachedChainId","nameLocation":"2453:14:14","nodeType":"VariableDeclaration","scope":1892,"src":"2427:40:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"2427:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1690,"mutability":"immutable","name":"_cachedThis","nameLocation":"2499:11:14","nodeType":"VariableDeclaration","scope":1892,"src":"2473:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1689,"name":"address","nodeType":"ElementaryTypeName","src":"2473:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":1692,"mutability":"immutable","name":"_hashedName","nameLocation":"2543:11:14","nodeType":"VariableDeclaration","scope":1892,"src":"2517:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2517:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1694,"mutability":"immutable","name":"_hashedVersion","nameLocation":"2586:14:14","nodeType":"VariableDeclaration","scope":1892,"src":"2560:40:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2560:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1697,"mutability":"immutable","name":"_name","nameLocation":"2637:5:14","nodeType":"VariableDeclaration","scope":1892,"src":"2607:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":1696,"nodeType":"UserDefinedTypeName","pathNode":{"id":1695,"name":"ShortString","nameLocations":["2607:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"2607:11:14"},"referencedDeclaration":741,"src":"2607:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":1700,"mutability":"immutable","name":"_version","nameLocation":"2678:8:14","nodeType":"VariableDeclaration","scope":1892,"src":"2648:38:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"},"typeName":{"id":1699,"nodeType":"UserDefinedTypeName","pathNode":{"id":1698,"name":"ShortString","nameLocations":["2648:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":741,"src":"2648:11:14"},"referencedDeclaration":741,"src":"2648:11:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"visibility":"private"},{"constant":false,"id":1702,"mutability":"mutable","name":"_nameFallback","nameLocation":"2707:13:14","nodeType":"VariableDeclaration","scope":1892,"src":"2692:28:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1701,"name":"string","nodeType":"ElementaryTypeName","src":"2692:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1704,"mutability":"mutable","name":"_versionFallback","nameLocation":"2741:16:14","nodeType":"VariableDeclaration","scope":1892,"src":"2726:31:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1703,"name":"string","nodeType":"ElementaryTypeName","src":"2726:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":1761,"nodeType":"Block","src":"3383:376:14","statements":[{"expression":{"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1712,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"3393:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1715,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"3432:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":1713,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"3401:4:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3406:25:14","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":893,"src":"3401:30:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$741_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3401:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"src":"3393:53:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"id":1718,"nodeType":"ExpressionStatement","src":"3393:53:14"},{"expression":{"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1719,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"3456:8:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1722,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"3501:16:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":1720,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"3467:7:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3475:25:14","memberName":"toShortStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":893,"src":"3467:33:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$741_$attached_to$_t_string_memory_ptr_$","typeString":"function (string memory,string storage pointer) returns (ShortString)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3467:51:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"src":"3456:62:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"id":1725,"nodeType":"ExpressionStatement","src":"3456:62:14"},{"expression":{"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1726,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"3528:11:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1730,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"3558:4:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3552:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1728,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:14","typeDescriptions":{}}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1727,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3542:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3542:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3528:36:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1734,"nodeType":"ExpressionStatement","src":"3528:36:14"},{"expression":{"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1735,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"3574:14:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1739,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"3607:7:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3601:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1737,"name":"bytes","nodeType":"ElementaryTypeName","src":"3601:5:14","typeDescriptions":{}}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3601:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1736,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3591:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3591:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3574:42:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1743,"nodeType":"ExpressionStatement","src":"3574:42:14"},{"expression":{"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1744,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"3627:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1745,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3644:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3650:7:14","memberName":"chainid","nodeType":"MemberAccess","src":"3644:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3627:30:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1748,"nodeType":"ExpressionStatement","src":"3627:30:14"},{"expression":{"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1749,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"3667:22:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":1750,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"3692:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3692:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3667:48:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1753,"nodeType":"ExpressionStatement","src":"3667:48:14"},{"expression":{"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1754,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3725:11:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1757,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3747:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}],"id":1756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3739:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:14","typeDescriptions":{}}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3739:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3725:27:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1760,"nodeType":"ExpressionStatement","src":"3725:27:14"}]},"documentation":{"id":1705,"nodeType":"StructuredDocumentation","src":"2764:559:14","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":1762,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1707,"mutability":"mutable","name":"name","nameLocation":"3354:4:14","nodeType":"VariableDeclaration","scope":1762,"src":"3340:18:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1706,"name":"string","nodeType":"ElementaryTypeName","src":"3340:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1709,"mutability":"mutable","name":"version","nameLocation":"3374:7:14","nodeType":"VariableDeclaration","scope":1762,"src":"3360:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1708,"name":"string","nodeType":"ElementaryTypeName","src":"3360:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3339:43:14"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[],"src":"3383:0:14"},"scope":1892,"src":"3328:431:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1787,"nodeType":"Block","src":"3907:200:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1770,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3929:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}],"id":1769,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3921:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1768,"name":"address","nodeType":"ElementaryTypeName","src":"3921:7:14","typeDescriptions":{}}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3921:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1772,"name":"_cachedThis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"3938:11:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3921:28:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1774,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3953:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3959:7:14","memberName":"chainid","nodeType":"MemberAccess","src":"3953:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1776,"name":"_cachedChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"3970:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3953:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3921:63:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1785,"nodeType":"Block","src":"4046:55:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1782,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"4067:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4067:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1767,"id":1784,"nodeType":"Return","src":"4060:30:14"}]},"id":1786,"nodeType":"IfStatement","src":"3917:184:14","trueBody":{"id":1781,"nodeType":"Block","src":"3986:54:14","statements":[{"expression":{"id":1779,"name":"_cachedDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"4007:22:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1767,"id":1780,"nodeType":"Return","src":"4000:29:14"}]}}]},"documentation":{"id":1763,"nodeType":"StructuredDocumentation","src":"3765:75:14","text":" @dev Returns the domain separator for the current chain."},"id":1788,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3854:18:14","nodeType":"FunctionDefinition","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[],"src":"3872:2:14"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1788,"src":"3898:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1765,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3898:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3897:9:14"},"scope":1892,"src":"3845:262:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1808,"nodeType":"Block","src":"4177:115:14","statements":[{"expression":{"arguments":[{"arguments":[{"id":1796,"name":"TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"4215:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1797,"name":"_hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4226:11:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1798,"name":"_hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4239:14:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1799,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4255:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4261:7:14","memberName":"chainid","nodeType":"MemberAccess","src":"4255:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1803,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4278:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}],"id":1802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4270:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1801,"name":"address","nodeType":"ElementaryTypeName","src":"4270:7:14","typeDescriptions":{}}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4270:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1794,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4204:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4208:6:14","memberName":"encode","nodeType":"MemberAccess","src":"4204:10:14","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:80:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1793,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4194:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4194:91:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1792,"id":1807,"nodeType":"Return","src":"4187:98:14"}]},"id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"4122:21:14","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[],"src":"4143:2:14"},"returnParameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"4168:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1790,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4168:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4167:9:14"},"scope":1892,"src":"4113:179:14","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1824,"nodeType":"Block","src":"5003:90:14","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1819,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"5053:18:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5053:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1821,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"5075:10:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1817,"name":"MessageHashUtils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"5020:16:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MessageHashUtils_$1966_$","typeString":"type(library MessageHashUtils)"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5037:15:14","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":1965,"src":"5020:32:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:66:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1816,"id":1823,"nodeType":"Return","src":"5013:73:14"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"4298:614:14","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":1825,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4926:16:14","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"structHash","nameLocation":"4951:10:14","nodeType":"VariableDeclaration","scope":1825,"src":"4943:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1811,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4943:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4942:20:14"},"returnParameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1825,"src":"4994:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1814,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4994:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4993:9:14"},"scope":1892,"src":"4917:176:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[257],"body":{"id":1866,"nodeType":"Block","src":"5472:229:14","statements":[{"expression":{"components":[{"hexValue":"0f","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"5503:7:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c","typeString":"literal_string hex\"0f\""},"value":"\u000f"},{"arguments":[],"expression":{"argumentTypes":[],"id":1845,"name":"_EIP712Name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"5533:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5533:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1847,"name":"_EIP712Version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"5560:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5560:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":1849,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5590:5:14","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5596:7:14","memberName":"chainid","nodeType":"MemberAccess","src":"5590:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1853,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5625:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$1892","typeString":"contract EIP712"}],"id":1852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5617:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1851,"name":"address","nodeType":"ElementaryTypeName","src":"5617:7:14","typeDescriptions":{}}},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5652:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5644:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5644:7:14","typeDescriptions":{}}},"id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5644:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"30","id":1862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5682:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5668:13:14","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1859,"name":"uint256","nodeType":"ElementaryTypeName","src":"5672:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1860,"nodeType":"ArrayTypeName","src":"5672:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5668:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":1864,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5489:205:14","typeDescriptions":{"typeIdentifier":"t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"}},"functionReturnParameters":1843,"id":1865,"nodeType":"Return","src":"5482:212:14"}]},"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"5099:40:14","text":" @dev See {IERC-5267}."},"functionSelector":"84b0196e","id":1867,"implemented":true,"kind":"function","modifiers":[],"name":"eip712Domain","nameLocation":"5153:12:14","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[],"src":"5165:2:14"},"returnParameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"fields","nameLocation":"5249:6:14","nodeType":"VariableDeclaration","scope":1867,"src":"5242:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1828,"name":"bytes1","nodeType":"ElementaryTypeName","src":"5242:6:14","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"name","nameLocation":"5283:4:14","nodeType":"VariableDeclaration","scope":1867,"src":"5269:18:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1830,"name":"string","nodeType":"ElementaryTypeName","src":"5269:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1833,"mutability":"mutable","name":"version","nameLocation":"5315:7:14","nodeType":"VariableDeclaration","scope":1867,"src":"5301:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1832,"name":"string","nodeType":"ElementaryTypeName","src":"5301:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"chainId","nameLocation":"5344:7:14","nodeType":"VariableDeclaration","scope":1867,"src":"5336:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint256","nodeType":"ElementaryTypeName","src":"5336:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"verifyingContract","nameLocation":"5373:17:14","nodeType":"VariableDeclaration","scope":1867,"src":"5365:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1836,"name":"address","nodeType":"ElementaryTypeName","src":"5365:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"salt","nameLocation":"5412:4:14","nodeType":"VariableDeclaration","scope":1867,"src":"5404:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1838,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5404:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1842,"mutability":"mutable","name":"extensions","nameLocation":"5447:10:14","nodeType":"VariableDeclaration","scope":1867,"src":"5430:27:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1840,"name":"uint256","nodeType":"ElementaryTypeName","src":"5430:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1841,"nodeType":"ArrayTypeName","src":"5430:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5228:239:14"},"scope":1892,"src":"5144:557:14","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1878,"nodeType":"Block","src":"6082:65:14","statements":[{"expression":{"arguments":[{"id":1875,"name":"_nameFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"6126:13:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":1873,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"6099:5:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6105:20:14","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":920,"src":"6099:26:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$741_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$741_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6099:41:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1872,"id":1877,"nodeType":"Return","src":"6092:48:14"}]},"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"5707:256:14","text":" @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":1879,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Name","nameLocation":"6030:11:14","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"6041:2:14"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1879,"src":"6067:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1870,"name":"string","nodeType":"ElementaryTypeName","src":"6067:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6066:15:14"},"scope":1892,"src":"6021:126:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1890,"nodeType":"Block","src":"6537:71:14","statements":[{"expression":{"arguments":[{"id":1887,"name":"_versionFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"6584:16:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":1885,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"6554:8:14","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_ShortString_$741","typeString":"ShortString"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6563:20:14","memberName":"toStringWithFallback","nodeType":"MemberAccess","referencedDeclaration":920,"src":"6554:29:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_userDefinedValueType$_ShortString_$741_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$741_$","typeString":"function (ShortString,string storage pointer) pure returns (string memory)"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6554:47:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1884,"id":1889,"nodeType":"Return","src":"6547:54:14"}]},"documentation":{"id":1880,"nodeType":"StructuredDocumentation","src":"6153:262:14","text":" @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."},"id":1891,"implemented":true,"kind":"function","modifiers":[],"name":"_EIP712Version","nameLocation":"6482:14:14","nodeType":"FunctionDefinition","parameters":{"id":1881,"nodeType":"ParameterList","parameters":[],"src":"6496:2:14"},"returnParameters":{"id":1884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1891,"src":"6522:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1882,"name":"string","nodeType":"ElementaryTypeName","src":"6522:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6521:15:14"},"scope":1892,"src":"6473:135:14","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1893,"src":"1960:4650:14","usedErrors":[749,751],"usedEvents":[238]}],"src":"113:6498:14"},"id":14},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol","exportedSymbols":{"MessageHashUtils":[1966],"Strings":[1317]},"id":1967,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1894,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"123:24:15"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1896,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1967,"sourceUnit":1318,"src":"149:39:15","symbolAliases":[{"foreign":{"id":1895,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"157:7:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":1897,"nodeType":"StructuredDocumentation","src":"190:330:15","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"id":1966,"linearizedBaseContracts":[1966],"name":"MessageHashUtils","nameLocation":"529:16:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":1906,"nodeType":"Block","src":"1314:368:15","statements":[{"AST":{"nativeSrc":"1376:300:15","nodeType":"YulBlock","src":"1376:300:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1397:4:15","nodeType":"YulLiteral","src":"1397:4:15","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1403:34:15","nodeType":"YulLiteral","src":"1403:34:15","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1390:6:15","nodeType":"YulIdentifier","src":"1390:6:15"},"nativeSrc":"1390:48:15","nodeType":"YulFunctionCall","src":"1390:48:15"},"nativeSrc":"1390:48:15","nodeType":"YulExpressionStatement","src":"1390:48:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1499:4:15","nodeType":"YulLiteral","src":"1499:4:15","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1505:11:15","nodeType":"YulIdentifier","src":"1505:11:15"}],"functionName":{"name":"mstore","nativeSrc":"1492:6:15","nodeType":"YulIdentifier","src":"1492:6:15"},"nativeSrc":"1492:25:15","nodeType":"YulFunctionCall","src":"1492:25:15"},"nativeSrc":"1492:25:15","nodeType":"YulExpressionStatement","src":"1492:25:15"},{"nativeSrc":"1571:31:15","nodeType":"YulAssignment","src":"1571:31:15","value":{"arguments":[{"kind":"number","nativeSrc":"1591:4:15","nodeType":"YulLiteral","src":"1591:4:15","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1597:4:15","nodeType":"YulLiteral","src":"1597:4:15","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1581:9:15","nodeType":"YulIdentifier","src":"1581:9:15"},"nativeSrc":"1581:21:15","nodeType":"YulFunctionCall","src":"1581:21:15"},"variableNames":[{"name":"digest","nativeSrc":"1571:6:15","nodeType":"YulIdentifier","src":"1571:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1903,"isOffset":false,"isSlot":false,"src":"1571:6:15","valueSize":1},{"declaration":1900,"isOffset":false,"isSlot":false,"src":"1505:11:15","valueSize":1}],"id":1905,"nodeType":"InlineAssembly","src":"1367:309:15"}]},"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"552:665:15","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"id":1907,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:15","nodeType":"FunctionDefinition","parameters":{"id":1901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1900,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:15","nodeType":"VariableDeclaration","scope":1907,"src":"1254:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:15"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"digest","nameLocation":"1306:6:15","nodeType":"VariableDeclaration","scope":1907,"src":"1298:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:15"},"scope":1966,"src":"1222:460:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1932,"nodeType":"Block","src":"2234:143:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2286:32:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":1924,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"2343:7:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2351:6:15","memberName":"length","nodeType":"MemberAccess","src":"2343:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1922,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1317,"src":"2326:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1317_$","typeString":"type(library Strings)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2334:8:15","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"2326:16:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2326:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2320:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1920,"name":"bytes","nodeType":"ElementaryTypeName","src":"2320:5:15","typeDescriptions":{}}},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1928,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"2361:7:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2273:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1916,"name":"bytes","nodeType":"ElementaryTypeName","src":"2273:5:15","typeDescriptions":{}}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2279:6:15","memberName":"concat","nodeType":"MemberAccess","src":"2273:12:15","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2273:96:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1915,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2263:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:107:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1914,"id":1931,"nodeType":"Return","src":"2244:126:15"}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"1688:455:15","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2157:22:15","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"message","nameLocation":"2193:7:15","nodeType":"VariableDeclaration","scope":1933,"src":"2180:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1909,"name":"bytes","nodeType":"ElementaryTypeName","src":"2180:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2179:22:15"},"returnParameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"2225:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:9:15"},"scope":1966,"src":"2148:229:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1952,"nodeType":"Block","src":"2831:80:15","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2875:10:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1947,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"2887:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1948,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"2898:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1944,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2858:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2862:12:15","memberName":"encodePacked","nodeType":"MemberAccess","src":"2858:16:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1943,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2848:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2848:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1942,"id":1951,"nodeType":"Return","src":"2841:63:15"}]},"documentation":{"id":1934,"nodeType":"StructuredDocumentation","src":"2383:332:15","text":" @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"id":1953,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2729:31:15","nodeType":"FunctionDefinition","parameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1936,"mutability":"mutable","name":"validator","nameLocation":"2769:9:15","nodeType":"VariableDeclaration","scope":1953,"src":"2761:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1935,"name":"address","nodeType":"ElementaryTypeName","src":"2761:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1938,"mutability":"mutable","name":"data","nameLocation":"2793:4:15","nodeType":"VariableDeclaration","scope":1953,"src":"2780:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1937,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2760:38:15"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1953,"src":"2822:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2822:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2821:9:15"},"scope":1966,"src":"2720:191:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1964,"nodeType":"Block","src":"3462:292:15","statements":[{"AST":{"nativeSrc":"3524:224:15","nodeType":"YulBlock","src":"3524:224:15","statements":[{"nativeSrc":"3538:22:15","nodeType":"YulVariableDeclaration","src":"3538:22:15","value":{"arguments":[{"kind":"number","nativeSrc":"3555:4:15","nodeType":"YulLiteral","src":"3555:4:15","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3549:5:15","nodeType":"YulIdentifier","src":"3549:5:15"},"nativeSrc":"3549:11:15","nodeType":"YulFunctionCall","src":"3549:11:15"},"variables":[{"name":"ptr","nativeSrc":"3542:3:15","nodeType":"YulTypedName","src":"3542:3:15","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3580:3:15","nodeType":"YulIdentifier","src":"3580:3:15"},{"hexValue":"1901","kind":"string","nativeSrc":"3585:10:15","nodeType":"YulLiteral","src":"3585:10:15","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3573:6:15","nodeType":"YulIdentifier","src":"3573:6:15"},"nativeSrc":"3573:23:15","nodeType":"YulFunctionCall","src":"3573:23:15"},"nativeSrc":"3573:23:15","nodeType":"YulExpressionStatement","src":"3573:23:15"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3620:3:15","nodeType":"YulIdentifier","src":"3620:3:15"},{"kind":"number","nativeSrc":"3625:4:15","nodeType":"YulLiteral","src":"3625:4:15","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3616:3:15","nodeType":"YulIdentifier","src":"3616:3:15"},"nativeSrc":"3616:14:15","nodeType":"YulFunctionCall","src":"3616:14:15"},{"name":"domainSeparator","nativeSrc":"3632:15:15","nodeType":"YulIdentifier","src":"3632:15:15"}],"functionName":{"name":"mstore","nativeSrc":"3609:6:15","nodeType":"YulIdentifier","src":"3609:6:15"},"nativeSrc":"3609:39:15","nodeType":"YulFunctionCall","src":"3609:39:15"},"nativeSrc":"3609:39:15","nodeType":"YulExpressionStatement","src":"3609:39:15"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3672:3:15","nodeType":"YulIdentifier","src":"3672:3:15"},{"kind":"number","nativeSrc":"3677:4:15","nodeType":"YulLiteral","src":"3677:4:15","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3668:3:15","nodeType":"YulIdentifier","src":"3668:3:15"},"nativeSrc":"3668:14:15","nodeType":"YulFunctionCall","src":"3668:14:15"},{"name":"structHash","nativeSrc":"3684:10:15","nodeType":"YulIdentifier","src":"3684:10:15"}],"functionName":{"name":"mstore","nativeSrc":"3661:6:15","nodeType":"YulIdentifier","src":"3661:6:15"},"nativeSrc":"3661:34:15","nodeType":"YulFunctionCall","src":"3661:34:15"},"nativeSrc":"3661:34:15","nodeType":"YulExpressionStatement","src":"3661:34:15"},{"nativeSrc":"3708:30:15","nodeType":"YulAssignment","src":"3708:30:15","value":{"arguments":[{"name":"ptr","nativeSrc":"3728:3:15","nodeType":"YulIdentifier","src":"3728:3:15"},{"kind":"number","nativeSrc":"3733:4:15","nodeType":"YulLiteral","src":"3733:4:15","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3718:9:15","nodeType":"YulIdentifier","src":"3718:9:15"},"nativeSrc":"3718:20:15","nodeType":"YulFunctionCall","src":"3718:20:15"},"variableNames":[{"name":"digest","nativeSrc":"3708:6:15","nodeType":"YulIdentifier","src":"3708:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1961,"isOffset":false,"isSlot":false,"src":"3708:6:15","valueSize":1},{"declaration":1956,"isOffset":false,"isSlot":false,"src":"3632:15:15","valueSize":1},{"declaration":1958,"isOffset":false,"isSlot":false,"src":"3684:10:15","valueSize":1}],"id":1963,"nodeType":"InlineAssembly","src":"3515:233:15"}]},"documentation":{"id":1954,"nodeType":"StructuredDocumentation","src":"2917:431:15","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"id":1965,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3362:15:15","nodeType":"FunctionDefinition","parameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"domainSeparator","nameLocation":"3386:15:15","nodeType":"VariableDeclaration","scope":1965,"src":"3378:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1955,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3378:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1958,"mutability":"mutable","name":"structHash","nameLocation":"3411:10:15","nodeType":"VariableDeclaration","scope":1965,"src":"3403:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3403:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3377:45:15"},"returnParameters":{"id":1962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"digest","nameLocation":"3454:6:15","nodeType":"VariableDeclaration","scope":1965,"src":"3446:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3446:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3445:16:15"},"scope":1966,"src":"3353:401:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1967,"src":"521:3235:15","usedErrors":[],"usedEvents":[]}],"src":"123:3634:15"},"id":15},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1978]},"id":1979,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1968,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"141:279:16","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1978,"linearizedBaseContracts":[1978],"name":"IERC165","nameLocation":"431:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1970,"nodeType":"StructuredDocumentation","src":"445:340:16","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1977,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:16","nodeType":"FunctionDefinition","parameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:16","nodeType":"VariableDeclaration","scope":1977,"src":"817:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1971,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:16"},"returnParameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"860:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1974,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:16"},"scope":1978,"src":"790:76:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1979,"src":"421:447:16","usedErrors":[],"usedEvents":[]}],"src":"115:754:16"},"id":16},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3032]},"id":3033,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1980,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1981,"nodeType":"StructuredDocumentation","src":"129:73:17","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3032,"linearizedBaseContracts":[3032],"name":"Math","nameLocation":"211:4:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1982,"nodeType":"StructuredDocumentation","src":"222:50:17","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1984,"name":"MathOverflowedMulDiv","nameLocation":"283:20:17","nodeType":"ErrorDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[],"src":"303:2:17"},"src":"277:29:17"},{"canonicalName":"Math.Rounding","id":1989,"members":[{"id":1985,"name":"Floor","nameLocation":"336:5:17","nodeType":"EnumValue","src":"336:5:17"},{"id":1986,"name":"Ceil","nameLocation":"379:4:17","nodeType":"EnumValue","src":"379:4:17"},{"id":1987,"name":"Trunc","nameLocation":"421:5:17","nodeType":"EnumValue","src":"421:5:17"},{"id":1988,"name":"Expand","nameLocation":"451:6:17","nodeType":"EnumValue","src":"451:6:17"}],"name":"Rounding","nameLocation":"317:8:17","nodeType":"EnumDefinition","src":"312:169:17"},{"body":{"id":2020,"nodeType":"Block","src":"661:140:17","statements":[{"id":2019,"nodeType":"UncheckedBlock","src":"671:124:17","statements":[{"assignments":[2002],"declarations":[{"constant":false,"id":2002,"mutability":"mutable","name":"c","nameLocation":"703:1:17","nodeType":"VariableDeclaration","scope":2019,"src":"695:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2006,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2003,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"707:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2004,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1994,"src":"711:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2007,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"730:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2008,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"734:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2014,"nodeType":"IfStatement","src":"726:28:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2012,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2000,"id":2013,"nodeType":"Return","src":"737:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2016,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"782:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2017,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2000,"id":2018,"nodeType":"Return","src":"768:16:17"}]}]},"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"487:93:17","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":2021,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:17","nodeType":"FunctionDefinition","parameters":{"id":1995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"a","nameLocation":"609:1:17","nodeType":"VariableDeclaration","scope":2021,"src":"601:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1994,"mutability":"mutable","name":"b","nameLocation":"620:1:17","nodeType":"VariableDeclaration","scope":2021,"src":"612:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:17"},"returnParameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2021,"src":"646:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1996,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2021,"src":"652:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:17"},"scope":3032,"src":"585:216:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2048,"nodeType":"Block","src":"984:113:17","statements":[{"id":2047,"nodeType":"UncheckedBlock","src":"994:97:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2033,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"1022:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2034,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"1026:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2040,"nodeType":"IfStatement","src":"1018:28:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2032,"id":2039,"nodeType":"Return","src":"1029:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"1074:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2043,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"1078:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2045,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2032,"id":2046,"nodeType":"Return","src":"1060:20:17"}]}]},"documentation":{"id":2022,"nodeType":"StructuredDocumentation","src":"807:96:17","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":2049,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:17","nodeType":"FunctionDefinition","parameters":{"id":2027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"a","nameLocation":"932:1:17","nodeType":"VariableDeclaration","scope":2049,"src":"924:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"b","nameLocation":"943:1:17","nodeType":"VariableDeclaration","scope":2049,"src":"935:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2025,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:17"},"returnParameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2049,"src":"969:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2028,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2049,"src":"975:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:17"},"scope":3032,"src":"908:189:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2090,"nodeType":"Block","src":"1283:417:17","statements":[{"id":2089,"nodeType":"UncheckedBlock","src":"1293:401:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1551:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2068,"nodeType":"IfStatement","src":"1547:28:17","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2066,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2060,"id":2067,"nodeType":"Return","src":"1559:16:17"}},{"assignments":[2070],"declarations":[{"constant":false,"id":2070,"mutability":"mutable","name":"c","nameLocation":"1597:1:17","nodeType":"VariableDeclaration","scope":2089,"src":"1589:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2069,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2074,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2071,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1601:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2072,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"1605:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2075,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2070,"src":"1624:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2076,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1628:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2078,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"1633:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2084,"nodeType":"IfStatement","src":"1620:33:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2082,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2060,"id":2083,"nodeType":"Return","src":"1636:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2086,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2070,"src":"1681:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2087,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2060,"id":2088,"nodeType":"Return","src":"1667:16:17"}]}]},"documentation":{"id":2050,"nodeType":"StructuredDocumentation","src":"1103:99:17","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":2091,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:17","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"a","nameLocation":"1231:1:17","nodeType":"VariableDeclaration","scope":2091,"src":"1223:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"b","nameLocation":"1242:1:17","nodeType":"VariableDeclaration","scope":2091,"src":"1234:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2053,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:17"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2091,"src":"1268:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2056,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2091,"src":"1274:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:17"},"scope":3032,"src":"1207:493:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2118,"nodeType":"Block","src":"1887:114:17","statements":[{"id":2117,"nodeType":"UncheckedBlock","src":"1897:98:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2103,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"1925:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2110,"nodeType":"IfStatement","src":"1921:29:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2108,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2102,"id":2109,"nodeType":"Return","src":"1933:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2112,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"1978:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2113,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"1982:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2115,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2102,"id":2116,"nodeType":"Return","src":"1964:20:17"}]}]},"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"1706:100:17","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":2119,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:17","nodeType":"FunctionDefinition","parameters":{"id":2097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"a","nameLocation":"1835:1:17","nodeType":"VariableDeclaration","scope":2119,"src":"1827:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2096,"mutability":"mutable","name":"b","nameLocation":"1846:1:17","nodeType":"VariableDeclaration","scope":2119,"src":"1838:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:17"},"returnParameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2119,"src":"1872:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2098,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2119,"src":"1878:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:17"},"scope":3032,"src":"1811:190:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2146,"nodeType":"Block","src":"2198:114:17","statements":[{"id":2145,"nodeType":"UncheckedBlock","src":"2208:98:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2236:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2138,"nodeType":"IfStatement","src":"2232:29:17","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2130,"id":2137,"nodeType":"Return","src":"2244:17:17"}},{"expression":{"components":[{"hexValue":"74727565","id":2139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2140,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"2289:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2141,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2124,"src":"2293:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2130,"id":2144,"nodeType":"Return","src":"2275:20:17"}]}]},"documentation":{"id":2120,"nodeType":"StructuredDocumentation","src":"2007:110:17","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":2147,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:17","nodeType":"FunctionDefinition","parameters":{"id":2125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2122,"mutability":"mutable","name":"a","nameLocation":"2146:1:17","nodeType":"VariableDeclaration","scope":2147,"src":"2138:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2121,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2124,"mutability":"mutable","name":"b","nameLocation":"2157:1:17","nodeType":"VariableDeclaration","scope":2147,"src":"2149:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2123,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:17"},"returnParameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2147,"src":"2183:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2126,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2129,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2147,"src":"2189:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2128,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:17"},"scope":3032,"src":"2122:190:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2164,"nodeType":"Block","src":"2449:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2157,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"2466:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2158,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"2470:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2161,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"2478:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:17","trueExpression":{"id":2160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2150,"src":"2474:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2156,"id":2163,"nodeType":"Return","src":"2459:20:17"}]},"documentation":{"id":2148,"nodeType":"StructuredDocumentation","src":"2318:59:17","text":" @dev Returns the largest of two numbers."},"id":2165,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:17","nodeType":"FunctionDefinition","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2150,"mutability":"mutable","name":"a","nameLocation":"2403:1:17","nodeType":"VariableDeclaration","scope":2165,"src":"2395:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2149,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2152,"mutability":"mutable","name":"b","nameLocation":"2414:1:17","nodeType":"VariableDeclaration","scope":2165,"src":"2406:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2151,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:17"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2165,"src":"2440:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2154,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:17"},"scope":3032,"src":"2382:104:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2182,"nodeType":"Block","src":"2624:37:17","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"2641:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2176,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"2645:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2179,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"2653:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:17","trueExpression":{"id":2178,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"2649:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2174,"id":2181,"nodeType":"Return","src":"2634:20:17"}]},"documentation":{"id":2166,"nodeType":"StructuredDocumentation","src":"2492:60:17","text":" @dev Returns the smallest of two numbers."},"id":2183,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:17","nodeType":"FunctionDefinition","parameters":{"id":2171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"a","nameLocation":"2578:1:17","nodeType":"VariableDeclaration","scope":2183,"src":"2570:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2167,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2170,"mutability":"mutable","name":"b","nameLocation":"2589:1:17","nodeType":"VariableDeclaration","scope":2183,"src":"2581:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2169,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:17"},"returnParameters":{"id":2174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2183,"src":"2615:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2172,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:17"},"scope":3032,"src":"2557:104:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2205,"nodeType":"Block","src":"2845:82:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2193,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"2900:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2194,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"2904:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"2910:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2198,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"2914:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2192,"id":2204,"nodeType":"Return","src":"2892:28:17"}]},"documentation":{"id":2184,"nodeType":"StructuredDocumentation","src":"2667:102:17","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2206,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:17","nodeType":"FunctionDefinition","parameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"a","nameLocation":"2799:1:17","nodeType":"VariableDeclaration","scope":2206,"src":"2791:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2188,"mutability":"mutable","name":"b","nameLocation":"2810:1:17","nodeType":"VariableDeclaration","scope":2206,"src":"2802:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:17"},"returnParameters":{"id":2192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2206,"src":"2836:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:17"},"scope":3032,"src":"2774:153:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2239,"nodeType":"Block","src":"3219:260:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2216,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3233:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2224,"nodeType":"IfStatement","src":"3229:127:17","trueBody":{"id":2223,"nodeType":"Block","src":"3241:115:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2219,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"3340:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2220,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3344:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2215,"id":2222,"nodeType":"Return","src":"3333:12:17"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"3444:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"3458:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2232,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2233,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"3467:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:17","trueExpression":{"hexValue":"30","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2215,"id":2238,"nodeType":"Return","src":"3437:35:17"}]},"documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"2933:210:17","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":2240,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:17","nodeType":"FunctionDefinition","parameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"a","nameLocation":"3173:1:17","nodeType":"VariableDeclaration","scope":2240,"src":"3165:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2208,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2211,"mutability":"mutable","name":"b","nameLocation":"3184:1:17","nodeType":"VariableDeclaration","scope":2240,"src":"3176:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:17"},"returnParameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2240,"src":"3210:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2213,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:17"},"scope":3032,"src":"3148:331:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2365,"nodeType":"Block","src":"3901:4018:17","statements":[{"id":2364,"nodeType":"UncheckedBlock","src":"3911:4002:17","statements":[{"assignments":[2253],"declarations":[{"constant":false,"id":2253,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:17","nodeType":"VariableDeclaration","scope":2364,"src":"4232:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2257,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"4248:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2255,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"4252:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:17"},{"assignments":[2259],"declarations":[{"constant":false,"id":2259,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:17","nodeType":"VariableDeclaration","scope":2364,"src":"4312:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2258,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2260,"nodeType":"VariableDeclarationStatement","src":"4312:13:17"},{"AST":{"nativeSrc":"4392:122:17","nodeType":"YulBlock","src":"4392:122:17","statements":[{"nativeSrc":"4410:30:17","nodeType":"YulVariableDeclaration","src":"4410:30:17","value":{"arguments":[{"name":"x","nativeSrc":"4427:1:17","nodeType":"YulIdentifier","src":"4427:1:17"},{"name":"y","nativeSrc":"4430:1:17","nodeType":"YulIdentifier","src":"4430:1:17"},{"arguments":[{"kind":"number","nativeSrc":"4437:1:17","nodeType":"YulLiteral","src":"4437:1:17","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4433:3:17","nodeType":"YulIdentifier","src":"4433:3:17"},"nativeSrc":"4433:6:17","nodeType":"YulFunctionCall","src":"4433:6:17"}],"functionName":{"name":"mulmod","nativeSrc":"4420:6:17","nodeType":"YulIdentifier","src":"4420:6:17"},"nativeSrc":"4420:20:17","nodeType":"YulFunctionCall","src":"4420:20:17"},"variables":[{"name":"mm","nativeSrc":"4414:2:17","nodeType":"YulTypedName","src":"4414:2:17","type":""}]},{"nativeSrc":"4457:43:17","nodeType":"YulAssignment","src":"4457:43:17","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"4474:2:17","nodeType":"YulIdentifier","src":"4474:2:17"},{"name":"prod0","nativeSrc":"4478:5:17","nodeType":"YulIdentifier","src":"4478:5:17"}],"functionName":{"name":"sub","nativeSrc":"4470:3:17","nodeType":"YulIdentifier","src":"4470:3:17"},"nativeSrc":"4470:14:17","nodeType":"YulFunctionCall","src":"4470:14:17"},{"arguments":[{"name":"mm","nativeSrc":"4489:2:17","nodeType":"YulIdentifier","src":"4489:2:17"},{"name":"prod0","nativeSrc":"4493:5:17","nodeType":"YulIdentifier","src":"4493:5:17"}],"functionName":{"name":"lt","nativeSrc":"4486:2:17","nodeType":"YulIdentifier","src":"4486:2:17"},"nativeSrc":"4486:13:17","nodeType":"YulFunctionCall","src":"4486:13:17"}],"functionName":{"name":"sub","nativeSrc":"4466:3:17","nodeType":"YulIdentifier","src":"4466:3:17"},"nativeSrc":"4466:34:17","nodeType":"YulFunctionCall","src":"4466:34:17"},"variableNames":[{"name":"prod1","nativeSrc":"4457:5:17","nodeType":"YulIdentifier","src":"4457:5:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2253,"isOffset":false,"isSlot":false,"src":"4478:5:17","valueSize":1},{"declaration":2253,"isOffset":false,"isSlot":false,"src":"4493:5:17","valueSize":1},{"declaration":2259,"isOffset":false,"isSlot":false,"src":"4457:5:17","valueSize":1},{"declaration":2243,"isOffset":false,"isSlot":false,"src":"4427:1:17","valueSize":1},{"declaration":2245,"isOffset":false,"isSlot":false,"src":"4430:1:17","valueSize":1}],"id":2261,"nodeType":"InlineAssembly","src":"4383:131:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2262,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"4595:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2270,"nodeType":"IfStatement","src":"4591:368:17","trueBody":{"id":2269,"nodeType":"Block","src":"4607:352:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"4925:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2266,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"4933:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2251,"id":2268,"nodeType":"Return","src":"4918:26:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2271,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"5065:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2272,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"5080:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2278,"nodeType":"IfStatement","src":"5061:88:17","trueBody":{"id":2277,"nodeType":"Block","src":"5087:62:17","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2274,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"5112:20:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2276,"nodeType":"RevertStatement","src":"5105:29:17"}]}},{"assignments":[2280],"declarations":[{"constant":false,"id":2280,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:17","nodeType":"VariableDeclaration","scope":2364,"src":"5404:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2281,"nodeType":"VariableDeclarationStatement","src":"5404:17:17"},{"AST":{"nativeSrc":"5444:291:17","nodeType":"YulBlock","src":"5444:291:17","statements":[{"nativeSrc":"5513:38:17","nodeType":"YulAssignment","src":"5513:38:17","value":{"arguments":[{"name":"x","nativeSrc":"5533:1:17","nodeType":"YulIdentifier","src":"5533:1:17"},{"name":"y","nativeSrc":"5536:1:17","nodeType":"YulIdentifier","src":"5536:1:17"},{"name":"denominator","nativeSrc":"5539:11:17","nodeType":"YulIdentifier","src":"5539:11:17"}],"functionName":{"name":"mulmod","nativeSrc":"5526:6:17","nodeType":"YulIdentifier","src":"5526:6:17"},"nativeSrc":"5526:25:17","nodeType":"YulFunctionCall","src":"5526:25:17"},"variableNames":[{"name":"remainder","nativeSrc":"5513:9:17","nodeType":"YulIdentifier","src":"5513:9:17"}]},{"nativeSrc":"5633:41:17","nodeType":"YulAssignment","src":"5633:41:17","value":{"arguments":[{"name":"prod1","nativeSrc":"5646:5:17","nodeType":"YulIdentifier","src":"5646:5:17"},{"arguments":[{"name":"remainder","nativeSrc":"5656:9:17","nodeType":"YulIdentifier","src":"5656:9:17"},{"name":"prod0","nativeSrc":"5667:5:17","nodeType":"YulIdentifier","src":"5667:5:17"}],"functionName":{"name":"gt","nativeSrc":"5653:2:17","nodeType":"YulIdentifier","src":"5653:2:17"},"nativeSrc":"5653:20:17","nodeType":"YulFunctionCall","src":"5653:20:17"}],"functionName":{"name":"sub","nativeSrc":"5642:3:17","nodeType":"YulIdentifier","src":"5642:3:17"},"nativeSrc":"5642:32:17","nodeType":"YulFunctionCall","src":"5642:32:17"},"variableNames":[{"name":"prod1","nativeSrc":"5633:5:17","nodeType":"YulIdentifier","src":"5633:5:17"}]},{"nativeSrc":"5691:30:17","nodeType":"YulAssignment","src":"5691:30:17","value":{"arguments":[{"name":"prod0","nativeSrc":"5704:5:17","nodeType":"YulIdentifier","src":"5704:5:17"},{"name":"remainder","nativeSrc":"5711:9:17","nodeType":"YulIdentifier","src":"5711:9:17"}],"functionName":{"name":"sub","nativeSrc":"5700:3:17","nodeType":"YulIdentifier","src":"5700:3:17"},"nativeSrc":"5700:21:17","nodeType":"YulFunctionCall","src":"5700:21:17"},"variableNames":[{"name":"prod0","nativeSrc":"5691:5:17","nodeType":"YulIdentifier","src":"5691:5:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2247,"isOffset":false,"isSlot":false,"src":"5539:11:17","valueSize":1},{"declaration":2253,"isOffset":false,"isSlot":false,"src":"5667:5:17","valueSize":1},{"declaration":2253,"isOffset":false,"isSlot":false,"src":"5691:5:17","valueSize":1},{"declaration":2253,"isOffset":false,"isSlot":false,"src":"5704:5:17","valueSize":1},{"declaration":2259,"isOffset":false,"isSlot":false,"src":"5633:5:17","valueSize":1},{"declaration":2259,"isOffset":false,"isSlot":false,"src":"5646:5:17","valueSize":1},{"declaration":2280,"isOffset":false,"isSlot":false,"src":"5513:9:17","valueSize":1},{"declaration":2280,"isOffset":false,"isSlot":false,"src":"5656:9:17","valueSize":1},{"declaration":2280,"isOffset":false,"isSlot":false,"src":"5711:9:17","valueSize":1},{"declaration":2243,"isOffset":false,"isSlot":false,"src":"5533:1:17","valueSize":1},{"declaration":2245,"isOffset":false,"isSlot":false,"src":"5536:1:17","valueSize":1}],"id":2282,"nodeType":"InlineAssembly","src":"5435:300:17"},{"assignments":[2284],"declarations":[{"constant":false,"id":2284,"mutability":"mutable","name":"twos","nameLocation":"5947:4:17","nodeType":"VariableDeclaration","scope":2364,"src":"5939:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2283,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2291,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2285,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"5954:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2287,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"5973:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2289,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:17"},{"AST":{"nativeSrc":"6008:362:17","nodeType":"YulBlock","src":"6008:362:17","statements":[{"nativeSrc":"6073:37:17","nodeType":"YulAssignment","src":"6073:37:17","value":{"arguments":[{"name":"denominator","nativeSrc":"6092:11:17","nodeType":"YulIdentifier","src":"6092:11:17"},{"name":"twos","nativeSrc":"6105:4:17","nodeType":"YulIdentifier","src":"6105:4:17"}],"functionName":{"name":"div","nativeSrc":"6088:3:17","nodeType":"YulIdentifier","src":"6088:3:17"},"nativeSrc":"6088:22:17","nodeType":"YulFunctionCall","src":"6088:22:17"},"variableNames":[{"name":"denominator","nativeSrc":"6073:11:17","nodeType":"YulIdentifier","src":"6073:11:17"}]},{"nativeSrc":"6177:25:17","nodeType":"YulAssignment","src":"6177:25:17","value":{"arguments":[{"name":"prod0","nativeSrc":"6190:5:17","nodeType":"YulIdentifier","src":"6190:5:17"},{"name":"twos","nativeSrc":"6197:4:17","nodeType":"YulIdentifier","src":"6197:4:17"}],"functionName":{"name":"div","nativeSrc":"6186:3:17","nodeType":"YulIdentifier","src":"6186:3:17"},"nativeSrc":"6186:16:17","nodeType":"YulFunctionCall","src":"6186:16:17"},"variableNames":[{"name":"prod0","nativeSrc":"6177:5:17","nodeType":"YulIdentifier","src":"6177:5:17"}]},{"nativeSrc":"6317:39:17","nodeType":"YulAssignment","src":"6317:39:17","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6337:1:17","nodeType":"YulLiteral","src":"6337:1:17","type":"","value":"0"},{"name":"twos","nativeSrc":"6340:4:17","nodeType":"YulIdentifier","src":"6340:4:17"}],"functionName":{"name":"sub","nativeSrc":"6333:3:17","nodeType":"YulIdentifier","src":"6333:3:17"},"nativeSrc":"6333:12:17","nodeType":"YulFunctionCall","src":"6333:12:17"},{"name":"twos","nativeSrc":"6347:4:17","nodeType":"YulIdentifier","src":"6347:4:17"}],"functionName":{"name":"div","nativeSrc":"6329:3:17","nodeType":"YulIdentifier","src":"6329:3:17"},"nativeSrc":"6329:23:17","nodeType":"YulFunctionCall","src":"6329:23:17"},{"kind":"number","nativeSrc":"6354:1:17","nodeType":"YulLiteral","src":"6354:1:17","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6325:3:17","nodeType":"YulIdentifier","src":"6325:3:17"},"nativeSrc":"6325:31:17","nodeType":"YulFunctionCall","src":"6325:31:17"},"variableNames":[{"name":"twos","nativeSrc":"6317:4:17","nodeType":"YulIdentifier","src":"6317:4:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2247,"isOffset":false,"isSlot":false,"src":"6073:11:17","valueSize":1},{"declaration":2247,"isOffset":false,"isSlot":false,"src":"6092:11:17","valueSize":1},{"declaration":2253,"isOffset":false,"isSlot":false,"src":"6177:5:17","valueSize":1},{"declaration":2253,"isOffset":false,"isSlot":false,"src":"6190:5:17","valueSize":1},{"declaration":2284,"isOffset":false,"isSlot":false,"src":"6105:4:17","valueSize":1},{"declaration":2284,"isOffset":false,"isSlot":false,"src":"6197:4:17","valueSize":1},{"declaration":2284,"isOffset":false,"isSlot":false,"src":"6317:4:17","valueSize":1},{"declaration":2284,"isOffset":false,"isSlot":false,"src":"6340:4:17","valueSize":1},{"declaration":2284,"isOffset":false,"isSlot":false,"src":"6347:4:17","valueSize":1}],"id":2292,"nodeType":"InlineAssembly","src":"5999:371:17"},{"expression":{"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2293,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"6436:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2294,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"6445:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2295,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"6453:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2298,"nodeType":"ExpressionStatement","src":"6436:21:17"},{"assignments":[2300],"declarations":[{"constant":false,"id":2300,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:17","nodeType":"VariableDeclaration","scope":2364,"src":"6775:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2299,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2307,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2302,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"6798:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:17"},{"expression":{"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2308,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7031:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2310,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7046:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2311,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7060:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2315,"nodeType":"ExpressionStatement","src":"7031:36:17"},{"expression":{"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2316,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7100:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2318,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7115:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2319,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7129:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2323,"nodeType":"ExpressionStatement","src":"7100:36:17"},{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2324,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7170:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2326,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7185:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2327,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7199:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2331,"nodeType":"ExpressionStatement","src":"7170:36:17"},{"expression":{"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2332,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7240:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7255:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2335,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7269:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"nodeType":"ExpressionStatement","src":"7240:36:17"},{"expression":{"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2340,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7310:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2342,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7325:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2343,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7339:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2347,"nodeType":"ExpressionStatement","src":"7310:36:17"},{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2348,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7381:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2350,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"7396:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2351,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7410:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"7381:36:17"},{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7851:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2357,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"7860:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2358,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"7868:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"7851:24:17"},{"expression":{"id":2362,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"7896:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2251,"id":2363,"nodeType":"Return","src":"7889:13:17"}]}]},"documentation":{"id":2241,"nodeType":"StructuredDocumentation","src":"3485:313:17","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2366,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:17","nodeType":"FunctionDefinition","parameters":{"id":2248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2243,"mutability":"mutable","name":"x","nameLocation":"3827:1:17","nodeType":"VariableDeclaration","scope":2366,"src":"3819:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2242,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2245,"mutability":"mutable","name":"y","nameLocation":"3838:1:17","nodeType":"VariableDeclaration","scope":2366,"src":"3830:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2244,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2247,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:17","nodeType":"VariableDeclaration","scope":2366,"src":"3841:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2246,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:17"},"returnParameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"result","nameLocation":"3893:6:17","nodeType":"VariableDeclaration","scope":2366,"src":"3885:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:17"},"scope":3032,"src":"3803:4116:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2408,"nodeType":"Block","src":"8161:192:17","statements":[{"assignments":[2382],"declarations":[{"constant":false,"id":2382,"mutability":"mutable","name":"result","nameLocation":"8179:6:17","nodeType":"VariableDeclaration","scope":2408,"src":"8171:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2381,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2388,"initialValue":{"arguments":[{"id":2384,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"8195:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2385,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"8198:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2386,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"8201:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2383,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2366,2409],"referencedDeclaration":2366,"src":"8188:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2390,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"8244:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}],"id":2389,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"8227:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1989_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2393,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"8264:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2394,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"8267:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2395,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2373,"src":"8270:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2392,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:17","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2405,"nodeType":"IfStatement","src":"8223:101:17","trueBody":{"id":2404,"nodeType":"Block","src":"8288:36:17","statements":[{"expression":{"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2400,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"8302:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2403,"nodeType":"ExpressionStatement","src":"8302:11:17"}]}},{"expression":{"id":2406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"8340:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2380,"id":2407,"nodeType":"Return","src":"8333:13:17"}]},"documentation":{"id":2367,"nodeType":"StructuredDocumentation","src":"7925:121:17","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2409,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:17","nodeType":"FunctionDefinition","parameters":{"id":2377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2369,"mutability":"mutable","name":"x","nameLocation":"8075:1:17","nodeType":"VariableDeclaration","scope":2409,"src":"8067:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2368,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2371,"mutability":"mutable","name":"y","nameLocation":"8086:1:17","nodeType":"VariableDeclaration","scope":2409,"src":"8078:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2373,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:17","nodeType":"VariableDeclaration","scope":2409,"src":"8089:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2372,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2376,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:17","nodeType":"VariableDeclaration","scope":2409,"src":"8110:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"},"typeName":{"id":2375,"nodeType":"UserDefinedTypeName","pathNode":{"id":2374,"name":"Rounding","nameLocations":["8110:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"8110:8:17"},"referencedDeclaration":1989,"src":"8110:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:17"},"returnParameters":{"id":2380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2409,"src":"8152:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2378,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:17"},"scope":3032,"src":"8051:302:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2520,"nodeType":"Block","src":"8644:1585:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2417,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"8658:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2423,"nodeType":"IfStatement","src":"8654:45:17","trueBody":{"id":2422,"nodeType":"Block","src":"8666:33:17","statements":[{"expression":{"hexValue":"30","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2416,"id":2421,"nodeType":"Return","src":"8680:8:17"}]}},{"assignments":[2425],"declarations":[{"constant":false,"id":2425,"mutability":"mutable","name":"result","nameLocation":"9386:6:17","nodeType":"VariableDeclaration","scope":2520,"src":"9378:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2434,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2428,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"9406:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2427,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2688,2723],"referencedDeclaration":2688,"src":"9401:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2432,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:17"},{"id":2519,"nodeType":"UncheckedBlock","src":"9815:408:17","statements":[{"expression":{"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9839:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9849:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2437,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"9858:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9862:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2441,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2445,"nodeType":"ExpressionStatement","src":"9839:35:17"},{"expression":{"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9888:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9898:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2448,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"9907:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2449,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9911:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2452,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2456,"nodeType":"ExpressionStatement","src":"9888:35:17"},{"expression":{"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9937:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2458,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9947:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2459,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"9956:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2460,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9960:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2463,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2467,"nodeType":"ExpressionStatement","src":"9937:35:17"},{"expression":{"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9986:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"9996:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"10005:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2471,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10009:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2474,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2478,"nodeType":"ExpressionStatement","src":"9986:35:17"},{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10035:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2480,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10045:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2481,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"10054:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2482,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10058:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2485,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"10035:35:17"},{"expression":{"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2490,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10084:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10094:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2492,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"10103:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2493,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10107:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2496,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2500,"nodeType":"ExpressionStatement","src":"10084:35:17"},{"expression":{"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10133:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2502,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10143:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2503,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"10152:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2504,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10156:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2507,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2511,"nodeType":"ExpressionStatement","src":"10133:35:17"},{"expression":{"arguments":[{"id":2513,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10193:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2514,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2412,"src":"10201:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2515,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10205:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2512,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"10189:3:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2416,"id":2518,"nodeType":"Return","src":"10182:30:17"}]}]},"documentation":{"id":2410,"nodeType":"StructuredDocumentation","src":"8359:223:17","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2521,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:17","nodeType":"FunctionDefinition","parameters":{"id":2413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2412,"mutability":"mutable","name":"a","nameLocation":"8609:1:17","nodeType":"VariableDeclaration","scope":2521,"src":"8601:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2411,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:17"},"returnParameters":{"id":2416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2521,"src":"8635:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2414,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:17"},"scope":3032,"src":"8587:1642:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2555,"nodeType":"Block","src":"10405:164:17","statements":[{"id":2554,"nodeType":"UncheckedBlock","src":"10415:148:17","statements":[{"assignments":[2533],"declarations":[{"constant":false,"id":2533,"mutability":"mutable","name":"result","nameLocation":"10447:6:17","nodeType":"VariableDeclaration","scope":2554,"src":"10439:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2537,"initialValue":{"arguments":[{"id":2535,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"10461:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2534,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2521,2556],"referencedDeclaration":2521,"src":"10456:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"10484:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2540,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"10511:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}],"id":2539,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"10494:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1989_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"10524:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2543,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2533,"src":"10533:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"10542:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:17","trueExpression":{"hexValue":"31","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2551,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2531,"id":2553,"nodeType":"Return","src":"10477:75:17"}]}]},"documentation":{"id":2522,"nodeType":"StructuredDocumentation","src":"10235:89:17","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2556,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:17","nodeType":"FunctionDefinition","parameters":{"id":2528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2524,"mutability":"mutable","name":"a","nameLocation":"10351:1:17","nodeType":"VariableDeclaration","scope":2556,"src":"10343:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2523,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:17","nodeType":"VariableDeclaration","scope":2556,"src":"10354:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"},"typeName":{"id":2526,"nodeType":"UserDefinedTypeName","pathNode":{"id":2525,"name":"Rounding","nameLocations":["10354:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"10354:8:17"},"referencedDeclaration":1989,"src":"10354:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:17"},"returnParameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2556,"src":"10396:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2529,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:17"},"scope":3032,"src":"10329:240:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2687,"nodeType":"Block","src":"10760:922:17","statements":[{"assignments":[2565],"declarations":[{"constant":false,"id":2565,"mutability":"mutable","name":"result","nameLocation":"10778:6:17","nodeType":"VariableDeclaration","scope":2687,"src":"10770:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2564,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2567,"initialValue":{"hexValue":"30","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:17"},{"id":2684,"nodeType":"UncheckedBlock","src":"10798:855:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"10826:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2582,"nodeType":"IfStatement","src":"10822:99:17","trueBody":{"id":2581,"nodeType":"Block","src":"10844:77:17","statements":[{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"10862:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"10862:13:17"},{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2577,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"10893:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"10893:13:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"10938:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2597,"nodeType":"IfStatement","src":"10934:96:17","trueBody":{"id":2596,"nodeType":"Block","src":"10955:75:17","statements":[{"expression":{"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"10973:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2591,"nodeType":"ExpressionStatement","src":"10973:12:17"},{"expression":{"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2592,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11003:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2595,"nodeType":"ExpressionStatement","src":"11003:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11047:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2612,"nodeType":"IfStatement","src":"11043:96:17","trueBody":{"id":2611,"nodeType":"Block","src":"11064:75:17","statements":[{"expression":{"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11082:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2606,"nodeType":"ExpressionStatement","src":"11082:12:17"},{"expression":{"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2607,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11112:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2610,"nodeType":"ExpressionStatement","src":"11112:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11156:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2627,"nodeType":"IfStatement","src":"11152:96:17","trueBody":{"id":2626,"nodeType":"Block","src":"11173:75:17","statements":[{"expression":{"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11191:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2621,"nodeType":"ExpressionStatement","src":"11191:12:17"},{"expression":{"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2622,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11221:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2625,"nodeType":"ExpressionStatement","src":"11221:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2628,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11265:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2642,"nodeType":"IfStatement","src":"11261:93:17","trueBody":{"id":2641,"nodeType":"Block","src":"11281:73:17","statements":[{"expression":{"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11299:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2636,"nodeType":"ExpressionStatement","src":"11299:11:17"},{"expression":{"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11328:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2640,"nodeType":"ExpressionStatement","src":"11328:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11371:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2657,"nodeType":"IfStatement","src":"11367:93:17","trueBody":{"id":2656,"nodeType":"Block","src":"11387:73:17","statements":[{"expression":{"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11405:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2651,"nodeType":"ExpressionStatement","src":"11405:11:17"},{"expression":{"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2652,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11434:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2655,"nodeType":"ExpressionStatement","src":"11434:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11477:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2672,"nodeType":"IfStatement","src":"11473:93:17","trueBody":{"id":2671,"nodeType":"Block","src":"11493:73:17","statements":[{"expression":{"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11511:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2666,"nodeType":"ExpressionStatement","src":"11511:11:17"},{"expression":{"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2667,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11540:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2670,"nodeType":"ExpressionStatement","src":"11540:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"11583:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2683,"nodeType":"IfStatement","src":"11579:64:17","trueBody":{"id":2682,"nodeType":"Block","src":"11599:44:17","statements":[{"expression":{"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11617:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2681,"nodeType":"ExpressionStatement","src":"11617:11:17"}]}}]},{"expression":{"id":2685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2565,"src":"11669:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2563,"id":2686,"nodeType":"Return","src":"11662:13:17"}]},"documentation":{"id":2557,"nodeType":"StructuredDocumentation","src":"10575:119:17","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2688,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:17","nodeType":"FunctionDefinition","parameters":{"id":2560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"value","nameLocation":"10721:5:17","nodeType":"VariableDeclaration","scope":2688,"src":"10713:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2558,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:17"},"returnParameters":{"id":2563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2688,"src":"10751:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2561,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:17"},"scope":3032,"src":"10699:983:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2722,"nodeType":"Block","src":"11915:168:17","statements":[{"id":2721,"nodeType":"UncheckedBlock","src":"11925:152:17","statements":[{"assignments":[2700],"declarations":[{"constant":false,"id":2700,"mutability":"mutable","name":"result","nameLocation":"11957:6:17","nodeType":"VariableDeclaration","scope":2721,"src":"11949:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2699,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2704,"initialValue":{"arguments":[{"id":2702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"11971:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2701,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2688,2723],"referencedDeclaration":2688,"src":"11966:4:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"11998:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2707,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"12025:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}],"id":2706,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"12008:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1989_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2710,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"12043:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"12052:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:17","trueExpression":{"hexValue":"31","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2718,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2698,"id":2720,"nodeType":"Return","src":"11991:75:17"}]}]},"documentation":{"id":2689,"nodeType":"StructuredDocumentation","src":"11688:142:17","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2723,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:17","nodeType":"FunctionDefinition","parameters":{"id":2695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2691,"mutability":"mutable","name":"value","nameLocation":"11857:5:17","nodeType":"VariableDeclaration","scope":2723,"src":"11849:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2694,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:17","nodeType":"VariableDeclaration","scope":2723,"src":"11864:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"},"typeName":{"id":2693,"nodeType":"UserDefinedTypeName","pathNode":{"id":2692,"name":"Rounding","nameLocations":["11864:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"11864:8:17"},"referencedDeclaration":1989,"src":"11864:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:17"},"returnParameters":{"id":2698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2723,"src":"11906:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2696,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:17"},"scope":3032,"src":"11835:248:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2851,"nodeType":"Block","src":"12276:854:17","statements":[{"assignments":[2732],"declarations":[{"constant":false,"id":2732,"mutability":"mutable","name":"result","nameLocation":"12294:6:17","nodeType":"VariableDeclaration","scope":2851,"src":"12286:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2734,"initialValue":{"hexValue":"30","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:17"},{"id":2848,"nodeType":"UncheckedBlock","src":"12314:787:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12342:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2751,"nodeType":"IfStatement","src":"12338:103:17","trueBody":{"id":2750,"nodeType":"Block","src":"12361:80:17","statements":[{"expression":{"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2740,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12379:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2745,"nodeType":"ExpressionStatement","src":"12379:17:17"},{"expression":{"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"12414:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2749,"nodeType":"ExpressionStatement","src":"12414:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12458:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2768,"nodeType":"IfStatement","src":"12454:103:17","trueBody":{"id":2767,"nodeType":"Block","src":"12477:80:17","statements":[{"expression":{"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12495:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2762,"nodeType":"ExpressionStatement","src":"12495:17:17"},{"expression":{"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"12530:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2766,"nodeType":"ExpressionStatement","src":"12530:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12574:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2785,"nodeType":"IfStatement","src":"12570:103:17","trueBody":{"id":2784,"nodeType":"Block","src":"12593:80:17","statements":[{"expression":{"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12611:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:17","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ExpressionStatement","src":"12611:17:17"},{"expression":{"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2780,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"12646:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2783,"nodeType":"ExpressionStatement","src":"12646:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12690:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2802,"nodeType":"IfStatement","src":"12686:100:17","trueBody":{"id":2801,"nodeType":"Block","src":"12708:78:17","statements":[{"expression":{"id":2795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12726:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2796,"nodeType":"ExpressionStatement","src":"12726:16:17"},{"expression":{"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2797,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"12760:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2800,"nodeType":"ExpressionStatement","src":"12760:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2803,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12803:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2819,"nodeType":"IfStatement","src":"12799:100:17","trueBody":{"id":2818,"nodeType":"Block","src":"12821:78:17","statements":[{"expression":{"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2808,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12839:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2811,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2813,"nodeType":"ExpressionStatement","src":"12839:16:17"},{"expression":{"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2814,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"12873:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2817,"nodeType":"ExpressionStatement","src":"12873:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2836,"nodeType":"IfStatement","src":"12912:100:17","trueBody":{"id":2835,"nodeType":"Block","src":"12934:78:17","statements":[{"expression":{"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"12952:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:17","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2830,"nodeType":"ExpressionStatement","src":"12952:16:17"},{"expression":{"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2831,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"12986:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2834,"nodeType":"ExpressionStatement","src":"12986:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2837,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"13029:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2847,"nodeType":"IfStatement","src":"13025:66:17","trueBody":{"id":2846,"nodeType":"Block","src":"13047:44:17","statements":[{"expression":{"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2842,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"13065:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2845,"nodeType":"ExpressionStatement","src":"13065:11:17"}]}}]},{"expression":{"id":2849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"13117:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2730,"id":2850,"nodeType":"Return","src":"13110:13:17"}]},"documentation":{"id":2724,"nodeType":"StructuredDocumentation","src":"12089:120:17","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2852,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:17","nodeType":"FunctionDefinition","parameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"value","nameLocation":"12237:5:17","nodeType":"VariableDeclaration","scope":2852,"src":"12229:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:17"},"returnParameters":{"id":2730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2852,"src":"12267:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2728,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:17"},"scope":3032,"src":"12214:916:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2886,"nodeType":"Block","src":"13365:170:17","statements":[{"id":2885,"nodeType":"UncheckedBlock","src":"13375:154:17","statements":[{"assignments":[2864],"declarations":[{"constant":false,"id":2864,"mutability":"mutable","name":"result","nameLocation":"13407:6:17","nodeType":"VariableDeclaration","scope":2885,"src":"13399:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2863,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2868,"initialValue":{"arguments":[{"id":2866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"13422:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2865,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2852,2887],"referencedDeclaration":2852,"src":"13416:5:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2869,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"13449:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2871,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"13476:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}],"id":2870,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"13459:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1989_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2874,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"13495:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2876,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"13504:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:17","trueExpression":{"hexValue":"31","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2882,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2862,"id":2884,"nodeType":"Return","src":"13442:76:17"}]}]},"documentation":{"id":2853,"nodeType":"StructuredDocumentation","src":"13136:143:17","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2887,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:17","nodeType":"FunctionDefinition","parameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"mutability":"mutable","name":"value","nameLocation":"13307:5:17","nodeType":"VariableDeclaration","scope":2887,"src":"13299:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2854,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:17","nodeType":"VariableDeclaration","scope":2887,"src":"13314:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"},"typeName":{"id":2857,"nodeType":"UserDefinedTypeName","pathNode":{"id":2856,"name":"Rounding","nameLocations":["13314:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"13314:8:17"},"referencedDeclaration":1989,"src":"13314:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:17"},"returnParameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2887,"src":"13356:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2860,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:17"},"scope":3032,"src":"13284:251:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2973,"nodeType":"Block","src":"13855:600:17","statements":[{"assignments":[2896],"declarations":[{"constant":false,"id":2896,"mutability":"mutable","name":"result","nameLocation":"13873:6:17","nodeType":"VariableDeclaration","scope":2973,"src":"13865:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2895,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2898,"initialValue":{"hexValue":"30","id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:17"},{"id":2970,"nodeType":"UncheckedBlock","src":"13893:533:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"13921:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2913,"nodeType":"IfStatement","src":"13917:98:17","trueBody":{"id":2912,"nodeType":"Block","src":"13939:76:17","statements":[{"expression":{"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"13957:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:17","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2907,"nodeType":"ExpressionStatement","src":"13957:13:17"},{"expression":{"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"13988:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2911,"nodeType":"ExpressionStatement","src":"13988:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14032:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2928,"nodeType":"IfStatement","src":"14028:95:17","trueBody":{"id":2927,"nodeType":"Block","src":"14049:74:17","statements":[{"expression":{"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14067:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:17","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2922,"nodeType":"ExpressionStatement","src":"14067:12:17"},{"expression":{"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2923,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"14097:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2926,"nodeType":"ExpressionStatement","src":"14097:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2929,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14140:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"nodeType":"IfStatement","src":"14136:95:17","trueBody":{"id":2942,"nodeType":"Block","src":"14157:74:17","statements":[{"expression":{"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2934,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14175:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2937,"nodeType":"ExpressionStatement","src":"14175:12:17"},{"expression":{"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"14205:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2941,"nodeType":"ExpressionStatement","src":"14205:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2944,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14248:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2958,"nodeType":"IfStatement","src":"14244:95:17","trueBody":{"id":2957,"nodeType":"Block","src":"14265:74:17","statements":[{"expression":{"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14283:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:17","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2952,"nodeType":"ExpressionStatement","src":"14283:12:17"},{"expression":{"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2953,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"14313:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2956,"nodeType":"ExpressionStatement","src":"14313:11:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2959,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"14356:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:17","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2969,"nodeType":"IfStatement","src":"14352:64:17","trueBody":{"id":2968,"nodeType":"Block","src":"14372:44:17","statements":[{"expression":{"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2964,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"14390:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2967,"nodeType":"ExpressionStatement","src":"14390:11:17"}]}}]},{"expression":{"id":2971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"14442:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2894,"id":2972,"nodeType":"Return","src":"14435:13:17"}]},"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"13541:246:17","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2974,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:17","nodeType":"FunctionDefinition","parameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"value","nameLocation":"13816:5:17","nodeType":"VariableDeclaration","scope":2974,"src":"13808:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2889,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:17"},"returnParameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2974,"src":"13846:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:17"},"scope":3032,"src":"13792:663:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3011,"nodeType":"Block","src":"14692:177:17","statements":[{"id":3010,"nodeType":"UncheckedBlock","src":"14702:161:17","statements":[{"assignments":[2986],"declarations":[{"constant":false,"id":2986,"mutability":"mutable","name":"result","nameLocation":"14734:6:17","nodeType":"VariableDeclaration","scope":3010,"src":"14726:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2990,"initialValue":{"arguments":[{"id":2988,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"14750:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2987,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2974,3012],"referencedDeclaration":2974,"src":"14743:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:17"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"14777:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2993,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"14804:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}],"id":2992,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"14787:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1989_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2996,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"14823:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2999,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"14838:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:17","trueExpression":{"hexValue":"31","id":3004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3007,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2984,"id":3009,"nodeType":"Return","src":"14770:82:17"}]}]},"documentation":{"id":2975,"nodeType":"StructuredDocumentation","src":"14461:144:17","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3012,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:17","nodeType":"FunctionDefinition","parameters":{"id":2981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"value","nameLocation":"14634:5:17","nodeType":"VariableDeclaration","scope":3012,"src":"14626:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2980,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:17","nodeType":"VariableDeclaration","scope":3012,"src":"14641:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"},"typeName":{"id":2979,"nodeType":"UserDefinedTypeName","pathNode":{"id":2978,"name":"Rounding","nameLocations":["14641:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"14641:8:17"},"referencedDeclaration":1989,"src":"14641:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:17"},"returnParameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2983,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3012,"src":"14683:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:17"},"scope":3032,"src":"14610:259:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3030,"nodeType":"Block","src":"15067:48:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3023,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"15090:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}],"id":3022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3021,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:17","typeDescriptions":{}}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":3025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3020,"id":3029,"nodeType":"Return","src":"15077:31:17"}]},"documentation":{"id":3013,"nodeType":"StructuredDocumentation","src":"14875:113:17","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":3031,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:17","nodeType":"FunctionDefinition","parameters":{"id":3017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:17","nodeType":"VariableDeclaration","scope":3031,"src":"15019:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"},"typeName":{"id":3015,"nodeType":"UserDefinedTypeName","pathNode":{"id":3014,"name":"Rounding","nameLocations":["15019:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"15019:8:17"},"referencedDeclaration":1989,"src":"15019:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1989","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:17"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3031,"src":"15061:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3018,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:17"},"scope":3032,"src":"14993:122:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3033,"src":"203:14914:17","usedErrors":[1984],"usedEvents":[]}],"src":"103:15015:17"},"id":17},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3137]},"id":3138,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3034,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"135:80:18","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3137,"linearizedBaseContracts":[3137],"name":"SignedMath","nameLocation":"224:10:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3052,"nodeType":"Block","src":"376:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3045,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"393:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3046,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"397:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3049,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"405:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:18","trueExpression":{"id":3048,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"401:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3044,"id":3051,"nodeType":"Return","src":"386:20:18"}]},"documentation":{"id":3036,"nodeType":"StructuredDocumentation","src":"241:66:18","text":" @dev Returns the largest of two signed numbers."},"id":3053,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:18","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3038,"mutability":"mutable","name":"a","nameLocation":"332:1:18","nodeType":"VariableDeclaration","scope":3053,"src":"325:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3037,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3040,"mutability":"mutable","name":"b","nameLocation":"342:1:18","nodeType":"VariableDeclaration","scope":3053,"src":"335:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3039,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:18"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3053,"src":"368:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3042,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:18"},"scope":3137,"src":"312:101:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3070,"nodeType":"Block","src":"555:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3063,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"572:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3064,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"576:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3067,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"584:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:18","trueExpression":{"id":3066,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"580:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3062,"id":3069,"nodeType":"Return","src":"565:20:18"}]},"documentation":{"id":3054,"nodeType":"StructuredDocumentation","src":"419:67:18","text":" @dev Returns the smallest of two signed numbers."},"id":3071,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:18","nodeType":"FunctionDefinition","parameters":{"id":3059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"a","nameLocation":"511:1:18","nodeType":"VariableDeclaration","scope":3071,"src":"504:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3055,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3058,"mutability":"mutable","name":"b","nameLocation":"521:1:18","nodeType":"VariableDeclaration","scope":3071,"src":"514:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3057,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:18"},"returnParameters":{"id":3062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3071,"src":"547:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3060,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:18"},"scope":3137,"src":"491:101:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3114,"nodeType":"Block","src":"797:162:18","statements":[{"assignments":[3082],"declarations":[{"constant":false,"id":3082,"mutability":"mutable","name":"x","nameLocation":"866:1:18","nodeType":"VariableDeclaration","scope":3114,"src":"859:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3081,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3095,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3083,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"871:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3084,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"875:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3086,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"882:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3088,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"886:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3093,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:18"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3096,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"911:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3101,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"931:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3099,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:18","typeDescriptions":{}}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:18","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3097,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:18","typeDescriptions":{}}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3106,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"945:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3107,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"949:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3109,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3080,"id":3113,"nodeType":"Return","src":"904:48:18"}]},"documentation":{"id":3072,"nodeType":"StructuredDocumentation","src":"598:126:18","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3115,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:18","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3074,"mutability":"mutable","name":"a","nameLocation":"753:1:18","nodeType":"VariableDeclaration","scope":3115,"src":"746:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3073,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"b","nameLocation":"763:1:18","nodeType":"VariableDeclaration","scope":3115,"src":"756:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3075,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:18"},"returnParameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3115,"src":"789:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3078,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:18"},"scope":3137,"src":"729:230:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3135,"nodeType":"Block","src":"1103:158:18","statements":[{"id":3134,"nodeType":"UncheckedBlock","src":"1113:142:18","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3125,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1228:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:18","subExpression":{"id":3129,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1242:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:18","trueExpression":{"id":3128,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1237:1:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:18","typeDescriptions":{}}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3122,"id":3133,"nodeType":"Return","src":"1213:31:18"}]}]},"documentation":{"id":3116,"nodeType":"StructuredDocumentation","src":"965:78:18","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3136,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:18","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3118,"mutability":"mutable","name":"n","nameLocation":"1068:1:18","nodeType":"VariableDeclaration","scope":3136,"src":"1061:8:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3117,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:18"},"returnParameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3136,"src":"1094:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:18"},"scope":3137,"src":"1048:213:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3138,"src":"216:1047:18","usedErrors":[],"usedEvents":[]}],"src":"109:1155:18"},"id":18},"contracts/Payfluence.sol":{"ast":{"absolutePath":"contracts/Payfluence.sol","exportedSymbols":{"ECDSA":[1665],"EIP712":[1892],"IERC1155":[381],"IERC1155Receiver":[423],"IERC165":[1978],"IERC20":[501],"IERC5267":[258],"IERC721":[618],"IERC721Receiver":[636],"MessageHashUtils":[1966],"Ownable":[147],"Ownable2Step":[233],"Payfluence":[3561],"ReentrancyGuard":[735],"ShortString":[741],"ShortStrings":[952],"TokenReceiver":[4396]},"id":3562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3139,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@openzeppelin/contracts/access/Ownable2Step.sol","file":"@openzeppelin/contracts/access/Ownable2Step.sol","id":3140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3562,"sourceUnit":234,"src":"58:57:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","id":3141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3562,"sourceUnit":1893,"src":"116:63:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":3142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3562,"sourceUnit":1666,"src":"180:62:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":3143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3562,"sourceUnit":736,"src":"243:59:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/TokenReceiver.sol","file":"./TokenReceiver.sol","id":3144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3562,"sourceUnit":4397,"src":"303:29:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3145,"name":"Ownable2Step","nameLocations":["359:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":233,"src":"359:12:19"},"id":3146,"nodeType":"InheritanceSpecifier","src":"359:12:19"},{"baseName":{"id":3147,"name":"ReentrancyGuard","nameLocations":["375:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":735,"src":"375:15:19"},"id":3148,"nodeType":"InheritanceSpecifier","src":"375:15:19"},{"baseName":{"id":3149,"name":"EIP712","nameLocations":["394:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1892,"src":"394:6:19"},"id":3150,"nodeType":"InheritanceSpecifier","src":"394:6:19"},{"baseName":{"id":3151,"name":"TokenReceiver","nameLocations":["404:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":4396,"src":"404:13:19"},"id":3152,"nodeType":"InheritanceSpecifier","src":"404:13:19"}],"canonicalName":"Payfluence","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3561,"linearizedBaseContracts":[3561,4396,423,1978,636,1892,258,735,233,147,666],"name":"Payfluence","nameLocation":"343:10:19","nodeType":"ContractDefinition","nodes":[{"errorSelector":"815e1d64","id":3154,"name":"InvalidSigner","nameLocation":"428:13:19","nodeType":"ErrorDefinition","parameters":{"id":3153,"nodeType":"ParameterList","parameters":[],"src":"441:2:19"},"src":"422:22:19"},{"errorSelector":"e4ca4c0b","id":3156,"name":"AirdropAlreadyClaimed","nameLocation":"453:21:19","nodeType":"ErrorDefinition","parameters":{"id":3155,"nodeType":"ParameterList","parameters":[],"src":"474:2:19"},"src":"447:30:19"},{"errorSelector":"90b8ec18","id":3158,"name":"TransferFailed","nameLocation":"486:14:19","nodeType":"ErrorDefinition","parameters":{"id":3157,"nodeType":"ParameterList","parameters":[],"src":"500:2:19"},"src":"480:23:19"},{"errorSelector":"08062d74","id":3160,"name":"OnlyAirdropOwner","nameLocation":"512:16:19","nodeType":"ErrorDefinition","parameters":{"id":3159,"nodeType":"ParameterList","parameters":[],"src":"528:2:19"},"src":"506:25:19"},{"errorSelector":"cdf1f8f9","id":3162,"name":"OnlyTokenOwner","nameLocation":"540:14:19","nodeType":"ErrorDefinition","parameters":{"id":3161,"nodeType":"ParameterList","parameters":[],"src":"554:2:19"},"src":"534:23:19"},{"constant":false,"id":3164,"mutability":"mutable","name":"adminAddress","nameLocation":"577:12:19","nodeType":"VariableDeclaration","scope":3561,"src":"561:28:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3163,"name":"address","nodeType":"ElementaryTypeName","src":"561:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"functionSelector":"ea13689f","id":3168,"mutability":"mutable","name":"airdropOwners","nameLocation":"644:13:19","nodeType":"VariableDeclaration","scope":3561,"src":"594:63:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string => address)"},"typeName":{"id":3167,"keyName":"airdropId","keyNameLocation":"609:9:19","keyType":{"id":3165,"name":"string","nodeType":"ElementaryTypeName","src":"602:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"594:42:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string => address)"},"valueName":"owner","valueNameLocation":"630:5:19","valueType":{"id":3166,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"eb47e011","id":3174,"mutability":"mutable","name":"airdropClaimedAmounts","nameLocation":"749:21:19","nodeType":"VariableDeclaration","scope":3561,"src":"661:109:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(string => mapping(address => uint256))"},"typeName":{"id":3173,"keyName":"airdropId","keyNameLocation":"676:9:19","keyType":{"id":3169,"name":"string","nodeType":"ElementaryTypeName","src":"669:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"661:80:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(string => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3172,"keyName":"recipient","keyNameLocation":"705:9:19","keyType":{"id":3170,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"689:51:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"amountClaimed","valueNameLocation":"726:13:19","valueType":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"canonicalName":"Payfluence.AirdropMessage","id":3185,"members":[{"constant":false,"id":3176,"mutability":"mutable","name":"airdropId","nameLocation":"810:9:19","nodeType":"VariableDeclaration","scope":3185,"src":"803:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3175,"name":"string","nodeType":"ElementaryTypeName","src":"803:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3178,"mutability":"mutable","name":"token","nameLocation":"833:5:19","nodeType":"VariableDeclaration","scope":3185,"src":"825:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3177,"name":"address","nodeType":"ElementaryTypeName","src":"825:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"owner","nameLocation":"852:5:19","nodeType":"VariableDeclaration","scope":3185,"src":"844:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3179,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3182,"mutability":"mutable","name":"recipient","nameLocation":"871:9:19","nodeType":"VariableDeclaration","scope":3185,"src":"863:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3181,"name":"address","nodeType":"ElementaryTypeName","src":"863:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3184,"mutability":"mutable","name":"amountClaimable","nameLocation":"894:15:19","nodeType":"VariableDeclaration","scope":3185,"src":"886:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3183,"name":"uint256","nodeType":"ElementaryTypeName","src":"886:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AirdropMessage","nameLocation":"782:14:19","nodeType":"StructDefinition","scope":3561,"src":"775:169:19","visibility":"public"},{"constant":true,"id":3190,"mutability":"constant","name":"AIRDROP_MESSAGE_TYPE","nameLocation":"975:20:19","nodeType":"VariableDeclaration","scope":3561,"src":"950:163:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"950:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41697264726f704d65737361676528737472696e672061697264726f7049642c6164647265737320746f6b656e2c61646472657373206f776e65722c6164647265737320726563697069656e742c75696e7432353620616d6f756e74436c61696d61626c6529","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1008:104:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_a3b140137dde1ec8f85da0fadac4c5d6c5410186ca811cbe1e3d5fb737dfb2f6","typeString":"literal_string \"AirdropMessage(string airdropId,address token,address owner,address recipient,uint256 amountClaimable)\""},"value":"AirdropMessage(string airdropId,address token,address owner,address recipient,uint256 amountClaimable)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a3b140137dde1ec8f85da0fadac4c5d6c5410186ca811cbe1e3d5fb737dfb2f6","typeString":"literal_string \"AirdropMessage(string airdropId,address token,address owner,address recipient,uint256 amountClaimable)\""}],"id":3187,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"998:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"998:115:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":3215,"nodeType":"Block","src":"1169:143:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3194,"name":"airdropOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"1179:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string memory => address)"}},"id":3196,"indexExpression":{"id":3195,"name":"airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"1193:9:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1179:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1215:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1207:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3197,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:19","typeDescriptions":{}}},"id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1207:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1179:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3202,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1221:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1225:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1221:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"id":3204,"name":"airdropOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"1235:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string memory => address)"}},"id":3206,"indexExpression":{"id":3205,"name":"airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"1249:9:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1235:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1221:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1179:80:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3213,"nodeType":"IfStatement","src":"1175:126:19","trueBody":{"id":3212,"nodeType":"Block","src":"1261:40:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3209,"name":"OnlyAirdropOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"1276:16:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1276:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3211,"nodeType":"RevertStatement","src":"1269:25:19"}]}},{"id":3214,"nodeType":"PlaceholderStatement","src":"1306:1:19"}]},"id":3216,"name":"onlyAirdropOwner","nameLocation":"1127:16:19","nodeType":"ModifierDefinition","parameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3192,"mutability":"mutable","name":"airdropId","nameLocation":"1158:9:19","nodeType":"VariableDeclaration","scope":3216,"src":"1144:23:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3191,"name":"string","nodeType":"ElementaryTypeName","src":"1144:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1143:25:19"},"src":"1118:194:19","virtual":false,"visibility":"internal"},{"body":{"id":3230,"nodeType":"Block","src":"1355:80:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3220,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1365:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1369:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1365:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3222,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"1379:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1365:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3228,"nodeType":"IfStatement","src":"1361:63:19","trueBody":{"id":3227,"nodeType":"Block","src":"1386:38:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3224,"name":"OnlyTokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"1401:14:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1401:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3226,"nodeType":"RevertStatement","src":"1394:23:19"}]}},{"id":3229,"nodeType":"PlaceholderStatement","src":"1429:1:19"}]},"id":3231,"name":"onlyTokenOwner","nameLocation":"1325:14:19","nodeType":"ModifierDefinition","parameters":{"id":3219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3218,"mutability":"mutable","name":"owner","nameLocation":"1348:5:19","nodeType":"VariableDeclaration","scope":3231,"src":"1340:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3217,"name":"address","nodeType":"ElementaryTypeName","src":"1340:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1339:15:19"},"src":"1316:119:19","virtual":false,"visibility":"internal"},{"body":{"id":3248,"nodeType":"Block","src":"1530:39:19","statements":[{"expression":{"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3244,"name":"adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"1536:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3245,"name":"_adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"1551:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1536:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3247,"nodeType":"ExpressionStatement","src":"1536:28:19"}]},"id":3249,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":3236,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1486:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1490:6:19","memberName":"sender","nodeType":"MemberAccess","src":"1486:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3238,"kind":"baseConstructorSpecifier","modifierName":{"id":3235,"name":"Ownable","nameLocations":["1478:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"1478:7:19"},"nodeType":"ModifierInvocation","src":"1478:19:19"},{"arguments":[{"hexValue":"506179666c75656e6365","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1509:12:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_bb460d886e48dc734498b1a63005faf0b6f7bf44466562e1b79fbdc5870d5744","typeString":"literal_string \"Payfluence\""},"value":"Payfluence"},{"hexValue":"31","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1523:3:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"id":3242,"kind":"baseConstructorSpecifier","modifierName":{"id":3239,"name":"EIP712","nameLocations":["1502:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1892,"src":"1502:6:19"},"nodeType":"ModifierInvocation","src":"1502:25:19"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"_adminAddress","nameLocation":"1459:13:19","nodeType":"VariableDeclaration","scope":3249,"src":"1451:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3232,"name":"address","nodeType":"ElementaryTypeName","src":"1451:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1450:23:19"},"returnParameters":{"id":3243,"nodeType":"ParameterList","parameters":[],"src":"1530:0:19"},"scope":3561,"src":"1439:130:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3260,"nodeType":"Block","src":"1638:39:19","statements":[{"expression":{"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3256,"name":"adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"1644:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3257,"name":"_adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"1659:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1644:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3259,"nodeType":"ExpressionStatement","src":"1644:28:19"}]},"functionSelector":"2c1e816d","id":3261,"implemented":true,"kind":"function","modifiers":[{"id":3254,"kind":"modifierInvocation","modifierName":{"id":3253,"name":"onlyOwner","nameLocations":["1628:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1628:9:19"},"nodeType":"ModifierInvocation","src":"1628:9:19"}],"name":"setAdminAddress","nameLocation":"1582:15:19","nodeType":"FunctionDefinition","parameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"_adminAddress","nameLocation":"1606:13:19","nodeType":"VariableDeclaration","scope":3261,"src":"1598:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3250,"name":"address","nodeType":"ElementaryTypeName","src":"1598:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1597:23:19"},"returnParameters":{"id":3255,"nodeType":"ParameterList","parameters":[],"src":"1638:0:19"},"scope":3561,"src":"1573:104:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3269,"nodeType":"Block","src":"1736:31:19","statements":[{"expression":{"expression":{"id":3266,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1749:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1755:7:19","memberName":"chainid","nodeType":"MemberAccess","src":"1749:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3265,"id":3268,"nodeType":"Return","src":"1742:20:19"}]},"functionSelector":"3408e470","id":3270,"implemented":true,"kind":"function","modifiers":[],"name":"getChainId","nameLocation":"1691:10:19","nodeType":"FunctionDefinition","parameters":{"id":3262,"nodeType":"ParameterList","parameters":[],"src":"1701:2:19"},"returnParameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3270,"src":"1727:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1727:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1726:9:19"},"scope":3561,"src":"1682:85:19","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3320,"nodeType":"Block","src":"1890:426:19","statements":[{"assignments":[3279],"declarations":[{"constant":false,"id":3279,"mutability":"mutable","name":"digest","nameLocation":"1904:6:19","nodeType":"VariableDeclaration","scope":3320,"src":"1896:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1896:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3303,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":3284,"name":"AIRDROP_MESSAGE_TYPE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"1958:20:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"expression":{"id":3288,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2002:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2017:9:19","memberName":"airdropId","nodeType":"MemberAccess","referencedDeclaration":3176,"src":"2002:24:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1996:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3286,"name":"bytes","nodeType":"ElementaryTypeName","src":"1996:5:19","typeDescriptions":{}}},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1996:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3285,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1986:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1986:42:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3292,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2036:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2051:5:19","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3178,"src":"2036:20:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3294,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2064:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:5:19","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"2064:20:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3296,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2092:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3297,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2107:9:19","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"2092:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3298,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"2124:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3299,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2139:15:19","memberName":"amountClaimable","nodeType":"MemberAccess","referencedDeclaration":3184,"src":"2124:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3282,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1940:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1944:6:19","memberName":"encode","nodeType":"MemberAccess","src":"1940:10:19","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:220:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3281,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1930:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1930:231:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3280,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"1913:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1913:249:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1896:266:19"},{"assignments":[3305],"declarations":[{"constant":false,"id":3305,"mutability":"mutable","name":"recoveredSigner","nameLocation":"2181:15:19","nodeType":"VariableDeclaration","scope":3320,"src":"2173:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3304,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3311,"initialValue":{"arguments":[{"id":3308,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"2213:6:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3309,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2221:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3306,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"2199:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$1665_$","typeString":"type(library ECDSA)"}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2205:7:19","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"2199:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2199:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2173:58:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3312,"name":"recoveredSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3305,"src":"2242:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3313,"name":"adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"2261:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2242:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3319,"nodeType":"IfStatement","src":"2238:74:19","trueBody":{"id":3318,"nodeType":"Block","src":"2275:37:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3315,"name":"InvalidSigner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2290:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3317,"nodeType":"RevertStatement","src":"2283:22:19"}]}}]},"id":3321,"implemented":true,"kind":"function","modifiers":[],"name":"_verify","nameLocation":"1794:7:19","nodeType":"FunctionDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3272,"mutability":"mutable","name":"signature","nameLocation":"1820:9:19","nodeType":"VariableDeclaration","scope":3321,"src":"1807:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3271,"name":"bytes","nodeType":"ElementaryTypeName","src":"1807:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3275,"mutability":"mutable","name":"airdropMessage","nameLocation":"1857:14:19","nodeType":"VariableDeclaration","scope":3321,"src":"1835:36:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage"},"typeName":{"id":3274,"nodeType":"UserDefinedTypeName","pathNode":{"id":3273,"name":"AirdropMessage","nameLocations":["1835:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3185,"src":"1835:14:19"},"referencedDeclaration":3185,"src":"1835:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_storage_ptr","typeString":"struct Payfluence.AirdropMessage"}},"visibility":"internal"}],"src":"1801:74:19"},"returnParameters":{"id":3277,"nodeType":"ParameterList","parameters":[],"src":"1890:0:19"},"scope":3561,"src":"1785:531:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3338,"nodeType":"Block","src":"2441:63:19","statements":[{"expression":{"arguments":[{"id":3332,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"2455:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3333,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"2466:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}],"id":3331,"name":"_verify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3321,"src":"2447:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_struct$_AirdropMessage_$3185_memory_ptr_$returns$__$","typeString":"function (bytes memory,struct Payfluence.AirdropMessage memory) view"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2447:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3335,"nodeType":"ExpressionStatement","src":"2447:34:19"},{"expression":{"hexValue":"74727565","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2495:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3330,"id":3337,"nodeType":"Return","src":"2488:11:19"}]},"functionSelector":"1090bafa","id":3339,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"2329:6:19","nodeType":"FunctionDefinition","parameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"signature","nameLocation":"2356:9:19","nodeType":"VariableDeclaration","scope":3339,"src":"2343:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3322,"name":"bytes","nodeType":"ElementaryTypeName","src":"2343:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3326,"mutability":"mutable","name":"airdropMessage","nameLocation":"2395:14:19","nodeType":"VariableDeclaration","scope":3339,"src":"2373:36:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage"},"typeName":{"id":3325,"nodeType":"UserDefinedTypeName","pathNode":{"id":3324,"name":"AirdropMessage","nameLocations":["2373:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3185,"src":"2373:14:19"},"referencedDeclaration":3185,"src":"2373:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_storage_ptr","typeString":"struct Payfluence.AirdropMessage"}},"visibility":"internal"}],"src":"2335:78:19"},"returnParameters":{"id":3330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3339,"src":"2435:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3328,"name":"bool","nodeType":"ElementaryTypeName","src":"2435:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2434:6:19"},"scope":3561,"src":"2320:184:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3391,"nodeType":"Block","src":"2624:449:19","statements":[{"expression":{"arguments":[{"id":3350,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"2638:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3351,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2649:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}],"id":3349,"name":"_verify","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3321,"src":"2630:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_struct$_AirdropMessage_$3185_memory_ptr_$returns$__$","typeString":"function (bytes memory,struct Payfluence.AirdropMessage memory) view"}},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3353,"nodeType":"ExpressionStatement","src":"2630:34:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":3354,"name":"airdropClaimedAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"2675:21:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(string memory => mapping(address => uint256))"}},"id":3357,"indexExpression":{"expression":{"id":3355,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2697:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2712:9:19","memberName":"airdropId","nodeType":"MemberAccess","referencedDeclaration":3176,"src":"2697:24:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2675:47:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3360,"indexExpression":{"expression":{"id":3358,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2723:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2738:9:19","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"2723:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2675:73:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":3361,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2752:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2767:15:19","memberName":"amountClaimable","nodeType":"MemberAccess","referencedDeclaration":3184,"src":"2752:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2675:107:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3368,"nodeType":"IfStatement","src":"2671:158:19","trueBody":{"id":3367,"nodeType":"Block","src":"2784:45:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3364,"name":"AirdropAlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2799:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3366,"nodeType":"RevertStatement","src":"2792:30:19"}]}},{"expression":{"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3369,"name":"airdropClaimedAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"2835:21:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(string memory => mapping(address => uint256))"}},"id":3374,"indexExpression":{"expression":{"id":3370,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2857:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2872:9:19","memberName":"airdropId","nodeType":"MemberAccess","referencedDeclaration":3176,"src":"2857:24:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2835:47:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3375,"indexExpression":{"expression":{"id":3372,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2883:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2898:9:19","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"2883:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2835:73:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3376,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2911:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2926:15:19","memberName":"amountClaimable","nodeType":"MemberAccess","referencedDeclaration":3184,"src":"2911:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2835:106:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3379,"nodeType":"ExpressionStatement","src":"2835:106:19"},{"expression":{"arguments":[{"expression":{"id":3381,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2963:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3382,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2978:9:19","memberName":"airdropId","nodeType":"MemberAccess","referencedDeclaration":3176,"src":"2963:24:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3383,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"2989:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3004:9:19","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":3182,"src":"2989:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3385,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"3015:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3030:5:19","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3178,"src":"3015:20:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3387,"name":"airdropMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"3037:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage memory"}},"id":3388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3052:15:19","memberName":"amountClaimable","nodeType":"MemberAccess","referencedDeclaration":3184,"src":"3037:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3380,"name":"_transferERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"2948:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2948:120:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3390,"nodeType":"ExpressionStatement","src":"2948:120:19"}]},"functionSelector":"80c4020c","id":3392,"implemented":true,"kind":"function","modifiers":[{"id":3347,"kind":"modifierInvocation","modifierName":{"id":3346,"name":"nonReentrant","nameLocations":["2611:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"2611:12:19"},"nodeType":"ModifierInvocation","src":"2611:12:19"}],"name":"claimAirdrop","nameLocation":"2517:12:19","nodeType":"FunctionDefinition","parameters":{"id":3345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3341,"mutability":"mutable","name":"signature","nameLocation":"2548:9:19","nodeType":"VariableDeclaration","scope":3392,"src":"2535:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3340,"name":"bytes","nodeType":"ElementaryTypeName","src":"2535:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3344,"mutability":"mutable","name":"airdropMessage","nameLocation":"2585:14:19","nodeType":"VariableDeclaration","scope":3392,"src":"2563:36:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_memory_ptr","typeString":"struct Payfluence.AirdropMessage"},"typeName":{"id":3343,"nodeType":"UserDefinedTypeName","pathNode":{"id":3342,"name":"AirdropMessage","nameLocations":["2563:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3185,"src":"2563:14:19"},"referencedDeclaration":3185,"src":"2563:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_AirdropMessage_$3185_storage_ptr","typeString":"struct Payfluence.AirdropMessage"}},"visibility":"internal"}],"src":"2529:74:19"},"returnParameters":{"id":3348,"nodeType":"ParameterList","parameters":[],"src":"2624:0:19"},"scope":3561,"src":"2508:565:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3395,"nodeType":"Block","src":"3130:26:19","statements":[]},"functionSelector":"c9c61eab","id":3396,"implemented":true,"kind":"function","modifiers":[],"name":"fundNative","nameLocation":"3102:10:19","nodeType":"FunctionDefinition","parameters":{"id":3393,"nodeType":"ParameterList","parameters":[],"src":"3112:2:19"},"returnParameters":{"id":3394,"nodeType":"ParameterList","parameters":[],"src":"3130:0:19"},"scope":3561,"src":"3093:63:19","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3412,"nodeType":"Block","src":"3243:52:19","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":3405,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"3258:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3407,"indexExpression":{"id":3406,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"3274:2:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3258:19:19","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3278:5:19","memberName":"erc20","nodeType":"MemberAccess","referencedDeclaration":3587,"src":"3258:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3410,"indexExpression":{"id":3409,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"3284:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3258:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3404,"id":3411,"nodeType":"Return","src":"3251:39:19"}]},"functionSelector":"89f4b317","id":3413,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"3169:10:19","nodeType":"FunctionDefinition","parameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3398,"mutability":"mutable","name":"id","nameLocation":"3194:2:19","nodeType":"VariableDeclaration","scope":3413,"src":"3180:16:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3397,"name":"string","nodeType":"ElementaryTypeName","src":"3180:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3400,"mutability":"mutable","name":"token","nameLocation":"3206:5:19","nodeType":"VariableDeclaration","scope":3413,"src":"3198:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3399,"name":"address","nodeType":"ElementaryTypeName","src":"3198:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3179:33:19"},"returnParameters":{"id":3404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3413,"src":"3234:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"3234:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3233:9:19"},"scope":3561,"src":"3160:135:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3467,"nodeType":"Block","src":"3485:266:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3432,"name":"airdropOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"3538:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string memory => address)"}},"id":3434,"indexExpression":{"id":3433,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"3552:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3538:25:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3575:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3567:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3435,"name":"address","nodeType":"ElementaryTypeName","src":"3567:7:19","typeDescriptions":{}}},"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3567:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3538:39:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3447,"nodeType":"IfStatement","src":"3534:94:19","trueBody":{"id":3446,"nodeType":"Block","src":"3579:49:19","statements":[{"expression":{"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3440,"name":"airdropOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"3587:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string memory => address)"}},"id":3442,"indexExpression":{"id":3441,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"3601:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3587:25:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3443,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"3615:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3587:34:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3445,"nodeType":"ExpressionStatement","src":"3587:34:19"}]}},{"expression":{"arguments":[{"id":3452,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"3662:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3455,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3678:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Payfluence_$3561","typeString":"contract Payfluence"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Payfluence_$3561","typeString":"contract Payfluence"}],"id":3454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3670:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3453,"name":"address","nodeType":"ElementaryTypeName","src":"3670:7:19","typeDescriptions":{}}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3670:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3457,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"3685:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3449,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"3641:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3448,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"3634:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$501_$","typeString":"type(contract IERC20)"}},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$501","typeString":"contract IERC20"}},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3649:12:19","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":500,"src":"3634:27:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:59:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3459,"nodeType":"ExpressionStatement","src":"3634:59:19"},{"expression":{"arguments":[{"id":3461,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"3710:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3462,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"3722:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3463,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"3730:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3464,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3421,"src":"3738:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3460,"name":"_fundERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"3699:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256)"}},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3699:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3466,"nodeType":"ExpressionStatement","src":"3699:47:19"}]},"functionSelector":"c4385d76","id":3468,"implemented":true,"kind":"function","modifiers":[{"id":3424,"kind":"modifierInvocation","modifierName":{"id":3423,"name":"nonReentrant","nameLocations":["3420:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"3420:12:19"},"nodeType":"ModifierInvocation","src":"3420:12:19"},{"arguments":[{"id":3426,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3415,"src":"3450:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3427,"kind":"modifierInvocation","modifierName":{"id":3425,"name":"onlyAirdropOwner","nameLocations":["3433:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":3216,"src":"3433:16:19"},"nodeType":"ModifierInvocation","src":"3433:28:19"},{"arguments":[{"id":3429,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3417,"src":"3477:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3430,"kind":"modifierInvocation","modifierName":{"id":3428,"name":"onlyTokenOwner","nameLocations":["3462:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3231,"src":"3462:14:19"},"nodeType":"ModifierInvocation","src":"3462:22:19"}],"name":"fundERC20","nameLocation":"3308:9:19","nodeType":"FunctionDefinition","parameters":{"id":3422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3415,"mutability":"mutable","name":"_airdropId","nameLocation":"3337:10:19","nodeType":"VariableDeclaration","scope":3468,"src":"3323:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3414,"name":"string","nodeType":"ElementaryTypeName","src":"3323:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3417,"mutability":"mutable","name":"_owner","nameLocation":"3361:6:19","nodeType":"VariableDeclaration","scope":3468,"src":"3353:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3416,"name":"address","nodeType":"ElementaryTypeName","src":"3353:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3419,"mutability":"mutable","name":"_token","nameLocation":"3381:6:19","nodeType":"VariableDeclaration","scope":3468,"src":"3373:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3418,"name":"address","nodeType":"ElementaryTypeName","src":"3373:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3421,"mutability":"mutable","name":"_amount","nameLocation":"3401:7:19","nodeType":"VariableDeclaration","scope":3468,"src":"3393:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3420,"name":"uint256","nodeType":"ElementaryTypeName","src":"3393:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3317:95:19"},"returnParameters":{"id":3431,"nodeType":"ParameterList","parameters":[],"src":"3485:0:19"},"scope":3561,"src":"3299:452:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3491,"nodeType":"Block","src":"3919:59:19","statements":[{"expression":{"arguments":[{"id":3485,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"3940:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3486,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"3952:3:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3487,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3474,"src":"3957:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3488,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"3965:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3484,"name":"_transferERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"3925:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256)"}},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3925:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3490,"nodeType":"ExpressionStatement","src":"3925:48:19"}]},"functionSelector":"4f18868a","id":3492,"implemented":true,"kind":"function","modifiers":[{"id":3479,"kind":"modifierInvocation","modifierName":{"id":3478,"name":"nonReentrant","nameLocations":["3877:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"3877:12:19"},"nodeType":"ModifierInvocation","src":"3877:12:19"},{"arguments":[{"id":3481,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"3907:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3482,"kind":"modifierInvocation","modifierName":{"id":3480,"name":"onlyAirdropOwner","nameLocations":["3890:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":3216,"src":"3890:16:19"},"nodeType":"ModifierInvocation","src":"3890:28:19"}],"name":"withdrawERC20","nameLocation":"3764:13:19","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3470,"mutability":"mutable","name":"_airdropId","nameLocation":"3797:10:19","nodeType":"VariableDeclaration","scope":3492,"src":"3783:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3469,"name":"string","nodeType":"ElementaryTypeName","src":"3783:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3472,"mutability":"mutable","name":"_to","nameLocation":"3821:3:19","nodeType":"VariableDeclaration","scope":3492,"src":"3813:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"3813:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3474,"mutability":"mutable","name":"_token","nameLocation":"3838:6:19","nodeType":"VariableDeclaration","scope":3492,"src":"3830:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3473,"name":"address","nodeType":"ElementaryTypeName","src":"3830:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3476,"mutability":"mutable","name":"_amount","nameLocation":"3858:7:19","nodeType":"VariableDeclaration","scope":3492,"src":"3850:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3475,"name":"uint256","nodeType":"ElementaryTypeName","src":"3850:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3777:92:19"},"returnParameters":{"id":3483,"nodeType":"ParameterList","parameters":[],"src":"3919:0:19"},"scope":3561,"src":"3755:223:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3507,"nodeType":"Block","src":"4095:48:19","statements":[{"expression":{"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3501,"name":"airdropOwners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"4101:13:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_address_$","typeString":"mapping(string memory => address)"}},"id":3503,"indexExpression":{"id":3502,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"4115:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4101:25:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3504,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3496,"src":"4129:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4101:37:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3506,"nodeType":"ExpressionStatement","src":"4101:37:19"}]},"functionSelector":"2394c348","id":3508,"implemented":true,"kind":"function","modifiers":[{"id":3499,"kind":"modifierInvocation","modifierName":{"id":3498,"name":"onlyOwner","nameLocations":["4085:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4085:9:19"},"nodeType":"ModifierInvocation","src":"4085:9:19"}],"name":"adminTransferAirdropOwnership","nameLocation":"4003:29:19","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3494,"mutability":"mutable","name":"_airdropId","nameLocation":"4047:10:19","nodeType":"VariableDeclaration","scope":3508,"src":"4033:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3493,"name":"string","nodeType":"ElementaryTypeName","src":"4033:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3496,"mutability":"mutable","name":"_newOwner","nameLocation":"4067:9:19","nodeType":"VariableDeclaration","scope":3508,"src":"4059:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3495,"name":"address","nodeType":"ElementaryTypeName","src":"4059:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4032:45:19"},"returnParameters":{"id":3500,"nodeType":"ParameterList","parameters":[],"src":"4095:0:19"},"scope":3561,"src":"3994:149:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3538,"nodeType":"Block","src":"4206:145:19","statements":[{"assignments":[3516],"declarations":[{"constant":false,"id":3516,"mutability":"mutable","name":"amount","nameLocation":"4220:6:19","nodeType":"VariableDeclaration","scope":3538,"src":"4212:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3515,"name":"uint256","nodeType":"ElementaryTypeName","src":"4212:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3522,"initialValue":{"expression":{"arguments":[{"id":3519,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4237:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_Payfluence_$3561","typeString":"contract Payfluence"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Payfluence_$3561","typeString":"contract Payfluence"}],"id":3518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4229:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3517,"name":"address","nodeType":"ElementaryTypeName","src":"4229:7:19","typeDescriptions":{}}},"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4229:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4243:7:19","memberName":"balance","nodeType":"MemberAccess","src":"4229:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4212:38:19"},{"assignments":[3524,null],"declarations":[{"constant":false,"id":3524,"mutability":"mutable","name":"success","nameLocation":"4263:7:19","nodeType":"VariableDeclaration","scope":3538,"src":"4258:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3523,"name":"bool","nodeType":"ElementaryTypeName","src":"4258:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3531,"initialValue":{"arguments":[{"hexValue":"","id":3529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4300:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3525,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"4276:3:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4280:4:19","memberName":"call","nodeType":"MemberAccess","src":"4276:8:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3527,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"4292:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4276:23:19","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4257:46:19"},{"condition":{"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4313:8:19","subExpression":{"id":3532,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"4314:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3537,"nodeType":"IfStatement","src":"4309:37:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3534,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"4330:14:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3536,"nodeType":"RevertStatement","src":"4323:23:19"}}]},"functionSelector":"c8b5773d","id":3539,"implemented":true,"kind":"function","modifiers":[{"id":3513,"kind":"modifierInvocation","modifierName":{"id":3512,"name":"onlyOwner","nameLocations":["4196:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4196:9:19"},"nodeType":"ModifierInvocation","src":"4196:9:19"}],"name":"adminWithdrawNative","nameLocation":"4156:19:19","nodeType":"FunctionDefinition","parameters":{"id":3511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"_to","nameLocation":"4184:3:19","nodeType":"VariableDeclaration","scope":3539,"src":"4176:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3509,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4175:13:19"},"returnParameters":{"id":3514,"nodeType":"ParameterList","parameters":[],"src":"4206:0:19"},"scope":3561,"src":"4147:204:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3559,"nodeType":"Block","src":"4492:59:19","statements":[{"expression":{"arguments":[{"id":3553,"name":"_airdropId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"4513:10:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3554,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"4525:3:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3555,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"4530:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3556,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"4538:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3552,"name":"_transferERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4102,"src":"4498:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256)"}},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4498:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3558,"nodeType":"ExpressionStatement","src":"4498:48:19"}]},"functionSelector":"fe1fddaa","id":3560,"implemented":true,"kind":"function","modifiers":[{"id":3550,"kind":"modifierInvocation","modifierName":{"id":3549,"name":"onlyOwner","nameLocations":["4482:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"4482:9:19"},"nodeType":"ModifierInvocation","src":"4482:9:19"}],"name":"adminWithdrawERC20","nameLocation":"4364:18:19","nodeType":"FunctionDefinition","parameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3541,"mutability":"mutable","name":"_to","nameLocation":"4396:3:19","nodeType":"VariableDeclaration","scope":3560,"src":"4388:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3540,"name":"address","nodeType":"ElementaryTypeName","src":"4388:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3543,"mutability":"mutable","name":"_airdropId","nameLocation":"4419:10:19","nodeType":"VariableDeclaration","scope":3560,"src":"4405:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3542,"name":"string","nodeType":"ElementaryTypeName","src":"4405:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"_token","nameLocation":"4443:6:19","nodeType":"VariableDeclaration","scope":3560,"src":"4435:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3544,"name":"address","nodeType":"ElementaryTypeName","src":"4435:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"_amount","nameLocation":"4463:7:19","nodeType":"VariableDeclaration","scope":3560,"src":"4455:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3546,"name":"uint256","nodeType":"ElementaryTypeName","src":"4455:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4382:92:19"},"returnParameters":{"id":3551,"nodeType":"ParameterList","parameters":[],"src":"4492:0:19"},"scope":3561,"src":"4355:196:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":3562,"src":"334:4219:19","usedErrors":[13,18,680,749,751,1328,1333,1338,3154,3156,3158,3160,3162,3670,3675,3679,3687,3700],"usedEvents":[24,162,238,3618,3628,3638,3650,3664]}],"src":"32:4521:19"},"id":19},"contracts/TokenReceiver.sol":{"ast":{"absolutePath":"contracts/TokenReceiver.sol","exportedSymbols":{"IERC1155":[381],"IERC1155Receiver":[423],"IERC165":[1978],"IERC20":[501],"IERC721":[618],"IERC721Receiver":[636],"TokenReceiver":[4396]},"id":4397,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3563,"literals":["solidity","^","0.8",".24"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4397,"sourceUnit":502,"src":"58:56:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":3565,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4397,"sourceUnit":619,"src":"115:58:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","id":3566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4397,"sourceUnit":637,"src":"174:66:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","id":3567,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4397,"sourceUnit":382,"src":"241:60:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","id":3568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4397,"sourceUnit":424,"src":"302:68:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3569,"name":"IERC721Receiver","nameLocations":["402:15:20"],"nodeType":"IdentifierPath","referencedDeclaration":636,"src":"402:15:20"},"id":3570,"nodeType":"InheritanceSpecifier","src":"402:15:20"},{"baseName":{"id":3571,"name":"IERC1155Receiver","nameLocations":["423:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"423:16:20"},"id":3572,"nodeType":"InheritanceSpecifier","src":"423:16:20"}],"canonicalName":"TokenReceiver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4396,"linearizedBaseContracts":[4396,423,1978,636],"name":"TokenReceiver","nameLocation":"381:13:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"TokenReceiver.AssetType","id":3578,"members":[{"id":3573,"name":"NONE","nameLocation":"471:4:20","nodeType":"EnumValue","src":"471:4:20"},{"id":3574,"name":"NATIVE","nameLocation":"485:6:20","nodeType":"EnumValue","src":"485:6:20"},{"id":3575,"name":"ERC20","nameLocation":"501:5:20","nodeType":"EnumValue","src":"501:5:20"},{"id":3576,"name":"ERC721","nameLocation":"516:6:20","nodeType":"EnumValue","src":"516:6:20"},{"id":3577,"name":"ERC1155","nameLocation":"532:7:20","nodeType":"EnumValue","src":"532:7:20"}],"name":"AssetType","nameLocation":"451:9:20","nodeType":"EnumDefinition","src":"446:99:20"},{"constant":false,"id":3581,"mutability":"mutable","name":"totalNativeBalance","nameLocation":"559:18:20","nodeType":"VariableDeclaration","scope":4396,"src":"551:30:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3579,"name":"uint256","nodeType":"ElementaryTypeName","src":"551:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"580:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"canonicalName":"TokenReceiver.AssetBalance","id":3600,"members":[{"constant":false,"id":3583,"mutability":"mutable","name":"native","nameLocation":"626:6:20","nodeType":"VariableDeclaration","scope":3600,"src":"618:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3582,"name":"uint256","nodeType":"ElementaryTypeName","src":"618:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3587,"mutability":"mutable","name":"erc20","nameLocation":"676:5:20","nodeType":"VariableDeclaration","scope":3600,"src":"642:39:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3586,"keyName":"token","keyNameLocation":"658:5:20","keyType":{"id":3584,"name":"address","nodeType":"ElementaryTypeName","src":"650:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"642:33:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3585,"name":"uint256","nodeType":"ElementaryTypeName","src":"667:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":3593,"mutability":"mutable","name":"erc721","nameLocation":"750:6:20","nodeType":"VariableDeclaration","scope":3600,"src":"691:65:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"},"typeName":{"id":3592,"keyName":"token","keyNameLocation":"707:5:20","keyType":{"id":3588,"name":"address","nodeType":"ElementaryTypeName","src":"699:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"691:58:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3591,"keyName":"tokenId","keyNameLocation":"732:7:20","keyType":{"id":3589,"name":"uint256","nodeType":"ElementaryTypeName","src":"724:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"716:32:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3590,"name":"bool","nodeType":"ElementaryTypeName","src":"743:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"},{"constant":false,"id":3599,"mutability":"mutable","name":"erc1155","nameLocation":"828:7:20","nodeType":"VariableDeclaration","scope":3600,"src":"766:69:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":3598,"keyName":"token","keyNameLocation":"782:5:20","keyType":{"id":3594,"name":"address","nodeType":"ElementaryTypeName","src":"774:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"766:61:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3597,"keyName":"tokenId","keyNameLocation":"807:7:20","keyType":{"id":3595,"name":"uint256","nodeType":"ElementaryTypeName","src":"799:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"791:35:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"818:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"}],"name":"AssetBalance","nameLocation":"595:12:20","nodeType":"StructDefinition","scope":4396,"src":"588:254:20","visibility":"public"},{"constant":false,"functionSelector":"ffb1500e","id":3605,"mutability":"mutable","name":"contractBalance","nameLocation":"890:15:20","nodeType":"VariableDeclaration","scope":4396,"src":"848:57:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string => struct TokenReceiver.AssetBalance)"},"typeName":{"id":3604,"keyName":"id","keyNameLocation":"863:2:20","keyType":{"id":3601,"name":"string","nodeType":"ElementaryTypeName","src":"856:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"848:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string => struct TokenReceiver.AssetBalance)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3603,"nodeType":"UserDefinedTypeName","pathNode":{"id":3602,"name":"AssetBalance","nameLocations":["869:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"869:12:20"},"referencedDeclaration":3600,"src":"869:12:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage_ptr","typeString":"struct TokenReceiver.AssetBalance"}}},"visibility":"public"},{"constant":false,"id":3610,"mutability":"mutable","name":"assetTypeMap","nameLocation":"994:12:20","nodeType":"VariableDeclaration","scope":4396,"src":"939:67:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_enum$_AssetType_$3578_$","typeString":"mapping(address => enum TokenReceiver.AssetType)"},"typeName":{"id":3609,"keyName":"token","keyNameLocation":"955:5:20","keyType":{"id":3606,"name":"address","nodeType":"ElementaryTypeName","src":"947:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"939:45:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_enum$_AssetType_$3578_$","typeString":"mapping(address => enum TokenReceiver.AssetType)"},"valueName":"assetType","valueNameLocation":"974:9:20","valueType":{"id":3608,"nodeType":"UserDefinedTypeName","pathNode":{"id":3607,"name":"AssetType","nameLocations":["964:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3578,"src":"964:9:20"},"referencedDeclaration":3578,"src":"964:9:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"bb40e750a588793101ee433441cffdb0d822cc72d723ac6ef40e95b74d3ff6b8","id":3618,"name":"NativeReceived","nameLocation":"1034:14:20","nodeType":"EventDefinition","parameters":{"id":3617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1056:2:20","nodeType":"VariableDeclaration","scope":3618,"src":"1049:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3611,"name":"string","nodeType":"ElementaryTypeName","src":"1049:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3614,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1068:4:20","nodeType":"VariableDeclaration","scope":3618,"src":"1060:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3613,"name":"address","nodeType":"ElementaryTypeName","src":"1060:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3616,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1082:6:20","nodeType":"VariableDeclaration","scope":3618,"src":"1074:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1074:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1048:41:20"},"src":"1028:62:20"},{"anonymous":false,"eventSelector":"80b0529195f12df0318651d4b36ffc81b7b3cb429033916c20d71e8d2e219ae3","id":3628,"name":"ERC20Received","nameLocation":"1102:13:20","nodeType":"EventDefinition","parameters":{"id":3627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3620,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1132:2:20","nodeType":"VariableDeclaration","scope":3628,"src":"1125:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3619,"name":"string","nodeType":"ElementaryTypeName","src":"1125:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3622,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1152:4:20","nodeType":"VariableDeclaration","scope":3628,"src":"1144:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3621,"name":"address","nodeType":"ElementaryTypeName","src":"1144:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3624,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"1174:5:20","nodeType":"VariableDeclaration","scope":3628,"src":"1166:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3623,"name":"address","nodeType":"ElementaryTypeName","src":"1166:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3626,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1197:6:20","nodeType":"VariableDeclaration","scope":3628,"src":"1189:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3625,"name":"uint256","nodeType":"ElementaryTypeName","src":"1189:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1115:94:20"},"src":"1096:114:20"},{"anonymous":false,"eventSelector":"a7468a675f5f557513c8fee1e26907c243ca55066d2ff56c68e0b6ff93000464","id":3638,"name":"ERC721Received","nameLocation":"1222:14:20","nodeType":"EventDefinition","parameters":{"id":3637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3630,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1253:2:20","nodeType":"VariableDeclaration","scope":3638,"src":"1246:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3629,"name":"string","nodeType":"ElementaryTypeName","src":"1246:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3632,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1273:8:20","nodeType":"VariableDeclaration","scope":3638,"src":"1265:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3631,"name":"address","nodeType":"ElementaryTypeName","src":"1265:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3634,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1299:4:20","nodeType":"VariableDeclaration","scope":3638,"src":"1291:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3633,"name":"address","nodeType":"ElementaryTypeName","src":"1291:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3636,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"1321:7:20","nodeType":"VariableDeclaration","scope":3638,"src":"1313:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3635,"name":"uint256","nodeType":"ElementaryTypeName","src":"1313:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:98:20"},"src":"1216:119:20"},{"anonymous":false,"eventSelector":"be7db84854dd3e0df069ac0a150da03c819444fa894e00bd5902b3cf8152b21d","id":3650,"name":"ERC1155Received","nameLocation":"1347:15:20","nodeType":"EventDefinition","parameters":{"id":3649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3640,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1379:2:20","nodeType":"VariableDeclaration","scope":3650,"src":"1372:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3639,"name":"string","nodeType":"ElementaryTypeName","src":"1372:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3642,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1399:8:20","nodeType":"VariableDeclaration","scope":3650,"src":"1391:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3641,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3644,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1425:4:20","nodeType":"VariableDeclaration","scope":3650,"src":"1417:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3643,"name":"address","nodeType":"ElementaryTypeName","src":"1417:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3646,"indexed":false,"mutability":"mutable","name":"tokenIds","nameLocation":"1447:8:20","nodeType":"VariableDeclaration","scope":3650,"src":"1439:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1439:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3648,"indexed":false,"mutability":"mutable","name":"amounts","nameLocation":"1473:7:20","nodeType":"VariableDeclaration","scope":3650,"src":"1465:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3647,"name":"uint256","nodeType":"ElementaryTypeName","src":"1465:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1362:124:20"},"src":"1341:146:20"},{"anonymous":false,"eventSelector":"1e9b2f0b5318e95abeafb82b7cac3bb5eea75fef85b4d6d7bfc961ba8f244f47","id":3664,"name":"ERC1155BatchReceived","nameLocation":"1503:20:20","nodeType":"EventDefinition","parameters":{"id":3663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3652,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"1540:2:20","nodeType":"VariableDeclaration","scope":3664,"src":"1533:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3651,"name":"string","nodeType":"ElementaryTypeName","src":"1533:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3654,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"1560:8:20","nodeType":"VariableDeclaration","scope":3664,"src":"1552:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3653,"name":"address","nodeType":"ElementaryTypeName","src":"1552:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3656,"indexed":false,"mutability":"mutable","name":"from","nameLocation":"1586:4:20","nodeType":"VariableDeclaration","scope":3664,"src":"1578:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3655,"name":"address","nodeType":"ElementaryTypeName","src":"1578:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3659,"indexed":false,"mutability":"mutable","name":"tokenIds","nameLocation":"1610:8:20","nodeType":"VariableDeclaration","scope":3664,"src":"1600:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3657,"name":"uint256","nodeType":"ElementaryTypeName","src":"1600:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3658,"nodeType":"ArrayTypeName","src":"1600:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3662,"indexed":false,"mutability":"mutable","name":"amounts","nameLocation":"1638:7:20","nodeType":"VariableDeclaration","scope":3664,"src":"1628:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3661,"nodeType":"ArrayTypeName","src":"1628:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1523:128:20"},"src":"1497:155:20"},{"errorSelector":"89555c22","id":3670,"name":"AssetNotFound","nameLocation":"1679:13:20","nodeType":"ErrorDefinition","parameters":{"id":3669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3666,"mutability":"mutable","name":"id","nameLocation":"1700:2:20","nodeType":"VariableDeclaration","scope":3670,"src":"1693:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3665,"name":"string","nodeType":"ElementaryTypeName","src":"1693:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3668,"mutability":"mutable","name":"token","nameLocation":"1712:5:20","nodeType":"VariableDeclaration","scope":3670,"src":"1704:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3667,"name":"address","nodeType":"ElementaryTypeName","src":"1704:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1692:26:20"},"src":"1673:46:20"},{"errorSelector":"4547f748","id":3675,"name":"InvalidAssetType","nameLocation":"1730:16:20","nodeType":"ErrorDefinition","parameters":{"id":3674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3673,"mutability":"mutable","name":"assetType","nameLocation":"1757:9:20","nodeType":"VariableDeclaration","scope":3675,"src":"1747:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},"typeName":{"id":3672,"nodeType":"UserDefinedTypeName","pathNode":{"id":3671,"name":"AssetType","nameLocations":["1747:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3578,"src":"1747:9:20"},"referencedDeclaration":3578,"src":"1747:9:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"visibility":"internal"}],"src":"1746:21:20"},"src":"1724:44:20"},{"errorSelector":"3699922e","id":3679,"name":"AssetTypeNotFoundForToken","nameLocation":"1779:25:20","nodeType":"ErrorDefinition","parameters":{"id":3678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3677,"mutability":"mutable","name":"token","nameLocation":"1813:5:20","nodeType":"VariableDeclaration","scope":3679,"src":"1805:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3676,"name":"address","nodeType":"ElementaryTypeName","src":"1805:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1804:15:20"},"src":"1773:47:20"},{"errorSelector":"4b04c9d7","id":3687,"name":"TransferNativeFailed","nameLocation":"1832:20:20","nodeType":"ErrorDefinition","parameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3681,"mutability":"mutable","name":"id","nameLocation":"1860:2:20","nodeType":"VariableDeclaration","scope":3687,"src":"1853:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3680,"name":"string","nodeType":"ElementaryTypeName","src":"1853:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3683,"mutability":"mutable","name":"to","nameLocation":"1872:2:20","nodeType":"VariableDeclaration","scope":3687,"src":"1864:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3682,"name":"address","nodeType":"ElementaryTypeName","src":"1864:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"amount","nameLocation":"1884:6:20","nodeType":"VariableDeclaration","scope":3687,"src":"1876:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3684,"name":"uint256","nodeType":"ElementaryTypeName","src":"1876:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1852:39:20"},"src":"1826:66:20"},{"errorSelector":"3ff3e6f2","id":3700,"name":"NotEnoughFunds","nameLocation":"1908:14:20","nodeType":"ErrorDefinition","parameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"mutability":"mutable","name":"id","nameLocation":"1930:2:20","nodeType":"VariableDeclaration","scope":3700,"src":"1923:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3688,"name":"string","nodeType":"ElementaryTypeName","src":"1923:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3692,"mutability":"mutable","name":"assetType","nameLocation":"1944:9:20","nodeType":"VariableDeclaration","scope":3700,"src":"1934:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},"typeName":{"id":3691,"nodeType":"UserDefinedTypeName","pathNode":{"id":3690,"name":"AssetType","nameLocations":["1934:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3578,"src":"1934:9:20"},"referencedDeclaration":3578,"src":"1934:9:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"token","nameLocation":"1963:5:20","nodeType":"VariableDeclaration","scope":3700,"src":"1955:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3693,"name":"address","nodeType":"ElementaryTypeName","src":"1955:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3696,"mutability":"mutable","name":"tokenId","nameLocation":"1978:7:20","nodeType":"VariableDeclaration","scope":3700,"src":"1970:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1970:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3698,"mutability":"mutable","name":"amount","nameLocation":"1995:6:20","nodeType":"VariableDeclaration","scope":3700,"src":"1987:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3697,"name":"uint256","nodeType":"ElementaryTypeName","src":"1987:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1922:80:20"},"src":"1902:101:20"},{"body":{"id":3723,"nodeType":"Block","src":"2107:148:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3708,"name":"assetTypeMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2121:12:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_enum$_AssetType_$3578_$","typeString":"mapping(address => enum TokenReceiver.AssetType)"}},"id":3710,"indexExpression":{"id":3709,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"2134:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2121:19:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3711,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2144:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2154:4:20","memberName":"NONE","nodeType":"MemberAccess","referencedDeclaration":3573,"src":"2144:14:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"src":"2121:37:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3718,"nodeType":"IfStatement","src":"2117:94:20","trueBody":{"errorCall":{"arguments":[{"id":3715,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"2205:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3714,"name":"AssetTypeNotFoundForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"2179:25:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2179:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3717,"nodeType":"RevertStatement","src":"2172:39:20"}},{"expression":{"baseExpression":{"id":3719,"name":"assetTypeMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"2229:12:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_enum$_AssetType_$3578_$","typeString":"mapping(address => enum TokenReceiver.AssetType)"}},"id":3721,"indexExpression":{"id":3720,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"2242:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:19:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"functionReturnParameters":3707,"id":3722,"nodeType":"Return","src":"2222:26:20"}]},"id":3724,"implemented":true,"kind":"function","modifiers":[],"name":"_getAssetType","nameLocation":"2044:13:20","nodeType":"FunctionDefinition","parameters":{"id":3703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"mutability":"mutable","name":"token","nameLocation":"2066:5:20","nodeType":"VariableDeclaration","scope":3724,"src":"2058:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3701,"name":"address","nodeType":"ElementaryTypeName","src":"2058:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2057:15:20"},"returnParameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3724,"src":"2096:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},"typeName":{"id":3705,"nodeType":"UserDefinedTypeName","pathNode":{"id":3704,"name":"AssetType","nameLocations":["2096:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3578,"src":"2096:9:20"},"referencedDeclaration":3578,"src":"2096:9:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"visibility":"internal"}],"src":"2095:11:20"},"scope":4396,"src":"2035:220:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3780,"nodeType":"Block","src":"2365:421:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3732,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"2379:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2396:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2388:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3733,"name":"address","nodeType":"ElementaryTypeName","src":"2388:7:20","typeDescriptions":{}}},"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2388:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2379:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"arguments":[{"hexValue":"30786439623637613236","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2492:10:20","typeDescriptions":{"typeIdentifier":"t_rational_3652614694_by_1","typeString":"int_const 3652614694"},"value":"0xd9b67a26"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_3652614694_by_1","typeString":"int_const 3652614694"}],"expression":{"arguments":[{"id":3743,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"2467:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3742,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"2458:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$381_$","typeString":"type(contract IERC1155)"}},"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2458:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$381","typeString":"contract IERC1155"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2474:17:20","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"2458:33:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2458:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"arguments":[{"hexValue":"30783830616335386364","id":3756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2597:10:20","typeDescriptions":{"typeIdentifier":"t_rational_2158778573_by_1","typeString":"int_const 2158778573"},"value":"0x80ac58cd"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2158778573_by_1","typeString":"int_const 2158778573"}],"expression":{"arguments":[{"id":3753,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"2572:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3752,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"2564:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$618_$","typeString":"type(contract IERC721)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2564:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$618","typeString":"contract IERC721"}},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:17:20","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1977,"src":"2564:32:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2564:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3763,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"2675:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3762,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"2668:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$501_$","typeString":"type(contract IERC20)"}},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$501","typeString":"contract IERC20"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2682:11:20","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":450,"src":"2668:25:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:27:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2698:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2668:31:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3773,"nodeType":"IfStatement","src":"2664:84:20","trueBody":{"id":3772,"nodeType":"Block","src":"2701:47:20","statements":[{"expression":{"expression":{"id":3769,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2722:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2732:5:20","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":3575,"src":"2722:15:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"functionReturnParameters":3731,"id":3771,"nodeType":"Return","src":"2715:22:20"}]}},"id":3774,"nodeType":"IfStatement","src":"2560:188:20","trueBody":{"id":3761,"nodeType":"Block","src":"2610:48:20","statements":[{"expression":{"expression":{"id":3758,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2631:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2641:6:20","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":3576,"src":"2631:16:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"functionReturnParameters":3731,"id":3760,"nodeType":"Return","src":"2624:23:20"}]}},"id":3775,"nodeType":"IfStatement","src":"2454:294:20","trueBody":{"id":3751,"nodeType":"Block","src":"2505:49:20","statements":[{"expression":{"expression":{"id":3748,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2526:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2536:7:20","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":3577,"src":"2526:17:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"functionReturnParameters":3731,"id":3750,"nodeType":"Return","src":"2519:24:20"}]}},"id":3776,"nodeType":"IfStatement","src":"2375:373:20","trueBody":{"id":3741,"nodeType":"Block","src":"2400:48:20","statements":[{"expression":{"expression":{"id":3738,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2421:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2431:6:20","memberName":"NATIVE","nodeType":"MemberAccess","referencedDeclaration":3574,"src":"2421:16:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"functionReturnParameters":3731,"id":3740,"nodeType":"Return","src":"2414:23:20"}]}},{"expression":{"expression":{"id":3777,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"2765:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2775:4:20","memberName":"NONE","nodeType":"MemberAccess","referencedDeclaration":3573,"src":"2765:14:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"functionReturnParameters":3731,"id":3779,"nodeType":"Return","src":"2758:21:20"}]},"id":3781,"implemented":true,"kind":"function","modifiers":[],"name":"_detectAssetTypeFromInterfaceId","nameLocation":"2270:31:20","nodeType":"FunctionDefinition","parameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"token","nameLocation":"2319:5:20","nodeType":"VariableDeclaration","scope":3781,"src":"2311:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3725,"name":"address","nodeType":"ElementaryTypeName","src":"2311:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2301:29:20"},"returnParameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3781,"src":"2354:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},"typeName":{"id":3729,"nodeType":"UserDefinedTypeName","pathNode":{"id":3728,"name":"AssetType","nameLocations":["2354:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":3578,"src":"2354:9:20"},"referencedDeclaration":3578,"src":"2354:9:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},"visibility":"internal"}],"src":"2353:11:20"},"scope":4396,"src":"2261:525:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3784,"nodeType":"Block","src":"2839:2:20","statements":[]},"id":3785,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3782,"nodeType":"ParameterList","parameters":[],"src":"2819:2:20"},"returnParameters":{"id":3783,"nodeType":"ParameterList","parameters":[],"src":"2839:0:20"},"scope":4396,"src":"2812:29:20","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3806,"nodeType":"Block","src":"2933:115:20","statements":[{"expression":{"id":3797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3792,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"2943:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3794,"indexExpression":{"id":3793,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3787,"src":"2959:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2943:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3795,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2963:6:20","memberName":"native","nodeType":"MemberAccess","referencedDeclaration":3583,"src":"2943:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3796,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"2973:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2943:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3798,"nodeType":"ExpressionStatement","src":"2943:36:20"},{"eventCall":{"arguments":[{"id":3800,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3787,"src":"3018:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3801,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3022:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3026:6:20","memberName":"sender","nodeType":"MemberAccess","src":"3022:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3803,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"3034:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3799,"name":"NativeReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"3003:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,uint256)"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3003:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3805,"nodeType":"EmitStatement","src":"2998:43:20"}]},"id":3807,"implemented":true,"kind":"function","modifiers":[],"name":"_fundNative","nameLocation":"2856:11:20","nodeType":"FunctionDefinition","parameters":{"id":3790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"id","nameLocation":"2891:2:20","nodeType":"VariableDeclaration","scope":3807,"src":"2877:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3786,"name":"string","nodeType":"ElementaryTypeName","src":"2877:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3789,"mutability":"mutable","name":"amount","nameLocation":"2911:6:20","nodeType":"VariableDeclaration","scope":3807,"src":"2903:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3788,"name":"uint256","nodeType":"ElementaryTypeName","src":"2903:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2867:56:20"},"returnParameters":{"id":3791,"nodeType":"ParameterList","parameters":[],"src":"2933:0:20"},"scope":4396,"src":"2847:201:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3834,"nodeType":"Block","src":"3184:121:20","statements":[{"expression":{"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":3818,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"3194:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3820,"indexExpression":{"id":3819,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"3210:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3194:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3821,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3214:5:20","memberName":"erc20","nodeType":"MemberAccess","referencedDeclaration":3587,"src":"3194:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3823,"indexExpression":{"id":3822,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"3220:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3194:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3824,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"3230:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3194:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3826,"nodeType":"ExpressionStatement","src":"3194:42:20"},{"eventCall":{"arguments":[{"id":3828,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"3274:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3829,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"3278:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3830,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3813,"src":"3284:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3831,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"3291:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3827,"name":"ERC20Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3628,"src":"3260:13:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256)"}},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3260:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3833,"nodeType":"EmitStatement","src":"3255:43:20"}]},"id":3835,"implemented":true,"kind":"function","modifiers":[],"name":"_fundERC20","nameLocation":"3063:10:20","nodeType":"FunctionDefinition","parameters":{"id":3816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3809,"mutability":"mutable","name":"id","nameLocation":"3097:2:20","nodeType":"VariableDeclaration","scope":3835,"src":"3083:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3808,"name":"string","nodeType":"ElementaryTypeName","src":"3083:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3811,"mutability":"mutable","name":"from","nameLocation":"3117:4:20","nodeType":"VariableDeclaration","scope":3835,"src":"3109:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3810,"name":"address","nodeType":"ElementaryTypeName","src":"3109:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3813,"mutability":"mutable","name":"token","nameLocation":"3139:5:20","nodeType":"VariableDeclaration","scope":3835,"src":"3131:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3812,"name":"address","nodeType":"ElementaryTypeName","src":"3131:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3815,"mutability":"mutable","name":"amount","nameLocation":"3162:6:20","nodeType":"VariableDeclaration","scope":3835,"src":"3154:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3814,"name":"uint256","nodeType":"ElementaryTypeName","src":"3154:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3073:101:20"},"returnParameters":{"id":3817,"nodeType":"ParameterList","parameters":[],"src":"3184:0:20"},"scope":4396,"src":"3054:251:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3864,"nodeType":"Block","src":"3443:122:20","statements":[{"expression":{"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":3846,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"3453:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3848,"indexExpression":{"id":3847,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"3469:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3453:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3849,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3473:6:20","memberName":"erc721","nodeType":"MemberAccess","referencedDeclaration":3593,"src":"3453:26:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":3851,"indexExpression":{"id":3850,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"3480:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3453:33:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3853,"indexExpression":{"id":3852,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"3487:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3453:42:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3498:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3453:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3856,"nodeType":"ExpressionStatement","src":"3453:49:20"},{"eventCall":{"arguments":[{"id":3858,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"3533:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3859,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"3537:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3860,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"3543:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3861,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3843,"src":"3550:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3857,"name":"ERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"3518:14:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256)"}},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3518:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3863,"nodeType":"EmitStatement","src":"3513:45:20"}]},"id":3865,"implemented":true,"kind":"function","modifiers":[],"name":"_fundERC721","nameLocation":"3320:11:20","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3837,"mutability":"mutable","name":"id","nameLocation":"3355:2:20","nodeType":"VariableDeclaration","scope":3865,"src":"3341:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3836,"name":"string","nodeType":"ElementaryTypeName","src":"3341:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3839,"mutability":"mutable","name":"from","nameLocation":"3375:4:20","nodeType":"VariableDeclaration","scope":3865,"src":"3367:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3838,"name":"address","nodeType":"ElementaryTypeName","src":"3367:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3841,"mutability":"mutable","name":"token","nameLocation":"3397:5:20","nodeType":"VariableDeclaration","scope":3865,"src":"3389:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3840,"name":"address","nodeType":"ElementaryTypeName","src":"3389:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3843,"mutability":"mutable","name":"tokenId","nameLocation":"3420:7:20","nodeType":"VariableDeclaration","scope":3865,"src":"3412:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3842,"name":"uint256","nodeType":"ElementaryTypeName","src":"3412:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3331:102:20"},"returnParameters":{"id":3845,"nodeType":"ParameterList","parameters":[],"src":"3443:0:20"},"scope":4396,"src":"3311:254:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3897,"nodeType":"Block","src":"3728:135:20","statements":[{"expression":{"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":3878,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"3738:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3880,"indexExpression":{"id":3879,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"3754:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3738:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3758:7:20","memberName":"erc1155","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"3738:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3883,"indexExpression":{"id":3882,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"3766:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3738:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3885,"indexExpression":{"id":3884,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"3773:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3738:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3886,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"3785:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3738:53:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3888,"nodeType":"ExpressionStatement","src":"3738:53:20"},{"eventCall":{"arguments":[{"id":3890,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"3823:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3891,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3869,"src":"3827:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3892,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"3833:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3893,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"3840:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3894,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"3849:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3889,"name":"ERC1155Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"3807:15:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,address,address,uint256,uint256)"}},"id":3895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:49:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3896,"nodeType":"EmitStatement","src":"3802:54:20"}]},"id":3898,"implemented":true,"kind":"function","modifiers":[],"name":"_fundERC1155","nameLocation":"3580:12:20","nodeType":"FunctionDefinition","parameters":{"id":3876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3867,"mutability":"mutable","name":"id","nameLocation":"3616:2:20","nodeType":"VariableDeclaration","scope":3898,"src":"3602:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3866,"name":"string","nodeType":"ElementaryTypeName","src":"3602:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3869,"mutability":"mutable","name":"from","nameLocation":"3636:4:20","nodeType":"VariableDeclaration","scope":3898,"src":"3628:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3868,"name":"address","nodeType":"ElementaryTypeName","src":"3628:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3871,"mutability":"mutable","name":"token","nameLocation":"3658:5:20","nodeType":"VariableDeclaration","scope":3898,"src":"3650:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3870,"name":"address","nodeType":"ElementaryTypeName","src":"3650:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3873,"mutability":"mutable","name":"tokenId","nameLocation":"3681:7:20","nodeType":"VariableDeclaration","scope":3898,"src":"3673:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3872,"name":"uint256","nodeType":"ElementaryTypeName","src":"3673:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3875,"mutability":"mutable","name":"amount","nameLocation":"3706:6:20","nodeType":"VariableDeclaration","scope":3898,"src":"3698:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3874,"name":"uint256","nodeType":"ElementaryTypeName","src":"3698:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3592:126:20"},"returnParameters":{"id":3877,"nodeType":"ParameterList","parameters":[],"src":"3728:0:20"},"scope":4396,"src":"3571:292:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3949,"nodeType":"Block","src":"4055:220:20","statements":[{"body":{"id":3939,"nodeType":"Block","src":"4111:86:20","statements":[{"expression":{"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":3924,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4125:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3926,"indexExpression":{"id":3925,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"4141:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4125:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4145:7:20","memberName":"erc1155","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"4125:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3929,"indexExpression":{"id":3928,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"4153:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4125:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3933,"indexExpression":{"baseExpression":{"id":3930,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"4160:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3932,"indexExpression":{"id":3931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4169:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4160:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4125:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":3934,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"4176:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3936,"indexExpression":{"id":3935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4184:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4176:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4125:61:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3938,"nodeType":"ExpressionStatement","src":"4125:61:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3917,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4085:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3918,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"4089:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4098:6:20","memberName":"length","nodeType":"MemberAccess","src":"4089:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4085:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"initializationExpression":{"assignments":[3914],"declarations":[{"constant":false,"id":3914,"mutability":"mutable","name":"i","nameLocation":"4078:1:20","nodeType":"VariableDeclaration","scope":3940,"src":"4070:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3913,"name":"uint256","nodeType":"ElementaryTypeName","src":"4070:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3916,"initialValue":{"hexValue":"30","id":3915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4082:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4070:13:20"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4106:3:20","subExpression":{"id":3921,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4106:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3923,"nodeType":"ExpressionStatement","src":"4106:3:20"},"nodeType":"ForStatement","src":"4065:132:20"},{"eventCall":{"arguments":[{"id":3942,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"4233:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3943,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"4237:4:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3944,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3904,"src":"4243:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3945,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"4250:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":3946,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"4260:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":3941,"name":"ERC1155BatchReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"4212:20:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (string memory,address,address,uint256[] memory,uint256[] memory)"}},"id":3947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4212:56:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3948,"nodeType":"EmitStatement","src":"4207:61:20"}]},"id":3950,"implemented":true,"kind":"function","modifiers":[],"name":"_fundERC1155Batch","nameLocation":"3878:17:20","nodeType":"FunctionDefinition","parameters":{"id":3911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3900,"mutability":"mutable","name":"id","nameLocation":"3919:2:20","nodeType":"VariableDeclaration","scope":3950,"src":"3905:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3899,"name":"string","nodeType":"ElementaryTypeName","src":"3905:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3902,"mutability":"mutable","name":"from","nameLocation":"3939:4:20","nodeType":"VariableDeclaration","scope":3950,"src":"3931:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"3931:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"token","nameLocation":"3961:5:20","nodeType":"VariableDeclaration","scope":3950,"src":"3953:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"3953:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3907,"mutability":"mutable","name":"tokenIds","nameLocation":"3995:8:20","nodeType":"VariableDeclaration","scope":3950,"src":"3976:27:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3905,"name":"uint256","nodeType":"ElementaryTypeName","src":"3976:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3906,"nodeType":"ArrayTypeName","src":"3976:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"amounts","nameLocation":"4032:7:20","nodeType":"VariableDeclaration","scope":3950,"src":"4013:26:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3908,"name":"uint256","nodeType":"ElementaryTypeName","src":"4013:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3909,"nodeType":"ArrayTypeName","src":"4013:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3895:150:20"},"returnParameters":{"id":3912,"nodeType":"ParameterList","parameters":[],"src":"4055:0:20"},"scope":4396,"src":"3869:406:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4003,"nodeType":"Block","src":"4423:306:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3959,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4437:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3961,"indexExpression":{"id":3960,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"4453:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4437:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4457:6:20","memberName":"native","nodeType":"MemberAccess","referencedDeclaration":3583,"src":"4437:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3963,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"4466:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4437:35:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3977,"nodeType":"IfStatement","src":"4433:119:20","trueBody":{"errorCall":{"arguments":[{"id":3966,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"4508:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3967,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"4512:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4522:6:20","memberName":"NATIVE","nodeType":"MemberAccess","referencedDeclaration":3574,"src":"4512:16:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},{"arguments":[{"hexValue":"30","id":3971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4538:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4530:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3969,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:20","typeDescriptions":{}}},"id":3972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4530:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4542:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3974,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"4545:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3965,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"4493:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_enum$_AssetType_$3578_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,enum TokenReceiver.AssetType,address,uint256,uint256) pure"}},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4493:59:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3976,"nodeType":"RevertStatement","src":"4486:66:20"}},{"expression":{"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3978,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4563:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":3980,"indexExpression":{"id":3979,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"4579:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4563:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":3981,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4583:6:20","memberName":"native","nodeType":"MemberAccess","referencedDeclaration":3583,"src":"4563:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3982,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"4593:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4563:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3984,"nodeType":"ExpressionStatement","src":"4563:36:20"},{"assignments":[3986,null],"declarations":[{"constant":false,"id":3986,"mutability":"mutable","name":"success","nameLocation":"4616:7:20","nodeType":"VariableDeclaration","scope":4003,"src":"4611:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3985,"name":"bool","nodeType":"ElementaryTypeName","src":"4611:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3993,"initialValue":{"arguments":[{"hexValue":"","id":3991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4652:2:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"4629:2:20","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4632:4:20","memberName":"call","nodeType":"MemberAccess","src":"4629:7:20","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3989,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"4644:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4629:22:20","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4610:45:20"},{"condition":{"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4669:8:20","subExpression":{"id":3994,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"4670:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4002,"nodeType":"IfStatement","src":"4665:57:20","trueBody":{"errorCall":{"arguments":[{"id":3997,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"4707:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3998,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3954,"src":"4711:2:20","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":3999,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"4715:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3996,"name":"TransferNativeFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"4686:20:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$__$","typeString":"function (string memory,address,uint256) pure"}},"id":4000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4686:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4001,"nodeType":"RevertStatement","src":"4679:43:20"}}]},"id":4004,"implemented":true,"kind":"function","modifiers":[],"name":"_transferNative","nameLocation":"4314:15:20","nodeType":"FunctionDefinition","parameters":{"id":3957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"mutability":"mutable","name":"id","nameLocation":"4353:2:20","nodeType":"VariableDeclaration","scope":4004,"src":"4339:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3951,"name":"string","nodeType":"ElementaryTypeName","src":"4339:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3954,"mutability":"mutable","name":"to","nameLocation":"4381:2:20","nodeType":"VariableDeclaration","scope":4004,"src":"4365:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3953,"name":"address","nodeType":"ElementaryTypeName","src":"4365:15:20","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3956,"mutability":"mutable","name":"amount","nameLocation":"4401:6:20","nodeType":"VariableDeclaration","scope":4004,"src":"4393:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3955,"name":"uint256","nodeType":"ElementaryTypeName","src":"4393:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4329:84:20"},"returnParameters":{"id":3958,"nodeType":"ParameterList","parameters":[],"src":"4423:0:20"},"scope":4396,"src":"4305:424:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4054,"nodeType":"Block","src":"4871:253:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4015,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"4885:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4017,"indexExpression":{"id":4016,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"4901:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4885:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4905:5:20","memberName":"erc20","nodeType":"MemberAccess","referencedDeclaration":3587,"src":"4885:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4020,"indexExpression":{"id":4019,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"4911:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4885:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4021,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"4920:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4885:41:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4032,"nodeType":"IfStatement","src":"4881:119:20","trueBody":{"errorCall":{"arguments":[{"id":4024,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"4962:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4025,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"4966:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":4026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4976:5:20","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":3575,"src":"4966:15:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},{"id":4027,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"4983:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4990:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4029,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"4993:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4023,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"4947:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_enum$_AssetType_$3578_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,enum TokenReceiver.AssetType,address,uint256,uint256) pure"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4947:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4031,"nodeType":"RevertStatement","src":"4940:60:20"}},{"expression":{"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":4033,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5011:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4035,"indexExpression":{"id":4034,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"5027:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5011:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4036,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5031:5:20","memberName":"erc20","nodeType":"MemberAccess","referencedDeclaration":3587,"src":"5011:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4038,"indexExpression":{"id":4037,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"5037:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5011:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4039,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"5047:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5011:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4041,"nodeType":"ExpressionStatement","src":"5011:42:20"},{"expression":{"arguments":[{"arguments":[{"id":4048,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5099:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}],"id":4047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5091:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4046,"name":"address","nodeType":"ElementaryTypeName","src":"5091:7:20","typeDescriptions":{}}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4050,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"5106:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4051,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"5110:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4043,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"5071:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4042,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"5064:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$501_$","typeString":"type(contract IERC20)"}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5064:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$501","typeString":"contract IERC20"}},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:12:20","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":500,"src":"5064:26:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5064:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4053,"nodeType":"ExpressionStatement","src":"5064:53:20"}]},"id":4055,"implemented":true,"kind":"function","modifiers":[],"name":"_transferFromERC20","nameLocation":"4744:18:20","nodeType":"FunctionDefinition","parameters":{"id":4013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4006,"mutability":"mutable","name":"id","nameLocation":"4786:2:20","nodeType":"VariableDeclaration","scope":4055,"src":"4772:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4005,"name":"string","nodeType":"ElementaryTypeName","src":"4772:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4008,"mutability":"mutable","name":"to","nameLocation":"4806:2:20","nodeType":"VariableDeclaration","scope":4055,"src":"4798:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4007,"name":"address","nodeType":"ElementaryTypeName","src":"4798:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4010,"mutability":"mutable","name":"token","nameLocation":"4826:5:20","nodeType":"VariableDeclaration","scope":4055,"src":"4818:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4009,"name":"address","nodeType":"ElementaryTypeName","src":"4818:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4012,"mutability":"mutable","name":"amount","nameLocation":"4849:6:20","nodeType":"VariableDeclaration","scope":4055,"src":"4841:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"4841:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4762:99:20"},"returnParameters":{"id":4014,"nodeType":"ParameterList","parameters":[],"src":"4871:0:20"},"scope":4396,"src":"4735:389:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4101,"nodeType":"Block","src":"5262:234:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4066,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5276:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4068,"indexExpression":{"id":4067,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"5292:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5276:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5296:5:20","memberName":"erc20","nodeType":"MemberAccess","referencedDeclaration":3587,"src":"5276:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4071,"indexExpression":{"id":4070,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"5302:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5276:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4072,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"5311:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5276:41:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4083,"nodeType":"IfStatement","src":"5272:119:20","trueBody":{"errorCall":{"arguments":[{"id":4075,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"5353:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4076,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"5357:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5367:5:20","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":3575,"src":"5357:15:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},{"id":4078,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"5374:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5381:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4080,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"5384:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4074,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5338:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_enum$_AssetType_$3578_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,enum TokenReceiver.AssetType,address,uint256,uint256) pure"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5338:53:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4082,"nodeType":"RevertStatement","src":"5331:60:20"}},{"expression":{"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":4084,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5402:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4086,"indexExpression":{"id":4085,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"5418:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5402:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5422:5:20","memberName":"erc20","nodeType":"MemberAccess","referencedDeclaration":3587,"src":"5402:25:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4089,"indexExpression":{"id":4088,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"5428:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5402:32:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"5438:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5402:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4092,"nodeType":"ExpressionStatement","src":"5402:42:20"},{"expression":{"arguments":[{"id":4097,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"5478:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4098,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"5482:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4094,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"5462:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4093,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"5455:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$501_$","typeString":"type(contract IERC20)"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5455:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$501","typeString":"contract IERC20"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5469:8:20","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":468,"src":"5455:22:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5455:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4100,"nodeType":"ExpressionStatement","src":"5455:34:20"}]},"id":4102,"implemented":true,"kind":"function","modifiers":[],"name":"_transferERC20","nameLocation":"5139:14:20","nodeType":"FunctionDefinition","parameters":{"id":4064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4057,"mutability":"mutable","name":"id","nameLocation":"5177:2:20","nodeType":"VariableDeclaration","scope":4102,"src":"5163:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4056,"name":"string","nodeType":"ElementaryTypeName","src":"5163:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4059,"mutability":"mutable","name":"to","nameLocation":"5197:2:20","nodeType":"VariableDeclaration","scope":4102,"src":"5189:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4058,"name":"address","nodeType":"ElementaryTypeName","src":"5189:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4061,"mutability":"mutable","name":"token","nameLocation":"5217:5:20","nodeType":"VariableDeclaration","scope":4102,"src":"5209:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4060,"name":"address","nodeType":"ElementaryTypeName","src":"5209:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4063,"mutability":"mutable","name":"amount","nameLocation":"5240:6:20","nodeType":"VariableDeclaration","scope":4102,"src":"5232:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4062,"name":"uint256","nodeType":"ElementaryTypeName","src":"5232:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5153:99:20"},"returnParameters":{"id":4065,"nodeType":"ParameterList","parameters":[],"src":"5262:0:20"},"scope":4396,"src":"5130:366:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4158,"nodeType":"Block","src":"5667:277:20","statements":[{"condition":{"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5681:43:20","subExpression":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4115,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5682:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4117,"indexExpression":{"id":4116,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"5698:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5682:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5702:6:20","memberName":"erc721","nodeType":"MemberAccess","referencedDeclaration":3593,"src":"5682:26:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":4120,"indexExpression":{"id":4119,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"5709:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5682:33:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4122,"indexExpression":{"id":4121,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"5716:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5682:42:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4133,"nodeType":"IfStatement","src":"5677:123:20","trueBody":{"errorCall":{"arguments":[{"id":4125,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"5760:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4126,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"5764:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":4127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5774:6:20","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":3576,"src":"5764:16:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},{"id":4128,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"5782:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4129,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"5789:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":4130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5798:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4124,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"5745:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_enum$_AssetType_$3578_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,enum TokenReceiver.AssetType,address,uint256,uint256) pure"}},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5745:55:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4132,"nodeType":"RevertStatement","src":"5738:62:20"}},{"expression":{"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4134,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"5811:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4136,"indexExpression":{"id":4135,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4104,"src":"5827:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5811:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5831:6:20","memberName":"erc721","nodeType":"MemberAccess","referencedDeclaration":3593,"src":"5811:26:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":4139,"indexExpression":{"id":4138,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"5838:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5811:33:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4141,"indexExpression":{"id":4140,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"5845:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5811:42:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5856:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5811:50:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4144,"nodeType":"ExpressionStatement","src":"5811:50:20"},{"expression":{"arguments":[{"arguments":[{"id":4151,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5912:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}],"id":4150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5904:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4149,"name":"address","nodeType":"ElementaryTypeName","src":"5904:7:20","typeDescriptions":{}}},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5904:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4153,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4106,"src":"5919:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4154,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"5923:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4155,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4112,"src":"5932:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4146,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4108,"src":"5880:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4145,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"5872:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$618_$","typeString":"type(contract IERC721)"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5872:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$618","typeString":"contract IERC721"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5887:16:20","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":563,"src":"5872:31:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory) external"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5872:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4157,"nodeType":"ExpressionStatement","src":"5872:65:20"}]},"id":4159,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferERC721","nameLocation":"5511:19:20","nodeType":"FunctionDefinition","parameters":{"id":4113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4104,"mutability":"mutable","name":"id","nameLocation":"5554:2:20","nodeType":"VariableDeclaration","scope":4159,"src":"5540:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4103,"name":"string","nodeType":"ElementaryTypeName","src":"5540:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4106,"mutability":"mutable","name":"to","nameLocation":"5574:2:20","nodeType":"VariableDeclaration","scope":4159,"src":"5566:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4105,"name":"address","nodeType":"ElementaryTypeName","src":"5566:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4108,"mutability":"mutable","name":"token","nameLocation":"5594:5:20","nodeType":"VariableDeclaration","scope":4159,"src":"5586:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4107,"name":"address","nodeType":"ElementaryTypeName","src":"5586:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4110,"mutability":"mutable","name":"tokenId","nameLocation":"5617:7:20","nodeType":"VariableDeclaration","scope":4159,"src":"5609:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4109,"name":"uint256","nodeType":"ElementaryTypeName","src":"5609:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4112,"mutability":"mutable","name":"data","nameLocation":"5647:4:20","nodeType":"VariableDeclaration","scope":4159,"src":"5634:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4111,"name":"bytes","nodeType":"ElementaryTypeName","src":"5634:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5530:127:20"},"returnParameters":{"id":4114,"nodeType":"ParameterList","parameters":[],"src":"5667:0:20"},"scope":4396,"src":"5502:442:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4219,"nodeType":"Block","src":"6140:374:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4174,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"6154:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4176,"indexExpression":{"id":4175,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"6170:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6154:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6174:7:20","memberName":"erc1155","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"6154:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4179,"indexExpression":{"id":4178,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"6182:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6154:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4181,"indexExpression":{"id":4180,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"6189:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6154:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4182,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"6200:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6154:52:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4193,"nodeType":"IfStatement","src":"6150:138:20","trueBody":{"errorCall":{"arguments":[{"id":4185,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"6242:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4186,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"6246:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6256:7:20","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":3577,"src":"6246:17:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},{"id":4188,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"6265:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4189,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"6272:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4190,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"6281:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4184,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"6227:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_enum$_AssetType_$3578_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,enum TokenReceiver.AssetType,address,uint256,uint256) pure"}},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6227:61:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4192,"nodeType":"RevertStatement","src":"6220:68:20"}},{"expression":{"id":4203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4194,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"6299:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4196,"indexExpression":{"id":4195,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"6315:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6299:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6319:7:20","memberName":"erc1155","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"6299:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4199,"indexExpression":{"id":4198,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"6327:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6299:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4201,"indexExpression":{"id":4200,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"6334:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6299:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4202,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"6346:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6299:53:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4204,"nodeType":"ExpressionStatement","src":"6299:53:20"},{"expression":{"arguments":[{"arguments":[{"id":4211,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6417:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}],"id":4210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6409:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4209,"name":"address","nodeType":"ElementaryTypeName","src":"6409:7:20","typeDescriptions":{}}},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6409:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4213,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"6436:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4214,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"6452:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4215,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"6473:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4216,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4171,"src":"6493:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4206,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"6372:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4205,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"6363:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$381_$","typeString":"type(contract IERC1155)"}},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6363:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$381","typeString":"contract IERC1155"}},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6379:16:20","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":364,"src":"6363:32:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory) external"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6363:144:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4218,"nodeType":"ExpressionStatement","src":"6363:144:20"}]},"id":4220,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferERC1155","nameLocation":"5959:20:20","nodeType":"FunctionDefinition","parameters":{"id":4172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4161,"mutability":"mutable","name":"id","nameLocation":"6003:2:20","nodeType":"VariableDeclaration","scope":4220,"src":"5989:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4160,"name":"string","nodeType":"ElementaryTypeName","src":"5989:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4163,"mutability":"mutable","name":"to","nameLocation":"6023:2:20","nodeType":"VariableDeclaration","scope":4220,"src":"6015:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4162,"name":"address","nodeType":"ElementaryTypeName","src":"6015:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4165,"mutability":"mutable","name":"token","nameLocation":"6043:5:20","nodeType":"VariableDeclaration","scope":4220,"src":"6035:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4164,"name":"address","nodeType":"ElementaryTypeName","src":"6035:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4167,"mutability":"mutable","name":"tokenId","nameLocation":"6066:7:20","nodeType":"VariableDeclaration","scope":4220,"src":"6058:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4166,"name":"uint256","nodeType":"ElementaryTypeName","src":"6058:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4169,"mutability":"mutable","name":"amount","nameLocation":"6091:6:20","nodeType":"VariableDeclaration","scope":4220,"src":"6083:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4168,"name":"uint256","nodeType":"ElementaryTypeName","src":"6083:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4171,"mutability":"mutable","name":"data","nameLocation":"6120:4:20","nodeType":"VariableDeclaration","scope":4220,"src":"6107:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4170,"name":"bytes","nodeType":"ElementaryTypeName","src":"6107:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5979:151:20"},"returnParameters":{"id":4173,"nodeType":"ParameterList","parameters":[],"src":"6140:0:20"},"scope":4396,"src":"5950:564:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4307,"nodeType":"Block","src":"6735:483:20","statements":[{"body":{"id":4291,"nodeType":"Block","src":"6791:259:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4248,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"6809:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4250,"indexExpression":{"id":4249,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"6825:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6809:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6829:7:20","memberName":"erc1155","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"6809:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4253,"indexExpression":{"id":4252,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"6837:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6809:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4257,"indexExpression":{"baseExpression":{"id":4254,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"6844:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4256,"indexExpression":{"id":4255,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"6853:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6844:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6809:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":4258,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"6859:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4260,"indexExpression":{"id":4259,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"6867:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6859:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6809:60:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4275,"nodeType":"IfStatement","src":"6805:158:20","trueBody":{"errorCall":{"arguments":[{"id":4263,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"6909:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4264,"name":"AssetType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"6913:9:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_AssetType_$3578_$","typeString":"type(enum TokenReceiver.AssetType)"}},"id":4265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6923:7:20","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":3577,"src":"6913:17:20","typeDescriptions":{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"}},{"id":4266,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"6932:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4267,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"6939:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4269,"indexExpression":{"id":4268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"6948:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6939:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":4270,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"6952:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4272,"indexExpression":{"id":4271,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"6960:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6952:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_enum$_AssetType_$3578","typeString":"enum TokenReceiver.AssetType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4262,"name":"NotEnoughFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3700,"src":"6894:14:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_string_memory_ptr_$_t_enum$_AssetType_$3578_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (string memory,enum TokenReceiver.AssetType,address,uint256,uint256) pure"}},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6894:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4274,"nodeType":"RevertStatement","src":"6887:76:20"}},{"expression":{"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"baseExpression":{"id":4276,"name":"contractBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"6978:15:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_struct$_AssetBalance_$3600_storage_$","typeString":"mapping(string memory => struct TokenReceiver.AssetBalance storage ref)"}},"id":4278,"indexExpression":{"id":4277,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"6994:2:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6978:19:20","typeDescriptions":{"typeIdentifier":"t_struct$_AssetBalance_$3600_storage","typeString":"struct TokenReceiver.AssetBalance storage ref"}},"id":4279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6998:7:20","memberName":"erc1155","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"6978:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":4281,"indexExpression":{"id":4280,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"7006:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6978:34:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4285,"indexExpression":{"baseExpression":{"id":4282,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"7013:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4284,"indexExpression":{"id":4283,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"7022:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7013:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6978:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"baseExpression":{"id":4286,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"7029:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4288,"indexExpression":{"id":4287,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"7037:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7029:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6978:61:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4290,"nodeType":"ExpressionStatement","src":"6978:61:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4241,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"6765:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4242,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"6769:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6778:6:20","memberName":"length","nodeType":"MemberAccess","src":"6769:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6765:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4292,"initializationExpression":{"assignments":[4238],"declarations":[{"constant":false,"id":4238,"mutability":"mutable","name":"i","nameLocation":"6758:1:20","nodeType":"VariableDeclaration","scope":4292,"src":"6750:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4237,"name":"uint256","nodeType":"ElementaryTypeName","src":"6750:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4240,"initialValue":{"hexValue":"30","id":4239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6762:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6750:13:20"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6786:3:20","subExpression":{"id":4245,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"6786:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4247,"nodeType":"ExpressionStatement","src":"6786:3:20"},"nodeType":"ForStatement","src":"6745:305:20"},{"expression":{"arguments":[{"arguments":[{"id":4299,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7119:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenReceiver_$4396","typeString":"contract TokenReceiver"}],"id":4298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7111:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4297,"name":"address","nodeType":"ElementaryTypeName","src":"7111:7:20","typeDescriptions":{}}},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7111:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4301,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"7138:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4302,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"7154:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4303,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"7176:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":4304,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4234,"src":"7197:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4294,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"7069:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4293,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"7060:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$381_$","typeString":"type(contract IERC1155)"}},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$381","typeString":"contract IERC1155"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7076:21:20","memberName":"safeBatchTransferFrom","nodeType":"MemberAccess","referencedDeclaration":380,"src":"7060:37:20","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:151:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4306,"nodeType":"ExpressionStatement","src":"7060:151:20"}]},"id":4308,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferERC1155","nameLocation":"6529:25:20","nodeType":"FunctionDefinition","parameters":{"id":4235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4222,"mutability":"mutable","name":"id","nameLocation":"6578:2:20","nodeType":"VariableDeclaration","scope":4308,"src":"6564:16:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4221,"name":"string","nodeType":"ElementaryTypeName","src":"6564:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4224,"mutability":"mutable","name":"to","nameLocation":"6598:2:20","nodeType":"VariableDeclaration","scope":4308,"src":"6590:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4223,"name":"address","nodeType":"ElementaryTypeName","src":"6590:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4226,"mutability":"mutable","name":"token","nameLocation":"6618:5:20","nodeType":"VariableDeclaration","scope":4308,"src":"6610:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4225,"name":"address","nodeType":"ElementaryTypeName","src":"6610:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4229,"mutability":"mutable","name":"tokenIds","nameLocation":"6650:8:20","nodeType":"VariableDeclaration","scope":4308,"src":"6633:25:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4227,"name":"uint256","nodeType":"ElementaryTypeName","src":"6633:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4228,"nodeType":"ArrayTypeName","src":"6633:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4232,"mutability":"mutable","name":"amounts","nameLocation":"6685:7:20","nodeType":"VariableDeclaration","scope":4308,"src":"6668:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4230,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4231,"nodeType":"ArrayTypeName","src":"6668:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4234,"mutability":"mutable","name":"data","nameLocation":"6715:4:20","nodeType":"VariableDeclaration","scope":4308,"src":"6702:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4233,"name":"bytes","nodeType":"ElementaryTypeName","src":"6702:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6554:171:20"},"returnParameters":{"id":4236,"nodeType":"ParameterList","parameters":[],"src":"6735:0:20"},"scope":4396,"src":"6520:698:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[635],"body":{"id":4324,"nodeType":"Block","src":"7461:34:20","statements":[{"expression":{"hexValue":"30783135306237613032","id":4322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7478:10:20","typeDescriptions":{"typeIdentifier":"t_rational_353073666_by_1","typeString":"int_const 353073666"},"value":"0x150b7a02"},"functionReturnParameters":4321,"id":4323,"nodeType":"Return","src":"7471:17:20"}]},"functionSelector":"150b7a02","id":4325,"implemented":true,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"7278:16:20","nodeType":"FunctionDefinition","overrides":{"id":4318,"nodeType":"OverrideSpecifier","overrides":[],"src":"7435:8:20"},"parameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4325,"src":"7304:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4309,"name":"address","nodeType":"ElementaryTypeName","src":"7304:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4325,"src":"7334:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4311,"name":"address","nodeType":"ElementaryTypeName","src":"7334:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4325,"src":"7360:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4313,"name":"uint256","nodeType":"ElementaryTypeName","src":"7360:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4325,"src":"7389:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4315,"name":"bytes","nodeType":"ElementaryTypeName","src":"7389:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7294:123:20"},"returnParameters":{"id":4321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4325,"src":"7453:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4319,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7453:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7452:8:20"},"scope":4396,"src":"7269:226:20","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[404],"body":{"id":4343,"nodeType":"Block","src":"7716:34:20","statements":[{"expression":{"hexValue":"30786632336136653631","id":4341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7733:10:20","typeDescriptions":{"typeIdentifier":"t_rational_4063915617_by_1","typeString":"int_const 4063915617"},"value":"0xf23a6e61"},"functionReturnParameters":4340,"id":4342,"nodeType":"Return","src":"7726:17:20"}]},"functionSelector":"f23a6e61","id":4344,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"7510:17:20","nodeType":"FunctionDefinition","overrides":{"id":4337,"nodeType":"OverrideSpecifier","overrides":[],"src":"7690:8:20"},"parameters":{"id":4336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"7537:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4326,"name":"address","nodeType":"ElementaryTypeName","src":"7537:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"7567:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4328,"name":"address","nodeType":"ElementaryTypeName","src":"7567:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"7593:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4330,"name":"uint256","nodeType":"ElementaryTypeName","src":"7593:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"7617:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4332,"name":"uint256","nodeType":"ElementaryTypeName","src":"7617:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"7644:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4334,"name":"bytes","nodeType":"ElementaryTypeName","src":"7644:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7527:145:20"},"returnParameters":{"id":4340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"7708:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4338,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7708:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7707:8:20"},"scope":4396,"src":"7501:249:20","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[422],"body":{"id":4364,"nodeType":"Block","src":"8000:34:20","statements":[{"expression":{"hexValue":"30786263313937633831","id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8017:10:20","typeDescriptions":{"typeIdentifier":"t_rational_3155786881_by_1","typeString":"int_const 3155786881"},"value":"0xbc197c81"},"functionReturnParameters":4361,"id":4363,"nodeType":"Return","src":"8010:17:20"}]},"functionSelector":"bc197c81","id":4365,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"7765:22:20","nodeType":"FunctionDefinition","overrides":{"id":4358,"nodeType":"OverrideSpecifier","overrides":[],"src":"7974:8:20"},"parameters":{"id":4357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"7797:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4345,"name":"address","nodeType":"ElementaryTypeName","src":"7797:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"7827:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4347,"name":"address","nodeType":"ElementaryTypeName","src":"7827:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"7853:18:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4349,"name":"uint256","nodeType":"ElementaryTypeName","src":"7853:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4350,"nodeType":"ArrayTypeName","src":"7853:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"7889:18:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4352,"name":"uint256","nodeType":"ElementaryTypeName","src":"7889:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4353,"nodeType":"ArrayTypeName","src":"7889:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"7928:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4355,"name":"bytes","nodeType":"ElementaryTypeName","src":"7928:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7787:169:20"},"returnParameters":{"id":4361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"7992:6:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4359,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7992:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7991:8:20"},"scope":4396,"src":"7756:278:20","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1977],"body":{"id":4394,"nodeType":"Block","src":"8133:205:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4373,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"8162:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4375,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"8182:16:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$423_$","typeString":"type(contract IERC1155Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$423_$","typeString":"type(contract IERC1155Receiver)"}],"id":4374,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8177:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8177:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155Receiver_$423","typeString":"type(contract IERC1155Receiver)"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8200:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"8177:34:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8162:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4379,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"8227:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4381,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"8247:15:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$636_$","typeString":"type(contract IERC721Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$636_$","typeString":"type(contract IERC721Receiver)"}],"id":4380,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8242:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8242:21:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Receiver_$636","typeString":"type(contract IERC721Receiver)"}},"id":4383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8264:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"8242:33:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8227:48:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8162:113:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4386,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"8291:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4388,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"8311:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1978_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1978_$","typeString":"type(contract IERC165)"}],"id":4387,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8306:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8306:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1978","typeString":"type(contract IERC165)"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8320:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"8306:25:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8291:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8162:169:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4372,"id":4393,"nodeType":"Return","src":"8143:188:20"}]},"functionSelector":"01ffc9a7","id":4395,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"8049:17:20","nodeType":"FunctionDefinition","overrides":{"id":4369,"nodeType":"OverrideSpecifier","overrides":[],"src":"8109:8:20"},"parameters":{"id":4368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4367,"mutability":"mutable","name":"interfaceId","nameLocation":"8074:11:20","nodeType":"VariableDeclaration","scope":4395,"src":"8067:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4366,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8067:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"8066:20:20"},"returnParameters":{"id":4372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4395,"src":"8127:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4370,"name":"bool","nodeType":"ElementaryTypeName","src":"8127:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8126:6:20"},"scope":4396,"src":"8040:298:20","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":4397,"src":"372:7968:20","usedErrors":[3670,3675,3679,3687,3700],"usedEvents":[3618,3628,3638,3650,3664]}],"src":"32:8308:20"},"id":20}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable2Step.sol":{"Ownable2Step":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is specified at deployment time in the constructor for `Ownable`. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is specified at deployment time in the constructor for `Ownable`. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable2Step.sol\":\"Ownable2Step\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable2Step.sol:Ownable2Step","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":156,"contract":"@openzeppelin/contracts/access/Ownable2Step.sol:Ownable2Step","label":"_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC5267.sol":{"IERC5267":{"abi":[{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"eip712Domain()":{"details":"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP].\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":677,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ShortStrings.sol":{"ShortStrings":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"}],"devdoc":{"details":"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d6fb763438557a7c0c53ca64623136f5bac44f1e0e3d33ef4fc6d3bc99db818264736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0xFB PUSH23 0x3438557A7C0C53CA64623136F5BAC44F1E0E3D33EF4FC6 0xD3 0xBC SWAP10 0xDB DUP2 DUP3 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"1255:3053:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d6fb763438557a7c0c53ca64623136f5bac44f1e0e3d33ef4fc6d3bc99db818264736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 0xFB PUSH23 0x3438557A7C0C53CA64623136F5BAC44F1E0E3D33EF4FC6 0xD3 0xBC SWAP10 0xDB DUP2 DUP3 PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"1255:3053:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"byteLength(ShortString)":"infinite","byteLengthWithFallback(ShortString,string storage pointer)":"infinite","toShortString(string memory)":"infinite","toShortStringWithFallback(string memory,string storage pointer)":"infinite","toString(ShortString)":"infinite","toStringWithFallback(ShortString,string storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205473f604a82d9e47e968680d3ced2e596d09ab38c519f3d3f546e0c1eca57aed64736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD PUSH20 0xF604A82D9E47E968680D3CED2E596D09AB38C519 RETURN 0xD3 CREATE2 CHAINID 0xE0 0xC1 0xEC 0xA5 PUSH27 0xED64736F6C63430008180033000000000000000000000000000000 ","sourceMap":"1245:2685:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205473f604a82d9e47e968680d3ced2e596d09ab38c519f3d3f546e0c1eca57aed64736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLOAD PUSH20 0xF604A82D9E47E968680D3CED2E596D09AB38C519 RETURN 0xD3 CREATE2 CHAINID 0xE0 0xC1 0xEC 0xA5 PUSH27 0xED64736F6C63430008180033000000000000000000000000000000 ","sourceMap":"1245:2685:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff1e058765945b0f4a0353413b93a8f53e5e0d240c40116d57cd087b472bbe4264736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0x1E SDIV DUP8 PUSH6 0x945B0F4A0353 COINBASE EXTCODESIZE SWAP4 0xA8 CREATE2 RETURNDATACOPY MCOPY 0xD 0x24 0xC BLOCKHASH GT PUSH14 0x57CD087B472BBE4264736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"251:2847:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff1e058765945b0f4a0353413b93a8f53e5e0d240c40116d57cd087b472bbe4264736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0x1E SDIV DUP8 PUSH6 0x945B0F4A0353 COINBASE EXTCODESIZE SWAP4 0xA8 CREATE2 RETURNDATACOPY MCOPY 0xD 0x24 0xC BLOCKHASH GT PUSH14 0x57CD087B472BBE4264736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"251:2847:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d2b06b988c5fd0518f18ffb73c62870dd1b81e480163ecb1ded4729d965032b864736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 0xB0 PUSH12 0x988C5FD0518F18FFB73C6287 0xD 0xD1 0xB8 0x1E BASEFEE ADD PUSH4 0xECB1DED4 PUSH19 0x9D965032B864736F6C63430008180033000000 ","sourceMap":"344:7386:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d2b06b988c5fd0518f18ffb73c62870dd1b81e480163ecb1ded4729d965032b864736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 0xB0 PUSH12 0x988C5FD0518F18FFB73C6287 0xD 0xD1 0xB8 0x1E BASEFEE ADD PUSH4 0xECB1DED4 PUSH19 0x9D965032B864736F6C63430008180033000000 ","sourceMap":"344:7386:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError,bytes32)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable","details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.","events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."},"eip712Domain()":{"details":"See {IERC-5267}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"eip712Domain()":"84b0196e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1702,"contract":"@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712","label":"_nameFallback","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1704,"contract":"@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712","label":"_versionFallback","offset":0,"slot":"1","type":"t_string_storage"}],"types":{"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol":{"MessageHashUtils":{"abi":[],"devdoc":{"details":"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220446498345e56e3eff2929fc88fd4be94a033b76e809725fb5ee7572bab41c91664736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO PUSH5 0x98345E56E3 0xEF CALLCODE SWAP3 SWAP16 0xC8 DUP16 0xD4 0xBE SWAP5 LOG0 CALLER 0xB7 PUSH15 0x809725FB5EE7572BAB41C91664736F PUSH13 0x63430008180033000000000000 ","sourceMap":"521:3235:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220446498345e56e3eff2929fc88fd4be94a033b76e809725fb5ee7572bab41c91664736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PREVRANDAO PUSH5 0x98345E56E3 0xEF CALLCODE SWAP3 SWAP16 0xC8 DUP16 0xD4 0xBE SWAP5 LOG0 CALLER 0xB7 PUSH15 0x809725FB5EE7572BAB41C91664736F PUSH13 0x63430008180033000000000000 ","sourceMap":"521:3235:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083904c22ff58551053b2d1165d14421e22451b994007ff32f007f9ab66f7ffb964736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 SWAP1 0x4C 0x22 SELFDESTRUCT PC SSTORE LT MSTORE8 0xB2 0xD1 AND TSTORE EQ TIMESTAMP 0x1E 0x22 GASLIMIT SHL SWAP10 BLOCKHASH SMOD SELFDESTRUCT ORIGIN CREATE SMOD 0xF9 0xAB PUSH7 0xF7FFB964736F6C PUSH4 0x43000818 STOP CALLER ","sourceMap":"203:14914:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083904c22ff58551053b2d1165d14421e22451b994007ff32f007f9ab66f7ffb964736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 SWAP1 0x4C 0x22 SELFDESTRUCT PC SSTORE LT MSTORE8 0xB2 0xD1 AND TSTORE EQ TIMESTAMP 0x1E 0x22 GASLIMIT SHL SWAP10 BLOCKHASH SMOD SELFDESTRUCT ORIGIN CREATE SMOD 0xF9 0xAB PUSH7 0xF7FFB964736F6C PUSH4 0x43000818 STOP CALLER ","sourceMap":"203:14914:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220382a5543c9235e574f11d0c034a9aac0dd301c8091120a6198ca75c96f85459864736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0x2A SSTORE NUMBER 0xC9 0x23 MCOPY JUMPI 0x4F GT 0xD0 0xC0 CALLVALUE 0xA9 0xAA 0xC0 0xDD ADDRESS SHR DUP1 SWAP2 SLT EXP PUSH2 0x98CA PUSH22 0xC96F85459864736F6C63430008180033000000000000 ","sourceMap":"216:1047:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220382a5543c9235e574f11d0c034a9aac0dd301c8091120a6198ca75c96f85459864736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0x2A SSTORE NUMBER 0xC9 0x23 MCOPY JUMPI 0x4F GT 0xD0 0xC0 CALLVALUE 0xA9 0xAA 0xC0 0xDD ADDRESS SHR DUP1 SWAP2 SLT EXP PUSH2 0x98CA PUSH22 0xC96F85459864736F6C63430008180033000000000000 ","sourceMap":"216:1047:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Payfluence.sol":{"Payfluence":{"abi":[{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AirdropAlreadyClaimed","type":"error"},{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"address","name":"token","type":"address"}],"name":"AssetNotFound","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"AssetTypeNotFoundForToken","type":"error"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[{"internalType":"enum TokenReceiver.AssetType","name":"assetType","type":"uint8"}],"name":"InvalidAssetType","type":"error"},{"inputs":[],"name":"InvalidShortString","type":"error"},{"inputs":[],"name":"InvalidSigner","type":"error"},{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"enum TokenReceiver.AssetType","name":"assetType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NotEnoughFunds","type":"error"},{"inputs":[],"name":"OnlyAirdropOwner","type":"error"},{"inputs":[],"name":"OnlyTokenOwner","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"string","name":"str","type":"string"}],"name":"StringTooLong","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferNativeFailed","type":"error"},{"anonymous":false,"inputs":[],"name":"EIP712DomainChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ERC1155BatchReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenIds","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amounts","type":"uint256"}],"name":"ERC1155Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NativeReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_airdropId","type":"string"},{"internalType":"address","name":"_newOwner","type":"address"}],"name":"adminTransferAirdropOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"string","name":"_airdropId","type":"string"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"adminWithdrawERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"adminWithdrawNative","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"airdropId","type":"string"},{"internalType":"address","name":"recipient","type":"address"}],"name":"airdropClaimedAmounts","outputs":[{"internalType":"uint256","name":"amountClaimed","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"airdropId","type":"string"}],"name":"airdropOwners","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"string","name":"airdropId","type":"string"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountClaimable","type":"uint256"}],"internalType":"struct Payfluence.AirdropMessage","name":"airdropMessage","type":"tuple"}],"name":"claimAirdrop","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"id","type":"string"}],"name":"contractBalance","outputs":[{"internalType":"uint256","name":"native","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_airdropId","type":"string"},{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"fundERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"fundNative","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"address","name":"token","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_adminAddress","type":"address"}],"name":"setAdminAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"signature","type":"bytes"},{"components":[{"internalType":"string","name":"airdropId","type":"string"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amountClaimable","type":"uint256"}],"internalType":"struct Payfluence.AirdropMessage","name":"airdropMessage","type":"tuple"}],"name":"verify","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_airdropId","type":"string"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdrawERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"EIP712DomainChanged()":{"details":"MAY be emitted to signal that the domain could have changed."}},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"eip712Domain()":{"details":"See {IERC-5267}."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1762":{"entryPoint":null,"id":1762,"parameterSlots":2,"returnSlots":0},"@_3249":{"entryPoint":null,"id":3249,"parameterSlots":1,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_688":{"entryPoint":null,"id":688,"parameterSlots":0,"returnSlots":0},"@_buildDomainSeparator_1809":{"entryPoint":706,"id":1809,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_146":{"entryPoint":799,"id":146,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_208":{"entryPoint":561,"id":208,"parameterSlots":1,"returnSlots":0},"@getStringSlot_1039":{"entryPoint":1104,"id":1039,"parameterSlots":1,"returnSlots":1},"@toShortStringWithFallback_893":{"entryPoint":618,"id":893,"parameterSlots":2,"returnSlots":1},"@toShortString_795":{"entryPoint":995,"id":795,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":1197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":1220,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1270,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":2191,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2396,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2208,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1287,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":2225,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2461,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_bytes_memory_ptr":{"entryPoint":2508,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1474,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":2497,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1316,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2318,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1795,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":1151,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2181,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1119,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1610,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1756,"id":null,"parameterSlots":2,"returnSlots":0},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32":{"entryPoint":2547,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":1630,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1950,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":2335,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1495,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1421,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1920,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":1620,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1888,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":1374,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1327,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1670,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_memoryt_bytes32":{"entryPoint":2524,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1114,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2379,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":1511,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1875,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1728,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1524,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1680,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1171,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1723,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:10002:21","nodeType":"YulBlock","src":"0:10002:21","statements":[{"body":{"nativeSrc":"47:35:21","nodeType":"YulBlock","src":"47:35:21","statements":[{"nativeSrc":"57:19:21","nodeType":"YulAssignment","src":"57:19:21","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:21","nodeType":"YulLiteral","src":"73:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:21","nodeType":"YulIdentifier","src":"67:5:21"},"nativeSrc":"67:9:21","nodeType":"YulFunctionCall","src":"67:9:21"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:21","nodeType":"YulIdentifier","src":"57:6:21"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:21","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:21","nodeType":"YulTypedName","src":"40:6:21","type":""}],"src":"7:75:21"},{"body":{"nativeSrc":"177:28:21","nodeType":"YulBlock","src":"177:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:21","nodeType":"YulLiteral","src":"194:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:21","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:21","nodeType":"YulIdentifier","src":"187:6:21"},"nativeSrc":"187:12:21","nodeType":"YulFunctionCall","src":"187:12:21"},"nativeSrc":"187:12:21","nodeType":"YulExpressionStatement","src":"187:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:21","nodeType":"YulFunctionDefinition","src":"88:117:21"},{"body":{"nativeSrc":"300:28:21","nodeType":"YulBlock","src":"300:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:21","nodeType":"YulLiteral","src":"317:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:21","nodeType":"YulLiteral","src":"320:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:21","nodeType":"YulIdentifier","src":"310:6:21"},"nativeSrc":"310:12:21","nodeType":"YulFunctionCall","src":"310:12:21"},"nativeSrc":"310:12:21","nodeType":"YulExpressionStatement","src":"310:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:21","nodeType":"YulFunctionDefinition","src":"211:117:21"},{"body":{"nativeSrc":"379:81:21","nodeType":"YulBlock","src":"379:81:21","statements":[{"nativeSrc":"389:65:21","nodeType":"YulAssignment","src":"389:65:21","value":{"arguments":[{"name":"value","nativeSrc":"404:5:21","nodeType":"YulIdentifier","src":"404:5:21"},{"kind":"number","nativeSrc":"411:42:21","nodeType":"YulLiteral","src":"411:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:21","nodeType":"YulIdentifier","src":"400:3:21"},"nativeSrc":"400:54:21","nodeType":"YulFunctionCall","src":"400:54:21"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:21","nodeType":"YulIdentifier","src":"389:7:21"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:21","nodeType":"YulTypedName","src":"361:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:21","nodeType":"YulTypedName","src":"371:7:21","type":""}],"src":"334:126:21"},{"body":{"nativeSrc":"511:51:21","nodeType":"YulBlock","src":"511:51:21","statements":[{"nativeSrc":"521:35:21","nodeType":"YulAssignment","src":"521:35:21","value":{"arguments":[{"name":"value","nativeSrc":"550:5:21","nodeType":"YulIdentifier","src":"550:5:21"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:21","nodeType":"YulIdentifier","src":"532:17:21"},"nativeSrc":"532:24:21","nodeType":"YulFunctionCall","src":"532:24:21"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:21","nodeType":"YulIdentifier","src":"521:7:21"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:21","nodeType":"YulTypedName","src":"493:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:21","nodeType":"YulTypedName","src":"503:7:21","type":""}],"src":"466:96:21"},{"body":{"nativeSrc":"611:79:21","nodeType":"YulBlock","src":"611:79:21","statements":[{"body":{"nativeSrc":"668:16:21","nodeType":"YulBlock","src":"668:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:21","nodeType":"YulLiteral","src":"677:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:21","nodeType":"YulLiteral","src":"680:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:21","nodeType":"YulIdentifier","src":"670:6:21"},"nativeSrc":"670:12:21","nodeType":"YulFunctionCall","src":"670:12:21"},"nativeSrc":"670:12:21","nodeType":"YulExpressionStatement","src":"670:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:21","nodeType":"YulIdentifier","src":"634:5:21"},{"arguments":[{"name":"value","nativeSrc":"659:5:21","nodeType":"YulIdentifier","src":"659:5:21"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:21","nodeType":"YulIdentifier","src":"641:17:21"},"nativeSrc":"641:24:21","nodeType":"YulFunctionCall","src":"641:24:21"}],"functionName":{"name":"eq","nativeSrc":"631:2:21","nodeType":"YulIdentifier","src":"631:2:21"},"nativeSrc":"631:35:21","nodeType":"YulFunctionCall","src":"631:35:21"}],"functionName":{"name":"iszero","nativeSrc":"624:6:21","nodeType":"YulIdentifier","src":"624:6:21"},"nativeSrc":"624:43:21","nodeType":"YulFunctionCall","src":"624:43:21"},"nativeSrc":"621:63:21","nodeType":"YulIf","src":"621:63:21"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:21","nodeType":"YulTypedName","src":"604:5:21","type":""}],"src":"568:122:21"},{"body":{"nativeSrc":"759:80:21","nodeType":"YulBlock","src":"759:80:21","statements":[{"nativeSrc":"769:22:21","nodeType":"YulAssignment","src":"769:22:21","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:21","nodeType":"YulIdentifier","src":"784:6:21"}],"functionName":{"name":"mload","nativeSrc":"778:5:21","nodeType":"YulIdentifier","src":"778:5:21"},"nativeSrc":"778:13:21","nodeType":"YulFunctionCall","src":"778:13:21"},"variableNames":[{"name":"value","nativeSrc":"769:5:21","nodeType":"YulIdentifier","src":"769:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:21","nodeType":"YulIdentifier","src":"827:5:21"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:21","nodeType":"YulIdentifier","src":"800:26:21"},"nativeSrc":"800:33:21","nodeType":"YulFunctionCall","src":"800:33:21"},"nativeSrc":"800:33:21","nodeType":"YulExpressionStatement","src":"800:33:21"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:21","nodeType":"YulTypedName","src":"737:6:21","type":""},{"name":"end","nativeSrc":"745:3:21","nodeType":"YulTypedName","src":"745:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:21","nodeType":"YulTypedName","src":"753:5:21","type":""}],"src":"696:143:21"},{"body":{"nativeSrc":"922:274:21","nodeType":"YulBlock","src":"922:274:21","statements":[{"body":{"nativeSrc":"968:83:21","nodeType":"YulBlock","src":"968:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"970:77:21","nodeType":"YulIdentifier","src":"970:77:21"},"nativeSrc":"970:79:21","nodeType":"YulFunctionCall","src":"970:79:21"},"nativeSrc":"970:79:21","nodeType":"YulExpressionStatement","src":"970:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"943:7:21","nodeType":"YulIdentifier","src":"943:7:21"},{"name":"headStart","nativeSrc":"952:9:21","nodeType":"YulIdentifier","src":"952:9:21"}],"functionName":{"name":"sub","nativeSrc":"939:3:21","nodeType":"YulIdentifier","src":"939:3:21"},"nativeSrc":"939:23:21","nodeType":"YulFunctionCall","src":"939:23:21"},{"kind":"number","nativeSrc":"964:2:21","nodeType":"YulLiteral","src":"964:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"935:3:21","nodeType":"YulIdentifier","src":"935:3:21"},"nativeSrc":"935:32:21","nodeType":"YulFunctionCall","src":"935:32:21"},"nativeSrc":"932:119:21","nodeType":"YulIf","src":"932:119:21"},{"nativeSrc":"1061:128:21","nodeType":"YulBlock","src":"1061:128:21","statements":[{"nativeSrc":"1076:15:21","nodeType":"YulVariableDeclaration","src":"1076:15:21","value":{"kind":"number","nativeSrc":"1090:1:21","nodeType":"YulLiteral","src":"1090:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"1080:6:21","nodeType":"YulTypedName","src":"1080:6:21","type":""}]},{"nativeSrc":"1105:74:21","nodeType":"YulAssignment","src":"1105:74:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1151:9:21","nodeType":"YulIdentifier","src":"1151:9:21"},{"name":"offset","nativeSrc":"1162:6:21","nodeType":"YulIdentifier","src":"1162:6:21"}],"functionName":{"name":"add","nativeSrc":"1147:3:21","nodeType":"YulIdentifier","src":"1147:3:21"},"nativeSrc":"1147:22:21","nodeType":"YulFunctionCall","src":"1147:22:21"},{"name":"dataEnd","nativeSrc":"1171:7:21","nodeType":"YulIdentifier","src":"1171:7:21"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"1115:31:21","nodeType":"YulIdentifier","src":"1115:31:21"},"nativeSrc":"1115:64:21","nodeType":"YulFunctionCall","src":"1115:64:21"},"variableNames":[{"name":"value0","nativeSrc":"1105:6:21","nodeType":"YulIdentifier","src":"1105:6:21"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nativeSrc":"845:351:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"892:9:21","nodeType":"YulTypedName","src":"892:9:21","type":""},{"name":"dataEnd","nativeSrc":"903:7:21","nodeType":"YulTypedName","src":"903:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"915:6:21","nodeType":"YulTypedName","src":"915:6:21","type":""}],"src":"845:351:21"},{"body":{"nativeSrc":"1267:53:21","nodeType":"YulBlock","src":"1267:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1284:3:21","nodeType":"YulIdentifier","src":"1284:3:21"},{"arguments":[{"name":"value","nativeSrc":"1307:5:21","nodeType":"YulIdentifier","src":"1307:5:21"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"1289:17:21","nodeType":"YulIdentifier","src":"1289:17:21"},"nativeSrc":"1289:24:21","nodeType":"YulFunctionCall","src":"1289:24:21"}],"functionName":{"name":"mstore","nativeSrc":"1277:6:21","nodeType":"YulIdentifier","src":"1277:6:21"},"nativeSrc":"1277:37:21","nodeType":"YulFunctionCall","src":"1277:37:21"},"nativeSrc":"1277:37:21","nodeType":"YulExpressionStatement","src":"1277:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1202:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1255:5:21","nodeType":"YulTypedName","src":"1255:5:21","type":""},{"name":"pos","nativeSrc":"1262:3:21","nodeType":"YulTypedName","src":"1262:3:21","type":""}],"src":"1202:118:21"},{"body":{"nativeSrc":"1424:124:21","nodeType":"YulBlock","src":"1424:124:21","statements":[{"nativeSrc":"1434:26:21","nodeType":"YulAssignment","src":"1434:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"1446:9:21","nodeType":"YulIdentifier","src":"1446:9:21"},{"kind":"number","nativeSrc":"1457:2:21","nodeType":"YulLiteral","src":"1457:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1442:3:21","nodeType":"YulIdentifier","src":"1442:3:21"},"nativeSrc":"1442:18:21","nodeType":"YulFunctionCall","src":"1442:18:21"},"variableNames":[{"name":"tail","nativeSrc":"1434:4:21","nodeType":"YulIdentifier","src":"1434:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1514:6:21","nodeType":"YulIdentifier","src":"1514:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"1527:9:21","nodeType":"YulIdentifier","src":"1527:9:21"},{"kind":"number","nativeSrc":"1538:1:21","nodeType":"YulLiteral","src":"1538:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1523:3:21","nodeType":"YulIdentifier","src":"1523:3:21"},"nativeSrc":"1523:17:21","nodeType":"YulFunctionCall","src":"1523:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"1470:43:21","nodeType":"YulIdentifier","src":"1470:43:21"},"nativeSrc":"1470:71:21","nodeType":"YulFunctionCall","src":"1470:71:21"},"nativeSrc":"1470:71:21","nodeType":"YulExpressionStatement","src":"1470:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1326:222:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1396:9:21","nodeType":"YulTypedName","src":"1396:9:21","type":""},{"name":"value0","nativeSrc":"1408:6:21","nodeType":"YulTypedName","src":"1408:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1419:4:21","nodeType":"YulTypedName","src":"1419:4:21","type":""}],"src":"1326:222:21"},{"body":{"nativeSrc":"1613:40:21","nodeType":"YulBlock","src":"1613:40:21","statements":[{"nativeSrc":"1624:22:21","nodeType":"YulAssignment","src":"1624:22:21","value":{"arguments":[{"name":"value","nativeSrc":"1640:5:21","nodeType":"YulIdentifier","src":"1640:5:21"}],"functionName":{"name":"mload","nativeSrc":"1634:5:21","nodeType":"YulIdentifier","src":"1634:5:21"},"nativeSrc":"1634:12:21","nodeType":"YulFunctionCall","src":"1634:12:21"},"variableNames":[{"name":"length","nativeSrc":"1624:6:21","nodeType":"YulIdentifier","src":"1624:6:21"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1554:99:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1596:5:21","nodeType":"YulTypedName","src":"1596:5:21","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1606:6:21","nodeType":"YulTypedName","src":"1606:6:21","type":""}],"src":"1554:99:21"},{"body":{"nativeSrc":"1687:152:21","nodeType":"YulBlock","src":"1687:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1704:1:21","nodeType":"YulLiteral","src":"1704:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1707:77:21","nodeType":"YulLiteral","src":"1707:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1697:6:21","nodeType":"YulIdentifier","src":"1697:6:21"},"nativeSrc":"1697:88:21","nodeType":"YulFunctionCall","src":"1697:88:21"},"nativeSrc":"1697:88:21","nodeType":"YulExpressionStatement","src":"1697:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1801:1:21","nodeType":"YulLiteral","src":"1801:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"1804:4:21","nodeType":"YulLiteral","src":"1804:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"1794:6:21","nodeType":"YulIdentifier","src":"1794:6:21"},"nativeSrc":"1794:15:21","nodeType":"YulFunctionCall","src":"1794:15:21"},"nativeSrc":"1794:15:21","nodeType":"YulExpressionStatement","src":"1794:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1825:1:21","nodeType":"YulLiteral","src":"1825:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1828:4:21","nodeType":"YulLiteral","src":"1828:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1818:6:21","nodeType":"YulIdentifier","src":"1818:6:21"},"nativeSrc":"1818:15:21","nodeType":"YulFunctionCall","src":"1818:15:21"},"nativeSrc":"1818:15:21","nodeType":"YulExpressionStatement","src":"1818:15:21"}]},"name":"panic_error_0x41","nativeSrc":"1659:180:21","nodeType":"YulFunctionDefinition","src":"1659:180:21"},{"body":{"nativeSrc":"1873:152:21","nodeType":"YulBlock","src":"1873:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1890:1:21","nodeType":"YulLiteral","src":"1890:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1893:77:21","nodeType":"YulLiteral","src":"1893:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1883:6:21","nodeType":"YulIdentifier","src":"1883:6:21"},"nativeSrc":"1883:88:21","nodeType":"YulFunctionCall","src":"1883:88:21"},"nativeSrc":"1883:88:21","nodeType":"YulExpressionStatement","src":"1883:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1987:1:21","nodeType":"YulLiteral","src":"1987:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"1990:4:21","nodeType":"YulLiteral","src":"1990:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"1980:6:21","nodeType":"YulIdentifier","src":"1980:6:21"},"nativeSrc":"1980:15:21","nodeType":"YulFunctionCall","src":"1980:15:21"},"nativeSrc":"1980:15:21","nodeType":"YulExpressionStatement","src":"1980:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2011:1:21","nodeType":"YulLiteral","src":"2011:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2014:4:21","nodeType":"YulLiteral","src":"2014:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2004:6:21","nodeType":"YulIdentifier","src":"2004:6:21"},"nativeSrc":"2004:15:21","nodeType":"YulFunctionCall","src":"2004:15:21"},"nativeSrc":"2004:15:21","nodeType":"YulExpressionStatement","src":"2004:15:21"}]},"name":"panic_error_0x22","nativeSrc":"1845:180:21","nodeType":"YulFunctionDefinition","src":"1845:180:21"},{"body":{"nativeSrc":"2082:269:21","nodeType":"YulBlock","src":"2082:269:21","statements":[{"nativeSrc":"2092:22:21","nodeType":"YulAssignment","src":"2092:22:21","value":{"arguments":[{"name":"data","nativeSrc":"2106:4:21","nodeType":"YulIdentifier","src":"2106:4:21"},{"kind":"number","nativeSrc":"2112:1:21","nodeType":"YulLiteral","src":"2112:1:21","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"2102:3:21","nodeType":"YulIdentifier","src":"2102:3:21"},"nativeSrc":"2102:12:21","nodeType":"YulFunctionCall","src":"2102:12:21"},"variableNames":[{"name":"length","nativeSrc":"2092:6:21","nodeType":"YulIdentifier","src":"2092:6:21"}]},{"nativeSrc":"2123:38:21","nodeType":"YulVariableDeclaration","src":"2123:38:21","value":{"arguments":[{"name":"data","nativeSrc":"2153:4:21","nodeType":"YulIdentifier","src":"2153:4:21"},{"kind":"number","nativeSrc":"2159:1:21","nodeType":"YulLiteral","src":"2159:1:21","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2149:3:21","nodeType":"YulIdentifier","src":"2149:3:21"},"nativeSrc":"2149:12:21","nodeType":"YulFunctionCall","src":"2149:12:21"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2127:18:21","nodeType":"YulTypedName","src":"2127:18:21","type":""}]},{"body":{"nativeSrc":"2200:51:21","nodeType":"YulBlock","src":"2200:51:21","statements":[{"nativeSrc":"2214:27:21","nodeType":"YulAssignment","src":"2214:27:21","value":{"arguments":[{"name":"length","nativeSrc":"2228:6:21","nodeType":"YulIdentifier","src":"2228:6:21"},{"kind":"number","nativeSrc":"2236:4:21","nodeType":"YulLiteral","src":"2236:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2224:3:21","nodeType":"YulIdentifier","src":"2224:3:21"},"nativeSrc":"2224:17:21","nodeType":"YulFunctionCall","src":"2224:17:21"},"variableNames":[{"name":"length","nativeSrc":"2214:6:21","nodeType":"YulIdentifier","src":"2214:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2180:18:21","nodeType":"YulIdentifier","src":"2180:18:21"}],"functionName":{"name":"iszero","nativeSrc":"2173:6:21","nodeType":"YulIdentifier","src":"2173:6:21"},"nativeSrc":"2173:26:21","nodeType":"YulFunctionCall","src":"2173:26:21"},"nativeSrc":"2170:81:21","nodeType":"YulIf","src":"2170:81:21"},{"body":{"nativeSrc":"2303:42:21","nodeType":"YulBlock","src":"2303:42:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"2317:16:21","nodeType":"YulIdentifier","src":"2317:16:21"},"nativeSrc":"2317:18:21","nodeType":"YulFunctionCall","src":"2317:18:21"},"nativeSrc":"2317:18:21","nodeType":"YulExpressionStatement","src":"2317:18:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2267:18:21","nodeType":"YulIdentifier","src":"2267:18:21"},{"arguments":[{"name":"length","nativeSrc":"2290:6:21","nodeType":"YulIdentifier","src":"2290:6:21"},{"kind":"number","nativeSrc":"2298:2:21","nodeType":"YulLiteral","src":"2298:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2287:2:21","nodeType":"YulIdentifier","src":"2287:2:21"},"nativeSrc":"2287:14:21","nodeType":"YulFunctionCall","src":"2287:14:21"}],"functionName":{"name":"eq","nativeSrc":"2264:2:21","nodeType":"YulIdentifier","src":"2264:2:21"},"nativeSrc":"2264:38:21","nodeType":"YulFunctionCall","src":"2264:38:21"},"nativeSrc":"2261:84:21","nodeType":"YulIf","src":"2261:84:21"}]},"name":"extract_byte_array_length","nativeSrc":"2031:320:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2066:4:21","nodeType":"YulTypedName","src":"2066:4:21","type":""}],"returnVariables":[{"name":"length","nativeSrc":"2075:6:21","nodeType":"YulTypedName","src":"2075:6:21","type":""}],"src":"2031:320:21"},{"body":{"nativeSrc":"2411:87:21","nodeType":"YulBlock","src":"2411:87:21","statements":[{"nativeSrc":"2421:11:21","nodeType":"YulAssignment","src":"2421:11:21","value":{"name":"ptr","nativeSrc":"2429:3:21","nodeType":"YulIdentifier","src":"2429:3:21"},"variableNames":[{"name":"data","nativeSrc":"2421:4:21","nodeType":"YulIdentifier","src":"2421:4:21"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2449:1:21","nodeType":"YulLiteral","src":"2449:1:21","type":"","value":"0"},{"name":"ptr","nativeSrc":"2452:3:21","nodeType":"YulIdentifier","src":"2452:3:21"}],"functionName":{"name":"mstore","nativeSrc":"2442:6:21","nodeType":"YulIdentifier","src":"2442:6:21"},"nativeSrc":"2442:14:21","nodeType":"YulFunctionCall","src":"2442:14:21"},"nativeSrc":"2442:14:21","nodeType":"YulExpressionStatement","src":"2442:14:21"},{"nativeSrc":"2465:26:21","nodeType":"YulAssignment","src":"2465:26:21","value":{"arguments":[{"kind":"number","nativeSrc":"2483:1:21","nodeType":"YulLiteral","src":"2483:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2486:4:21","nodeType":"YulLiteral","src":"2486:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"2473:9:21","nodeType":"YulIdentifier","src":"2473:9:21"},"nativeSrc":"2473:18:21","nodeType":"YulFunctionCall","src":"2473:18:21"},"variableNames":[{"name":"data","nativeSrc":"2465:4:21","nodeType":"YulIdentifier","src":"2465:4:21"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"2357:141:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"2398:3:21","nodeType":"YulTypedName","src":"2398:3:21","type":""}],"returnVariables":[{"name":"data","nativeSrc":"2406:4:21","nodeType":"YulTypedName","src":"2406:4:21","type":""}],"src":"2357:141:21"},{"body":{"nativeSrc":"2548:49:21","nodeType":"YulBlock","src":"2548:49:21","statements":[{"nativeSrc":"2558:33:21","nodeType":"YulAssignment","src":"2558:33:21","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2576:5:21","nodeType":"YulIdentifier","src":"2576:5:21"},{"kind":"number","nativeSrc":"2583:2:21","nodeType":"YulLiteral","src":"2583:2:21","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2572:3:21","nodeType":"YulIdentifier","src":"2572:3:21"},"nativeSrc":"2572:14:21","nodeType":"YulFunctionCall","src":"2572:14:21"},{"kind":"number","nativeSrc":"2588:2:21","nodeType":"YulLiteral","src":"2588:2:21","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"2568:3:21","nodeType":"YulIdentifier","src":"2568:3:21"},"nativeSrc":"2568:23:21","nodeType":"YulFunctionCall","src":"2568:23:21"},"variableNames":[{"name":"result","nativeSrc":"2558:6:21","nodeType":"YulIdentifier","src":"2558:6:21"}]}]},"name":"divide_by_32_ceil","nativeSrc":"2504:93:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2531:5:21","nodeType":"YulTypedName","src":"2531:5:21","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2541:6:21","nodeType":"YulTypedName","src":"2541:6:21","type":""}],"src":"2504:93:21"},{"body":{"nativeSrc":"2656:54:21","nodeType":"YulBlock","src":"2656:54:21","statements":[{"nativeSrc":"2666:37:21","nodeType":"YulAssignment","src":"2666:37:21","value":{"arguments":[{"name":"bits","nativeSrc":"2691:4:21","nodeType":"YulIdentifier","src":"2691:4:21"},{"name":"value","nativeSrc":"2697:5:21","nodeType":"YulIdentifier","src":"2697:5:21"}],"functionName":{"name":"shl","nativeSrc":"2687:3:21","nodeType":"YulIdentifier","src":"2687:3:21"},"nativeSrc":"2687:16:21","nodeType":"YulFunctionCall","src":"2687:16:21"},"variableNames":[{"name":"newValue","nativeSrc":"2666:8:21","nodeType":"YulIdentifier","src":"2666:8:21"}]}]},"name":"shift_left_dynamic","nativeSrc":"2603:107:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"2631:4:21","nodeType":"YulTypedName","src":"2631:4:21","type":""},{"name":"value","nativeSrc":"2637:5:21","nodeType":"YulTypedName","src":"2637:5:21","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"2647:8:21","nodeType":"YulTypedName","src":"2647:8:21","type":""}],"src":"2603:107:21"},{"body":{"nativeSrc":"2792:317:21","nodeType":"YulBlock","src":"2792:317:21","statements":[{"nativeSrc":"2802:35:21","nodeType":"YulVariableDeclaration","src":"2802:35:21","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"2823:10:21","nodeType":"YulIdentifier","src":"2823:10:21"},{"kind":"number","nativeSrc":"2835:1:21","nodeType":"YulLiteral","src":"2835:1:21","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"2819:3:21","nodeType":"YulIdentifier","src":"2819:3:21"},"nativeSrc":"2819:18:21","nodeType":"YulFunctionCall","src":"2819:18:21"},"variables":[{"name":"shiftBits","nativeSrc":"2806:9:21","nodeType":"YulTypedName","src":"2806:9:21","type":""}]},{"nativeSrc":"2846:109:21","nodeType":"YulVariableDeclaration","src":"2846:109:21","value":{"arguments":[{"name":"shiftBits","nativeSrc":"2877:9:21","nodeType":"YulIdentifier","src":"2877:9:21"},{"kind":"number","nativeSrc":"2888:66:21","nodeType":"YulLiteral","src":"2888:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"2858:18:21","nodeType":"YulIdentifier","src":"2858:18:21"},"nativeSrc":"2858:97:21","nodeType":"YulFunctionCall","src":"2858:97:21"},"variables":[{"name":"mask","nativeSrc":"2850:4:21","nodeType":"YulTypedName","src":"2850:4:21","type":""}]},{"nativeSrc":"2964:51:21","nodeType":"YulAssignment","src":"2964:51:21","value":{"arguments":[{"name":"shiftBits","nativeSrc":"2995:9:21","nodeType":"YulIdentifier","src":"2995:9:21"},{"name":"toInsert","nativeSrc":"3006:8:21","nodeType":"YulIdentifier","src":"3006:8:21"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"2976:18:21","nodeType":"YulIdentifier","src":"2976:18:21"},"nativeSrc":"2976:39:21","nodeType":"YulFunctionCall","src":"2976:39:21"},"variableNames":[{"name":"toInsert","nativeSrc":"2964:8:21","nodeType":"YulIdentifier","src":"2964:8:21"}]},{"nativeSrc":"3024:30:21","nodeType":"YulAssignment","src":"3024:30:21","value":{"arguments":[{"name":"value","nativeSrc":"3037:5:21","nodeType":"YulIdentifier","src":"3037:5:21"},{"arguments":[{"name":"mask","nativeSrc":"3048:4:21","nodeType":"YulIdentifier","src":"3048:4:21"}],"functionName":{"name":"not","nativeSrc":"3044:3:21","nodeType":"YulIdentifier","src":"3044:3:21"},"nativeSrc":"3044:9:21","nodeType":"YulFunctionCall","src":"3044:9:21"}],"functionName":{"name":"and","nativeSrc":"3033:3:21","nodeType":"YulIdentifier","src":"3033:3:21"},"nativeSrc":"3033:21:21","nodeType":"YulFunctionCall","src":"3033:21:21"},"variableNames":[{"name":"value","nativeSrc":"3024:5:21","nodeType":"YulIdentifier","src":"3024:5:21"}]},{"nativeSrc":"3063:40:21","nodeType":"YulAssignment","src":"3063:40:21","value":{"arguments":[{"name":"value","nativeSrc":"3076:5:21","nodeType":"YulIdentifier","src":"3076:5:21"},{"arguments":[{"name":"toInsert","nativeSrc":"3087:8:21","nodeType":"YulIdentifier","src":"3087:8:21"},{"name":"mask","nativeSrc":"3097:4:21","nodeType":"YulIdentifier","src":"3097:4:21"}],"functionName":{"name":"and","nativeSrc":"3083:3:21","nodeType":"YulIdentifier","src":"3083:3:21"},"nativeSrc":"3083:19:21","nodeType":"YulFunctionCall","src":"3083:19:21"}],"functionName":{"name":"or","nativeSrc":"3073:2:21","nodeType":"YulIdentifier","src":"3073:2:21"},"nativeSrc":"3073:30:21","nodeType":"YulFunctionCall","src":"3073:30:21"},"variableNames":[{"name":"result","nativeSrc":"3063:6:21","nodeType":"YulIdentifier","src":"3063:6:21"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"2716:393:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2753:5:21","nodeType":"YulTypedName","src":"2753:5:21","type":""},{"name":"shiftBytes","nativeSrc":"2760:10:21","nodeType":"YulTypedName","src":"2760:10:21","type":""},{"name":"toInsert","nativeSrc":"2772:8:21","nodeType":"YulTypedName","src":"2772:8:21","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2785:6:21","nodeType":"YulTypedName","src":"2785:6:21","type":""}],"src":"2716:393:21"},{"body":{"nativeSrc":"3160:32:21","nodeType":"YulBlock","src":"3160:32:21","statements":[{"nativeSrc":"3170:16:21","nodeType":"YulAssignment","src":"3170:16:21","value":{"name":"value","nativeSrc":"3181:5:21","nodeType":"YulIdentifier","src":"3181:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"3170:7:21","nodeType":"YulIdentifier","src":"3170:7:21"}]}]},"name":"cleanup_t_uint256","nativeSrc":"3115:77:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3142:5:21","nodeType":"YulTypedName","src":"3142:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3152:7:21","nodeType":"YulTypedName","src":"3152:7:21","type":""}],"src":"3115:77:21"},{"body":{"nativeSrc":"3230:28:21","nodeType":"YulBlock","src":"3230:28:21","statements":[{"nativeSrc":"3240:12:21","nodeType":"YulAssignment","src":"3240:12:21","value":{"name":"value","nativeSrc":"3247:5:21","nodeType":"YulIdentifier","src":"3247:5:21"},"variableNames":[{"name":"ret","nativeSrc":"3240:3:21","nodeType":"YulIdentifier","src":"3240:3:21"}]}]},"name":"identity","nativeSrc":"3198:60:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3216:5:21","nodeType":"YulTypedName","src":"3216:5:21","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"3226:3:21","nodeType":"YulTypedName","src":"3226:3:21","type":""}],"src":"3198:60:21"},{"body":{"nativeSrc":"3324:82:21","nodeType":"YulBlock","src":"3324:82:21","statements":[{"nativeSrc":"3334:66:21","nodeType":"YulAssignment","src":"3334:66:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3392:5:21","nodeType":"YulIdentifier","src":"3392:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3374:17:21","nodeType":"YulIdentifier","src":"3374:17:21"},"nativeSrc":"3374:24:21","nodeType":"YulFunctionCall","src":"3374:24:21"}],"functionName":{"name":"identity","nativeSrc":"3365:8:21","nodeType":"YulIdentifier","src":"3365:8:21"},"nativeSrc":"3365:34:21","nodeType":"YulFunctionCall","src":"3365:34:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3347:17:21","nodeType":"YulIdentifier","src":"3347:17:21"},"nativeSrc":"3347:53:21","nodeType":"YulFunctionCall","src":"3347:53:21"},"variableNames":[{"name":"converted","nativeSrc":"3334:9:21","nodeType":"YulIdentifier","src":"3334:9:21"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"3264:142:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3304:5:21","nodeType":"YulTypedName","src":"3304:5:21","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"3314:9:21","nodeType":"YulTypedName","src":"3314:9:21","type":""}],"src":"3264:142:21"},{"body":{"nativeSrc":"3459:28:21","nodeType":"YulBlock","src":"3459:28:21","statements":[{"nativeSrc":"3469:12:21","nodeType":"YulAssignment","src":"3469:12:21","value":{"name":"value","nativeSrc":"3476:5:21","nodeType":"YulIdentifier","src":"3476:5:21"},"variableNames":[{"name":"ret","nativeSrc":"3469:3:21","nodeType":"YulIdentifier","src":"3469:3:21"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"3412:75:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3445:5:21","nodeType":"YulTypedName","src":"3445:5:21","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"3455:3:21","nodeType":"YulTypedName","src":"3455:3:21","type":""}],"src":"3412:75:21"},{"body":{"nativeSrc":"3569:193:21","nodeType":"YulBlock","src":"3569:193:21","statements":[{"nativeSrc":"3579:63:21","nodeType":"YulVariableDeclaration","src":"3579:63:21","value":{"arguments":[{"name":"value_0","nativeSrc":"3634:7:21","nodeType":"YulIdentifier","src":"3634:7:21"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"3603:30:21","nodeType":"YulIdentifier","src":"3603:30:21"},"nativeSrc":"3603:39:21","nodeType":"YulFunctionCall","src":"3603:39:21"},"variables":[{"name":"convertedValue_0","nativeSrc":"3583:16:21","nodeType":"YulTypedName","src":"3583:16:21","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3658:4:21","nodeType":"YulIdentifier","src":"3658:4:21"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"3698:4:21","nodeType":"YulIdentifier","src":"3698:4:21"}],"functionName":{"name":"sload","nativeSrc":"3692:5:21","nodeType":"YulIdentifier","src":"3692:5:21"},"nativeSrc":"3692:11:21","nodeType":"YulFunctionCall","src":"3692:11:21"},{"name":"offset","nativeSrc":"3705:6:21","nodeType":"YulIdentifier","src":"3705:6:21"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"3737:16:21","nodeType":"YulIdentifier","src":"3737:16:21"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"3713:23:21","nodeType":"YulIdentifier","src":"3713:23:21"},"nativeSrc":"3713:41:21","nodeType":"YulFunctionCall","src":"3713:41:21"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"3664:27:21","nodeType":"YulIdentifier","src":"3664:27:21"},"nativeSrc":"3664:91:21","nodeType":"YulFunctionCall","src":"3664:91:21"}],"functionName":{"name":"sstore","nativeSrc":"3651:6:21","nodeType":"YulIdentifier","src":"3651:6:21"},"nativeSrc":"3651:105:21","nodeType":"YulFunctionCall","src":"3651:105:21"},"nativeSrc":"3651:105:21","nodeType":"YulExpressionStatement","src":"3651:105:21"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"3493:269:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3546:4:21","nodeType":"YulTypedName","src":"3546:4:21","type":""},{"name":"offset","nativeSrc":"3552:6:21","nodeType":"YulTypedName","src":"3552:6:21","type":""},{"name":"value_0","nativeSrc":"3560:7:21","nodeType":"YulTypedName","src":"3560:7:21","type":""}],"src":"3493:269:21"},{"body":{"nativeSrc":"3817:24:21","nodeType":"YulBlock","src":"3817:24:21","statements":[{"nativeSrc":"3827:8:21","nodeType":"YulAssignment","src":"3827:8:21","value":{"kind":"number","nativeSrc":"3834:1:21","nodeType":"YulLiteral","src":"3834:1:21","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"3827:3:21","nodeType":"YulIdentifier","src":"3827:3:21"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"3768:73:21","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"3813:3:21","nodeType":"YulTypedName","src":"3813:3:21","type":""}],"src":"3768:73:21"},{"body":{"nativeSrc":"3900:136:21","nodeType":"YulBlock","src":"3900:136:21","statements":[{"nativeSrc":"3910:46:21","nodeType":"YulVariableDeclaration","src":"3910:46:21","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"3924:30:21","nodeType":"YulIdentifier","src":"3924:30:21"},"nativeSrc":"3924:32:21","nodeType":"YulFunctionCall","src":"3924:32:21"},"variables":[{"name":"zero_0","nativeSrc":"3914:6:21","nodeType":"YulTypedName","src":"3914:6:21","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4009:4:21","nodeType":"YulIdentifier","src":"4009:4:21"},{"name":"offset","nativeSrc":"4015:6:21","nodeType":"YulIdentifier","src":"4015:6:21"},{"name":"zero_0","nativeSrc":"4023:6:21","nodeType":"YulIdentifier","src":"4023:6:21"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"3965:43:21","nodeType":"YulIdentifier","src":"3965:43:21"},"nativeSrc":"3965:65:21","nodeType":"YulFunctionCall","src":"3965:65:21"},"nativeSrc":"3965:65:21","nodeType":"YulExpressionStatement","src":"3965:65:21"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"3847:189:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3886:4:21","nodeType":"YulTypedName","src":"3886:4:21","type":""},{"name":"offset","nativeSrc":"3892:6:21","nodeType":"YulTypedName","src":"3892:6:21","type":""}],"src":"3847:189:21"},{"body":{"nativeSrc":"4092:136:21","nodeType":"YulBlock","src":"4092:136:21","statements":[{"body":{"nativeSrc":"4159:63:21","nodeType":"YulBlock","src":"4159:63:21","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"4203:5:21","nodeType":"YulIdentifier","src":"4203:5:21"},{"kind":"number","nativeSrc":"4210:1:21","nodeType":"YulLiteral","src":"4210:1:21","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"4173:29:21","nodeType":"YulIdentifier","src":"4173:29:21"},"nativeSrc":"4173:39:21","nodeType":"YulFunctionCall","src":"4173:39:21"},"nativeSrc":"4173:39:21","nodeType":"YulExpressionStatement","src":"4173:39:21"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"4112:5:21","nodeType":"YulIdentifier","src":"4112:5:21"},{"name":"end","nativeSrc":"4119:3:21","nodeType":"YulIdentifier","src":"4119:3:21"}],"functionName":{"name":"lt","nativeSrc":"4109:2:21","nodeType":"YulIdentifier","src":"4109:2:21"},"nativeSrc":"4109:14:21","nodeType":"YulFunctionCall","src":"4109:14:21"},"nativeSrc":"4102:120:21","nodeType":"YulForLoop","post":{"nativeSrc":"4124:26:21","nodeType":"YulBlock","src":"4124:26:21","statements":[{"nativeSrc":"4126:22:21","nodeType":"YulAssignment","src":"4126:22:21","value":{"arguments":[{"name":"start","nativeSrc":"4139:5:21","nodeType":"YulIdentifier","src":"4139:5:21"},{"kind":"number","nativeSrc":"4146:1:21","nodeType":"YulLiteral","src":"4146:1:21","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4135:3:21","nodeType":"YulIdentifier","src":"4135:3:21"},"nativeSrc":"4135:13:21","nodeType":"YulFunctionCall","src":"4135:13:21"},"variableNames":[{"name":"start","nativeSrc":"4126:5:21","nodeType":"YulIdentifier","src":"4126:5:21"}]}]},"pre":{"nativeSrc":"4106:2:21","nodeType":"YulBlock","src":"4106:2:21","statements":[]},"src":"4102:120:21"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"4042:186:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"4080:5:21","nodeType":"YulTypedName","src":"4080:5:21","type":""},{"name":"end","nativeSrc":"4087:3:21","nodeType":"YulTypedName","src":"4087:3:21","type":""}],"src":"4042:186:21"},{"body":{"nativeSrc":"4313:464:21","nodeType":"YulBlock","src":"4313:464:21","statements":[{"body":{"nativeSrc":"4339:431:21","nodeType":"YulBlock","src":"4339:431:21","statements":[{"nativeSrc":"4353:54:21","nodeType":"YulVariableDeclaration","src":"4353:54:21","value":{"arguments":[{"name":"array","nativeSrc":"4401:5:21","nodeType":"YulIdentifier","src":"4401:5:21"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"4369:31:21","nodeType":"YulIdentifier","src":"4369:31:21"},"nativeSrc":"4369:38:21","nodeType":"YulFunctionCall","src":"4369:38:21"},"variables":[{"name":"dataArea","nativeSrc":"4357:8:21","nodeType":"YulTypedName","src":"4357:8:21","type":""}]},{"nativeSrc":"4420:63:21","nodeType":"YulVariableDeclaration","src":"4420:63:21","value":{"arguments":[{"name":"dataArea","nativeSrc":"4443:8:21","nodeType":"YulIdentifier","src":"4443:8:21"},{"arguments":[{"name":"startIndex","nativeSrc":"4471:10:21","nodeType":"YulIdentifier","src":"4471:10:21"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"4453:17:21","nodeType":"YulIdentifier","src":"4453:17:21"},"nativeSrc":"4453:29:21","nodeType":"YulFunctionCall","src":"4453:29:21"}],"functionName":{"name":"add","nativeSrc":"4439:3:21","nodeType":"YulIdentifier","src":"4439:3:21"},"nativeSrc":"4439:44:21","nodeType":"YulFunctionCall","src":"4439:44:21"},"variables":[{"name":"deleteStart","nativeSrc":"4424:11:21","nodeType":"YulTypedName","src":"4424:11:21","type":""}]},{"body":{"nativeSrc":"4640:27:21","nodeType":"YulBlock","src":"4640:27:21","statements":[{"nativeSrc":"4642:23:21","nodeType":"YulAssignment","src":"4642:23:21","value":{"name":"dataArea","nativeSrc":"4657:8:21","nodeType":"YulIdentifier","src":"4657:8:21"},"variableNames":[{"name":"deleteStart","nativeSrc":"4642:11:21","nodeType":"YulIdentifier","src":"4642:11:21"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"4624:10:21","nodeType":"YulIdentifier","src":"4624:10:21"},{"kind":"number","nativeSrc":"4636:2:21","nodeType":"YulLiteral","src":"4636:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"4621:2:21","nodeType":"YulIdentifier","src":"4621:2:21"},"nativeSrc":"4621:18:21","nodeType":"YulFunctionCall","src":"4621:18:21"},"nativeSrc":"4618:49:21","nodeType":"YulIf","src":"4618:49:21"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"4709:11:21","nodeType":"YulIdentifier","src":"4709:11:21"},{"arguments":[{"name":"dataArea","nativeSrc":"4726:8:21","nodeType":"YulIdentifier","src":"4726:8:21"},{"arguments":[{"name":"len","nativeSrc":"4754:3:21","nodeType":"YulIdentifier","src":"4754:3:21"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"4736:17:21","nodeType":"YulIdentifier","src":"4736:17:21"},"nativeSrc":"4736:22:21","nodeType":"YulFunctionCall","src":"4736:22:21"}],"functionName":{"name":"add","nativeSrc":"4722:3:21","nodeType":"YulIdentifier","src":"4722:3:21"},"nativeSrc":"4722:37:21","nodeType":"YulFunctionCall","src":"4722:37:21"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"4680:28:21","nodeType":"YulIdentifier","src":"4680:28:21"},"nativeSrc":"4680:80:21","nodeType":"YulFunctionCall","src":"4680:80:21"},"nativeSrc":"4680:80:21","nodeType":"YulExpressionStatement","src":"4680:80:21"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"4330:3:21","nodeType":"YulIdentifier","src":"4330:3:21"},{"kind":"number","nativeSrc":"4335:2:21","nodeType":"YulLiteral","src":"4335:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"4327:2:21","nodeType":"YulIdentifier","src":"4327:2:21"},"nativeSrc":"4327:11:21","nodeType":"YulFunctionCall","src":"4327:11:21"},"nativeSrc":"4324:446:21","nodeType":"YulIf","src":"4324:446:21"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"4234:543:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"4289:5:21","nodeType":"YulTypedName","src":"4289:5:21","type":""},{"name":"len","nativeSrc":"4296:3:21","nodeType":"YulTypedName","src":"4296:3:21","type":""},{"name":"startIndex","nativeSrc":"4301:10:21","nodeType":"YulTypedName","src":"4301:10:21","type":""}],"src":"4234:543:21"},{"body":{"nativeSrc":"4846:54:21","nodeType":"YulBlock","src":"4846:54:21","statements":[{"nativeSrc":"4856:37:21","nodeType":"YulAssignment","src":"4856:37:21","value":{"arguments":[{"name":"bits","nativeSrc":"4881:4:21","nodeType":"YulIdentifier","src":"4881:4:21"},{"name":"value","nativeSrc":"4887:5:21","nodeType":"YulIdentifier","src":"4887:5:21"}],"functionName":{"name":"shr","nativeSrc":"4877:3:21","nodeType":"YulIdentifier","src":"4877:3:21"},"nativeSrc":"4877:16:21","nodeType":"YulFunctionCall","src":"4877:16:21"},"variableNames":[{"name":"newValue","nativeSrc":"4856:8:21","nodeType":"YulIdentifier","src":"4856:8:21"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"4783:117:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"4821:4:21","nodeType":"YulTypedName","src":"4821:4:21","type":""},{"name":"value","nativeSrc":"4827:5:21","nodeType":"YulTypedName","src":"4827:5:21","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"4837:8:21","nodeType":"YulTypedName","src":"4837:8:21","type":""}],"src":"4783:117:21"},{"body":{"nativeSrc":"4957:118:21","nodeType":"YulBlock","src":"4957:118:21","statements":[{"nativeSrc":"4967:68:21","nodeType":"YulVariableDeclaration","src":"4967:68:21","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5016:1:21","nodeType":"YulLiteral","src":"5016:1:21","type":"","value":"8"},{"name":"bytes","nativeSrc":"5019:5:21","nodeType":"YulIdentifier","src":"5019:5:21"}],"functionName":{"name":"mul","nativeSrc":"5012:3:21","nodeType":"YulIdentifier","src":"5012:3:21"},"nativeSrc":"5012:13:21","nodeType":"YulFunctionCall","src":"5012:13:21"},{"arguments":[{"kind":"number","nativeSrc":"5031:1:21","nodeType":"YulLiteral","src":"5031:1:21","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"5027:3:21","nodeType":"YulIdentifier","src":"5027:3:21"},"nativeSrc":"5027:6:21","nodeType":"YulFunctionCall","src":"5027:6:21"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"4983:28:21","nodeType":"YulIdentifier","src":"4983:28:21"},"nativeSrc":"4983:51:21","nodeType":"YulFunctionCall","src":"4983:51:21"}],"functionName":{"name":"not","nativeSrc":"4979:3:21","nodeType":"YulIdentifier","src":"4979:3:21"},"nativeSrc":"4979:56:21","nodeType":"YulFunctionCall","src":"4979:56:21"},"variables":[{"name":"mask","nativeSrc":"4971:4:21","nodeType":"YulTypedName","src":"4971:4:21","type":""}]},{"nativeSrc":"5044:25:21","nodeType":"YulAssignment","src":"5044:25:21","value":{"arguments":[{"name":"data","nativeSrc":"5058:4:21","nodeType":"YulIdentifier","src":"5058:4:21"},{"name":"mask","nativeSrc":"5064:4:21","nodeType":"YulIdentifier","src":"5064:4:21"}],"functionName":{"name":"and","nativeSrc":"5054:3:21","nodeType":"YulIdentifier","src":"5054:3:21"},"nativeSrc":"5054:15:21","nodeType":"YulFunctionCall","src":"5054:15:21"},"variableNames":[{"name":"result","nativeSrc":"5044:6:21","nodeType":"YulIdentifier","src":"5044:6:21"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"4906:169:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"4934:4:21","nodeType":"YulTypedName","src":"4934:4:21","type":""},{"name":"bytes","nativeSrc":"4940:5:21","nodeType":"YulTypedName","src":"4940:5:21","type":""}],"returnVariables":[{"name":"result","nativeSrc":"4950:6:21","nodeType":"YulTypedName","src":"4950:6:21","type":""}],"src":"4906:169:21"},{"body":{"nativeSrc":"5161:214:21","nodeType":"YulBlock","src":"5161:214:21","statements":[{"nativeSrc":"5294:37:21","nodeType":"YulAssignment","src":"5294:37:21","value":{"arguments":[{"name":"data","nativeSrc":"5321:4:21","nodeType":"YulIdentifier","src":"5321:4:21"},{"name":"len","nativeSrc":"5327:3:21","nodeType":"YulIdentifier","src":"5327:3:21"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"5302:18:21","nodeType":"YulIdentifier","src":"5302:18:21"},"nativeSrc":"5302:29:21","nodeType":"YulFunctionCall","src":"5302:29:21"},"variableNames":[{"name":"data","nativeSrc":"5294:4:21","nodeType":"YulIdentifier","src":"5294:4:21"}]},{"nativeSrc":"5340:29:21","nodeType":"YulAssignment","src":"5340:29:21","value":{"arguments":[{"name":"data","nativeSrc":"5351:4:21","nodeType":"YulIdentifier","src":"5351:4:21"},{"arguments":[{"kind":"number","nativeSrc":"5361:1:21","nodeType":"YulLiteral","src":"5361:1:21","type":"","value":"2"},{"name":"len","nativeSrc":"5364:3:21","nodeType":"YulIdentifier","src":"5364:3:21"}],"functionName":{"name":"mul","nativeSrc":"5357:3:21","nodeType":"YulIdentifier","src":"5357:3:21"},"nativeSrc":"5357:11:21","nodeType":"YulFunctionCall","src":"5357:11:21"}],"functionName":{"name":"or","nativeSrc":"5348:2:21","nodeType":"YulIdentifier","src":"5348:2:21"},"nativeSrc":"5348:21:21","nodeType":"YulFunctionCall","src":"5348:21:21"},"variableNames":[{"name":"used","nativeSrc":"5340:4:21","nodeType":"YulIdentifier","src":"5340:4:21"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"5080:295:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"5142:4:21","nodeType":"YulTypedName","src":"5142:4:21","type":""},{"name":"len","nativeSrc":"5148:3:21","nodeType":"YulTypedName","src":"5148:3:21","type":""}],"returnVariables":[{"name":"used","nativeSrc":"5156:4:21","nodeType":"YulTypedName","src":"5156:4:21","type":""}],"src":"5080:295:21"},{"body":{"nativeSrc":"5472:1303:21","nodeType":"YulBlock","src":"5472:1303:21","statements":[{"nativeSrc":"5483:51:21","nodeType":"YulVariableDeclaration","src":"5483:51:21","value":{"arguments":[{"name":"src","nativeSrc":"5530:3:21","nodeType":"YulIdentifier","src":"5530:3:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"5497:32:21","nodeType":"YulIdentifier","src":"5497:32:21"},"nativeSrc":"5497:37:21","nodeType":"YulFunctionCall","src":"5497:37:21"},"variables":[{"name":"newLen","nativeSrc":"5487:6:21","nodeType":"YulTypedName","src":"5487:6:21","type":""}]},{"body":{"nativeSrc":"5619:22:21","nodeType":"YulBlock","src":"5619:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"5621:16:21","nodeType":"YulIdentifier","src":"5621:16:21"},"nativeSrc":"5621:18:21","nodeType":"YulFunctionCall","src":"5621:18:21"},"nativeSrc":"5621:18:21","nodeType":"YulExpressionStatement","src":"5621:18:21"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"5591:6:21","nodeType":"YulIdentifier","src":"5591:6:21"},{"kind":"number","nativeSrc":"5599:18:21","nodeType":"YulLiteral","src":"5599:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5588:2:21","nodeType":"YulIdentifier","src":"5588:2:21"},"nativeSrc":"5588:30:21","nodeType":"YulFunctionCall","src":"5588:30:21"},"nativeSrc":"5585:56:21","nodeType":"YulIf","src":"5585:56:21"},{"nativeSrc":"5651:52:21","nodeType":"YulVariableDeclaration","src":"5651:52:21","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"5697:4:21","nodeType":"YulIdentifier","src":"5697:4:21"}],"functionName":{"name":"sload","nativeSrc":"5691:5:21","nodeType":"YulIdentifier","src":"5691:5:21"},"nativeSrc":"5691:11:21","nodeType":"YulFunctionCall","src":"5691:11:21"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"5665:25:21","nodeType":"YulIdentifier","src":"5665:25:21"},"nativeSrc":"5665:38:21","nodeType":"YulFunctionCall","src":"5665:38:21"},"variables":[{"name":"oldLen","nativeSrc":"5655:6:21","nodeType":"YulTypedName","src":"5655:6:21","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"5796:4:21","nodeType":"YulIdentifier","src":"5796:4:21"},{"name":"oldLen","nativeSrc":"5802:6:21","nodeType":"YulIdentifier","src":"5802:6:21"},{"name":"newLen","nativeSrc":"5810:6:21","nodeType":"YulIdentifier","src":"5810:6:21"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"5750:45:21","nodeType":"YulIdentifier","src":"5750:45:21"},"nativeSrc":"5750:67:21","nodeType":"YulFunctionCall","src":"5750:67:21"},"nativeSrc":"5750:67:21","nodeType":"YulExpressionStatement","src":"5750:67:21"},{"nativeSrc":"5827:18:21","nodeType":"YulVariableDeclaration","src":"5827:18:21","value":{"kind":"number","nativeSrc":"5844:1:21","nodeType":"YulLiteral","src":"5844:1:21","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"5831:9:21","nodeType":"YulTypedName","src":"5831:9:21","type":""}]},{"nativeSrc":"5855:17:21","nodeType":"YulAssignment","src":"5855:17:21","value":{"kind":"number","nativeSrc":"5868:4:21","nodeType":"YulLiteral","src":"5868:4:21","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"5855:9:21","nodeType":"YulIdentifier","src":"5855:9:21"}]},{"cases":[{"body":{"nativeSrc":"5919:611:21","nodeType":"YulBlock","src":"5919:611:21","statements":[{"nativeSrc":"5933:37:21","nodeType":"YulVariableDeclaration","src":"5933:37:21","value":{"arguments":[{"name":"newLen","nativeSrc":"5952:6:21","nodeType":"YulIdentifier","src":"5952:6:21"},{"arguments":[{"kind":"number","nativeSrc":"5964:4:21","nodeType":"YulLiteral","src":"5964:4:21","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"5960:3:21","nodeType":"YulIdentifier","src":"5960:3:21"},"nativeSrc":"5960:9:21","nodeType":"YulFunctionCall","src":"5960:9:21"}],"functionName":{"name":"and","nativeSrc":"5948:3:21","nodeType":"YulIdentifier","src":"5948:3:21"},"nativeSrc":"5948:22:21","nodeType":"YulFunctionCall","src":"5948:22:21"},"variables":[{"name":"loopEnd","nativeSrc":"5937:7:21","nodeType":"YulTypedName","src":"5937:7:21","type":""}]},{"nativeSrc":"5984:51:21","nodeType":"YulVariableDeclaration","src":"5984:51:21","value":{"arguments":[{"name":"slot","nativeSrc":"6030:4:21","nodeType":"YulIdentifier","src":"6030:4:21"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"5998:31:21","nodeType":"YulIdentifier","src":"5998:31:21"},"nativeSrc":"5998:37:21","nodeType":"YulFunctionCall","src":"5998:37:21"},"variables":[{"name":"dstPtr","nativeSrc":"5988:6:21","nodeType":"YulTypedName","src":"5988:6:21","type":""}]},{"nativeSrc":"6048:10:21","nodeType":"YulVariableDeclaration","src":"6048:10:21","value":{"kind":"number","nativeSrc":"6057:1:21","nodeType":"YulLiteral","src":"6057:1:21","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6052:1:21","nodeType":"YulTypedName","src":"6052:1:21","type":""}]},{"body":{"nativeSrc":"6116:163:21","nodeType":"YulBlock","src":"6116:163:21","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"6141:6:21","nodeType":"YulIdentifier","src":"6141:6:21"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"6159:3:21","nodeType":"YulIdentifier","src":"6159:3:21"},{"name":"srcOffset","nativeSrc":"6164:9:21","nodeType":"YulIdentifier","src":"6164:9:21"}],"functionName":{"name":"add","nativeSrc":"6155:3:21","nodeType":"YulIdentifier","src":"6155:3:21"},"nativeSrc":"6155:19:21","nodeType":"YulFunctionCall","src":"6155:19:21"}],"functionName":{"name":"mload","nativeSrc":"6149:5:21","nodeType":"YulIdentifier","src":"6149:5:21"},"nativeSrc":"6149:26:21","nodeType":"YulFunctionCall","src":"6149:26:21"}],"functionName":{"name":"sstore","nativeSrc":"6134:6:21","nodeType":"YulIdentifier","src":"6134:6:21"},"nativeSrc":"6134:42:21","nodeType":"YulFunctionCall","src":"6134:42:21"},"nativeSrc":"6134:42:21","nodeType":"YulExpressionStatement","src":"6134:42:21"},{"nativeSrc":"6193:24:21","nodeType":"YulAssignment","src":"6193:24:21","value":{"arguments":[{"name":"dstPtr","nativeSrc":"6207:6:21","nodeType":"YulIdentifier","src":"6207:6:21"},{"kind":"number","nativeSrc":"6215:1:21","nodeType":"YulLiteral","src":"6215:1:21","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6203:3:21","nodeType":"YulIdentifier","src":"6203:3:21"},"nativeSrc":"6203:14:21","nodeType":"YulFunctionCall","src":"6203:14:21"},"variableNames":[{"name":"dstPtr","nativeSrc":"6193:6:21","nodeType":"YulIdentifier","src":"6193:6:21"}]},{"nativeSrc":"6234:31:21","nodeType":"YulAssignment","src":"6234:31:21","value":{"arguments":[{"name":"srcOffset","nativeSrc":"6251:9:21","nodeType":"YulIdentifier","src":"6251:9:21"},{"kind":"number","nativeSrc":"6262:2:21","nodeType":"YulLiteral","src":"6262:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6247:3:21","nodeType":"YulIdentifier","src":"6247:3:21"},"nativeSrc":"6247:18:21","nodeType":"YulFunctionCall","src":"6247:18:21"},"variableNames":[{"name":"srcOffset","nativeSrc":"6234:9:21","nodeType":"YulIdentifier","src":"6234:9:21"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6082:1:21","nodeType":"YulIdentifier","src":"6082:1:21"},{"name":"loopEnd","nativeSrc":"6085:7:21","nodeType":"YulIdentifier","src":"6085:7:21"}],"functionName":{"name":"lt","nativeSrc":"6079:2:21","nodeType":"YulIdentifier","src":"6079:2:21"},"nativeSrc":"6079:14:21","nodeType":"YulFunctionCall","src":"6079:14:21"},"nativeSrc":"6071:208:21","nodeType":"YulForLoop","post":{"nativeSrc":"6094:21:21","nodeType":"YulBlock","src":"6094:21:21","statements":[{"nativeSrc":"6096:17:21","nodeType":"YulAssignment","src":"6096:17:21","value":{"arguments":[{"name":"i","nativeSrc":"6105:1:21","nodeType":"YulIdentifier","src":"6105:1:21"},{"kind":"number","nativeSrc":"6108:4:21","nodeType":"YulLiteral","src":"6108:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6101:3:21","nodeType":"YulIdentifier","src":"6101:3:21"},"nativeSrc":"6101:12:21","nodeType":"YulFunctionCall","src":"6101:12:21"},"variableNames":[{"name":"i","nativeSrc":"6096:1:21","nodeType":"YulIdentifier","src":"6096:1:21"}]}]},"pre":{"nativeSrc":"6075:3:21","nodeType":"YulBlock","src":"6075:3:21","statements":[]},"src":"6071:208:21"},{"body":{"nativeSrc":"6315:156:21","nodeType":"YulBlock","src":"6315:156:21","statements":[{"nativeSrc":"6333:43:21","nodeType":"YulVariableDeclaration","src":"6333:43:21","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"6360:3:21","nodeType":"YulIdentifier","src":"6360:3:21"},{"name":"srcOffset","nativeSrc":"6365:9:21","nodeType":"YulIdentifier","src":"6365:9:21"}],"functionName":{"name":"add","nativeSrc":"6356:3:21","nodeType":"YulIdentifier","src":"6356:3:21"},"nativeSrc":"6356:19:21","nodeType":"YulFunctionCall","src":"6356:19:21"}],"functionName":{"name":"mload","nativeSrc":"6350:5:21","nodeType":"YulIdentifier","src":"6350:5:21"},"nativeSrc":"6350:26:21","nodeType":"YulFunctionCall","src":"6350:26:21"},"variables":[{"name":"lastValue","nativeSrc":"6337:9:21","nodeType":"YulTypedName","src":"6337:9:21","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"6400:6:21","nodeType":"YulIdentifier","src":"6400:6:21"},{"arguments":[{"name":"lastValue","nativeSrc":"6427:9:21","nodeType":"YulIdentifier","src":"6427:9:21"},{"arguments":[{"name":"newLen","nativeSrc":"6442:6:21","nodeType":"YulIdentifier","src":"6442:6:21"},{"kind":"number","nativeSrc":"6450:4:21","nodeType":"YulLiteral","src":"6450:4:21","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"6438:3:21","nodeType":"YulIdentifier","src":"6438:3:21"},"nativeSrc":"6438:17:21","nodeType":"YulFunctionCall","src":"6438:17:21"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"6408:18:21","nodeType":"YulIdentifier","src":"6408:18:21"},"nativeSrc":"6408:48:21","nodeType":"YulFunctionCall","src":"6408:48:21"}],"functionName":{"name":"sstore","nativeSrc":"6393:6:21","nodeType":"YulIdentifier","src":"6393:6:21"},"nativeSrc":"6393:64:21","nodeType":"YulFunctionCall","src":"6393:64:21"},"nativeSrc":"6393:64:21","nodeType":"YulExpressionStatement","src":"6393:64:21"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"6298:7:21","nodeType":"YulIdentifier","src":"6298:7:21"},{"name":"newLen","nativeSrc":"6307:6:21","nodeType":"YulIdentifier","src":"6307:6:21"}],"functionName":{"name":"lt","nativeSrc":"6295:2:21","nodeType":"YulIdentifier","src":"6295:2:21"},"nativeSrc":"6295:19:21","nodeType":"YulFunctionCall","src":"6295:19:21"},"nativeSrc":"6292:179:21","nodeType":"YulIf","src":"6292:179:21"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6491:4:21","nodeType":"YulIdentifier","src":"6491:4:21"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"6505:6:21","nodeType":"YulIdentifier","src":"6505:6:21"},{"kind":"number","nativeSrc":"6513:1:21","nodeType":"YulLiteral","src":"6513:1:21","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"6501:3:21","nodeType":"YulIdentifier","src":"6501:3:21"},"nativeSrc":"6501:14:21","nodeType":"YulFunctionCall","src":"6501:14:21"},{"kind":"number","nativeSrc":"6517:1:21","nodeType":"YulLiteral","src":"6517:1:21","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6497:3:21","nodeType":"YulIdentifier","src":"6497:3:21"},"nativeSrc":"6497:22:21","nodeType":"YulFunctionCall","src":"6497:22:21"}],"functionName":{"name":"sstore","nativeSrc":"6484:6:21","nodeType":"YulIdentifier","src":"6484:6:21"},"nativeSrc":"6484:36:21","nodeType":"YulFunctionCall","src":"6484:36:21"},"nativeSrc":"6484:36:21","nodeType":"YulExpressionStatement","src":"6484:36:21"}]},"nativeSrc":"5912:618:21","nodeType":"YulCase","src":"5912:618:21","value":{"kind":"number","nativeSrc":"5917:1:21","nodeType":"YulLiteral","src":"5917:1:21","type":"","value":"1"}},{"body":{"nativeSrc":"6547:222:21","nodeType":"YulBlock","src":"6547:222:21","statements":[{"nativeSrc":"6561:14:21","nodeType":"YulVariableDeclaration","src":"6561:14:21","value":{"kind":"number","nativeSrc":"6574:1:21","nodeType":"YulLiteral","src":"6574:1:21","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"6565:5:21","nodeType":"YulTypedName","src":"6565:5:21","type":""}]},{"body":{"nativeSrc":"6598:67:21","nodeType":"YulBlock","src":"6598:67:21","statements":[{"nativeSrc":"6616:35:21","nodeType":"YulAssignment","src":"6616:35:21","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"6635:3:21","nodeType":"YulIdentifier","src":"6635:3:21"},{"name":"srcOffset","nativeSrc":"6640:9:21","nodeType":"YulIdentifier","src":"6640:9:21"}],"functionName":{"name":"add","nativeSrc":"6631:3:21","nodeType":"YulIdentifier","src":"6631:3:21"},"nativeSrc":"6631:19:21","nodeType":"YulFunctionCall","src":"6631:19:21"}],"functionName":{"name":"mload","nativeSrc":"6625:5:21","nodeType":"YulIdentifier","src":"6625:5:21"},"nativeSrc":"6625:26:21","nodeType":"YulFunctionCall","src":"6625:26:21"},"variableNames":[{"name":"value","nativeSrc":"6616:5:21","nodeType":"YulIdentifier","src":"6616:5:21"}]}]},"condition":{"name":"newLen","nativeSrc":"6591:6:21","nodeType":"YulIdentifier","src":"6591:6:21"},"nativeSrc":"6588:77:21","nodeType":"YulIf","src":"6588:77:21"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6685:4:21","nodeType":"YulIdentifier","src":"6685:4:21"},{"arguments":[{"name":"value","nativeSrc":"6744:5:21","nodeType":"YulIdentifier","src":"6744:5:21"},{"name":"newLen","nativeSrc":"6751:6:21","nodeType":"YulIdentifier","src":"6751:6:21"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"6691:52:21","nodeType":"YulIdentifier","src":"6691:52:21"},"nativeSrc":"6691:67:21","nodeType":"YulFunctionCall","src":"6691:67:21"}],"functionName":{"name":"sstore","nativeSrc":"6678:6:21","nodeType":"YulIdentifier","src":"6678:6:21"},"nativeSrc":"6678:81:21","nodeType":"YulFunctionCall","src":"6678:81:21"},"nativeSrc":"6678:81:21","nodeType":"YulExpressionStatement","src":"6678:81:21"}]},"nativeSrc":"6539:230:21","nodeType":"YulCase","src":"6539:230:21","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"5892:6:21","nodeType":"YulIdentifier","src":"5892:6:21"},{"kind":"number","nativeSrc":"5900:2:21","nodeType":"YulLiteral","src":"5900:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"5889:2:21","nodeType":"YulIdentifier","src":"5889:2:21"},"nativeSrc":"5889:14:21","nodeType":"YulFunctionCall","src":"5889:14:21"},"nativeSrc":"5882:887:21","nodeType":"YulSwitch","src":"5882:887:21"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"5380:1395:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"5461:4:21","nodeType":"YulTypedName","src":"5461:4:21","type":""},{"name":"src","nativeSrc":"5467:3:21","nodeType":"YulTypedName","src":"5467:3:21","type":""}],"src":"5380:1395:21"},{"body":{"nativeSrc":"6826:32:21","nodeType":"YulBlock","src":"6826:32:21","statements":[{"nativeSrc":"6836:16:21","nodeType":"YulAssignment","src":"6836:16:21","value":{"name":"value","nativeSrc":"6847:5:21","nodeType":"YulIdentifier","src":"6847:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"6836:7:21","nodeType":"YulIdentifier","src":"6836:7:21"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"6781:77:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6808:5:21","nodeType":"YulTypedName","src":"6808:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"6818:7:21","nodeType":"YulTypedName","src":"6818:7:21","type":""}],"src":"6781:77:21"},{"body":{"nativeSrc":"6929:53:21","nodeType":"YulBlock","src":"6929:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6946:3:21","nodeType":"YulIdentifier","src":"6946:3:21"},{"arguments":[{"name":"value","nativeSrc":"6969:5:21","nodeType":"YulIdentifier","src":"6969:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"6951:17:21","nodeType":"YulIdentifier","src":"6951:17:21"},"nativeSrc":"6951:24:21","nodeType":"YulFunctionCall","src":"6951:24:21"}],"functionName":{"name":"mstore","nativeSrc":"6939:6:21","nodeType":"YulIdentifier","src":"6939:6:21"},"nativeSrc":"6939:37:21","nodeType":"YulFunctionCall","src":"6939:37:21"},"nativeSrc":"6939:37:21","nodeType":"YulExpressionStatement","src":"6939:37:21"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"6864:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6917:5:21","nodeType":"YulTypedName","src":"6917:5:21","type":""},{"name":"pos","nativeSrc":"6924:3:21","nodeType":"YulTypedName","src":"6924:3:21","type":""}],"src":"6864:118:21"},{"body":{"nativeSrc":"7053:53:21","nodeType":"YulBlock","src":"7053:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7070:3:21","nodeType":"YulIdentifier","src":"7070:3:21"},{"arguments":[{"name":"value","nativeSrc":"7093:5:21","nodeType":"YulIdentifier","src":"7093:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7075:17:21","nodeType":"YulIdentifier","src":"7075:17:21"},"nativeSrc":"7075:24:21","nodeType":"YulFunctionCall","src":"7075:24:21"}],"functionName":{"name":"mstore","nativeSrc":"7063:6:21","nodeType":"YulIdentifier","src":"7063:6:21"},"nativeSrc":"7063:37:21","nodeType":"YulFunctionCall","src":"7063:37:21"},"nativeSrc":"7063:37:21","nodeType":"YulExpressionStatement","src":"7063:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"6988:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7041:5:21","nodeType":"YulTypedName","src":"7041:5:21","type":""},{"name":"pos","nativeSrc":"7048:3:21","nodeType":"YulTypedName","src":"7048:3:21","type":""}],"src":"6988:118:21"},{"body":{"nativeSrc":"7322:454:21","nodeType":"YulBlock","src":"7322:454:21","statements":[{"nativeSrc":"7332:27:21","nodeType":"YulAssignment","src":"7332:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"7344:9:21","nodeType":"YulIdentifier","src":"7344:9:21"},{"kind":"number","nativeSrc":"7355:3:21","nodeType":"YulLiteral","src":"7355:3:21","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7340:3:21","nodeType":"YulIdentifier","src":"7340:3:21"},"nativeSrc":"7340:19:21","nodeType":"YulFunctionCall","src":"7340:19:21"},"variableNames":[{"name":"tail","nativeSrc":"7332:4:21","nodeType":"YulIdentifier","src":"7332:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"7413:6:21","nodeType":"YulIdentifier","src":"7413:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"7426:9:21","nodeType":"YulIdentifier","src":"7426:9:21"},{"kind":"number","nativeSrc":"7437:1:21","nodeType":"YulLiteral","src":"7437:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7422:3:21","nodeType":"YulIdentifier","src":"7422:3:21"},"nativeSrc":"7422:17:21","nodeType":"YulFunctionCall","src":"7422:17:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"7369:43:21","nodeType":"YulIdentifier","src":"7369:43:21"},"nativeSrc":"7369:71:21","nodeType":"YulFunctionCall","src":"7369:71:21"},"nativeSrc":"7369:71:21","nodeType":"YulExpressionStatement","src":"7369:71:21"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"7494:6:21","nodeType":"YulIdentifier","src":"7494:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"7507:9:21","nodeType":"YulIdentifier","src":"7507:9:21"},{"kind":"number","nativeSrc":"7518:2:21","nodeType":"YulLiteral","src":"7518:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7503:3:21","nodeType":"YulIdentifier","src":"7503:3:21"},"nativeSrc":"7503:18:21","nodeType":"YulFunctionCall","src":"7503:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"7450:43:21","nodeType":"YulIdentifier","src":"7450:43:21"},"nativeSrc":"7450:72:21","nodeType":"YulFunctionCall","src":"7450:72:21"},"nativeSrc":"7450:72:21","nodeType":"YulExpressionStatement","src":"7450:72:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"7576:6:21","nodeType":"YulIdentifier","src":"7576:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"7589:9:21","nodeType":"YulIdentifier","src":"7589:9:21"},{"kind":"number","nativeSrc":"7600:2:21","nodeType":"YulLiteral","src":"7600:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7585:3:21","nodeType":"YulIdentifier","src":"7585:3:21"},"nativeSrc":"7585:18:21","nodeType":"YulFunctionCall","src":"7585:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"7532:43:21","nodeType":"YulIdentifier","src":"7532:43:21"},"nativeSrc":"7532:72:21","nodeType":"YulFunctionCall","src":"7532:72:21"},"nativeSrc":"7532:72:21","nodeType":"YulExpressionStatement","src":"7532:72:21"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"7658:6:21","nodeType":"YulIdentifier","src":"7658:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"7671:9:21","nodeType":"YulIdentifier","src":"7671:9:21"},{"kind":"number","nativeSrc":"7682:2:21","nodeType":"YulLiteral","src":"7682:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7667:3:21","nodeType":"YulIdentifier","src":"7667:3:21"},"nativeSrc":"7667:18:21","nodeType":"YulFunctionCall","src":"7667:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"7614:43:21","nodeType":"YulIdentifier","src":"7614:43:21"},"nativeSrc":"7614:72:21","nodeType":"YulFunctionCall","src":"7614:72:21"},"nativeSrc":"7614:72:21","nodeType":"YulExpressionStatement","src":"7614:72:21"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"7740:6:21","nodeType":"YulIdentifier","src":"7740:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"7753:9:21","nodeType":"YulIdentifier","src":"7753:9:21"},{"kind":"number","nativeSrc":"7764:3:21","nodeType":"YulLiteral","src":"7764:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7749:3:21","nodeType":"YulIdentifier","src":"7749:3:21"},"nativeSrc":"7749:19:21","nodeType":"YulFunctionCall","src":"7749:19:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"7696:43:21","nodeType":"YulIdentifier","src":"7696:43:21"},"nativeSrc":"7696:73:21","nodeType":"YulFunctionCall","src":"7696:73:21"},"nativeSrc":"7696:73:21","nodeType":"YulExpressionStatement","src":"7696:73:21"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"7112:664:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7262:9:21","nodeType":"YulTypedName","src":"7262:9:21","type":""},{"name":"value4","nativeSrc":"7274:6:21","nodeType":"YulTypedName","src":"7274:6:21","type":""},{"name":"value3","nativeSrc":"7282:6:21","nodeType":"YulTypedName","src":"7282:6:21","type":""},{"name":"value2","nativeSrc":"7290:6:21","nodeType":"YulTypedName","src":"7290:6:21","type":""},{"name":"value1","nativeSrc":"7298:6:21","nodeType":"YulTypedName","src":"7298:6:21","type":""},{"name":"value0","nativeSrc":"7306:6:21","nodeType":"YulTypedName","src":"7306:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7317:4:21","nodeType":"YulTypedName","src":"7317:4:21","type":""}],"src":"7112:664:21"},{"body":{"nativeSrc":"7878:73:21","nodeType":"YulBlock","src":"7878:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7895:3:21","nodeType":"YulIdentifier","src":"7895:3:21"},{"name":"length","nativeSrc":"7900:6:21","nodeType":"YulIdentifier","src":"7900:6:21"}],"functionName":{"name":"mstore","nativeSrc":"7888:6:21","nodeType":"YulIdentifier","src":"7888:6:21"},"nativeSrc":"7888:19:21","nodeType":"YulFunctionCall","src":"7888:19:21"},"nativeSrc":"7888:19:21","nodeType":"YulExpressionStatement","src":"7888:19:21"},{"nativeSrc":"7916:29:21","nodeType":"YulAssignment","src":"7916:29:21","value":{"arguments":[{"name":"pos","nativeSrc":"7935:3:21","nodeType":"YulIdentifier","src":"7935:3:21"},{"kind":"number","nativeSrc":"7940:4:21","nodeType":"YulLiteral","src":"7940:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7931:3:21","nodeType":"YulIdentifier","src":"7931:3:21"},"nativeSrc":"7931:14:21","nodeType":"YulFunctionCall","src":"7931:14:21"},"variableNames":[{"name":"updated_pos","nativeSrc":"7916:11:21","nodeType":"YulIdentifier","src":"7916:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"7782:169:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7850:3:21","nodeType":"YulTypedName","src":"7850:3:21","type":""},{"name":"length","nativeSrc":"7855:6:21","nodeType":"YulTypedName","src":"7855:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"7866:11:21","nodeType":"YulTypedName","src":"7866:11:21","type":""}],"src":"7782:169:21"},{"body":{"nativeSrc":"8019:184:21","nodeType":"YulBlock","src":"8019:184:21","statements":[{"nativeSrc":"8029:10:21","nodeType":"YulVariableDeclaration","src":"8029:10:21","value":{"kind":"number","nativeSrc":"8038:1:21","nodeType":"YulLiteral","src":"8038:1:21","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"8033:1:21","nodeType":"YulTypedName","src":"8033:1:21","type":""}]},{"body":{"nativeSrc":"8098:63:21","nodeType":"YulBlock","src":"8098:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"8123:3:21","nodeType":"YulIdentifier","src":"8123:3:21"},{"name":"i","nativeSrc":"8128:1:21","nodeType":"YulIdentifier","src":"8128:1:21"}],"functionName":{"name":"add","nativeSrc":"8119:3:21","nodeType":"YulIdentifier","src":"8119:3:21"},"nativeSrc":"8119:11:21","nodeType":"YulFunctionCall","src":"8119:11:21"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8142:3:21","nodeType":"YulIdentifier","src":"8142:3:21"},{"name":"i","nativeSrc":"8147:1:21","nodeType":"YulIdentifier","src":"8147:1:21"}],"functionName":{"name":"add","nativeSrc":"8138:3:21","nodeType":"YulIdentifier","src":"8138:3:21"},"nativeSrc":"8138:11:21","nodeType":"YulFunctionCall","src":"8138:11:21"}],"functionName":{"name":"mload","nativeSrc":"8132:5:21","nodeType":"YulIdentifier","src":"8132:5:21"},"nativeSrc":"8132:18:21","nodeType":"YulFunctionCall","src":"8132:18:21"}],"functionName":{"name":"mstore","nativeSrc":"8112:6:21","nodeType":"YulIdentifier","src":"8112:6:21"},"nativeSrc":"8112:39:21","nodeType":"YulFunctionCall","src":"8112:39:21"},"nativeSrc":"8112:39:21","nodeType":"YulExpressionStatement","src":"8112:39:21"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"8059:1:21","nodeType":"YulIdentifier","src":"8059:1:21"},{"name":"length","nativeSrc":"8062:6:21","nodeType":"YulIdentifier","src":"8062:6:21"}],"functionName":{"name":"lt","nativeSrc":"8056:2:21","nodeType":"YulIdentifier","src":"8056:2:21"},"nativeSrc":"8056:13:21","nodeType":"YulFunctionCall","src":"8056:13:21"},"nativeSrc":"8048:113:21","nodeType":"YulForLoop","post":{"nativeSrc":"8070:19:21","nodeType":"YulBlock","src":"8070:19:21","statements":[{"nativeSrc":"8072:15:21","nodeType":"YulAssignment","src":"8072:15:21","value":{"arguments":[{"name":"i","nativeSrc":"8081:1:21","nodeType":"YulIdentifier","src":"8081:1:21"},{"kind":"number","nativeSrc":"8084:2:21","nodeType":"YulLiteral","src":"8084:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8077:3:21","nodeType":"YulIdentifier","src":"8077:3:21"},"nativeSrc":"8077:10:21","nodeType":"YulFunctionCall","src":"8077:10:21"},"variableNames":[{"name":"i","nativeSrc":"8072:1:21","nodeType":"YulIdentifier","src":"8072:1:21"}]}]},"pre":{"nativeSrc":"8052:3:21","nodeType":"YulBlock","src":"8052:3:21","statements":[]},"src":"8048:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"8181:3:21","nodeType":"YulIdentifier","src":"8181:3:21"},{"name":"length","nativeSrc":"8186:6:21","nodeType":"YulIdentifier","src":"8186:6:21"}],"functionName":{"name":"add","nativeSrc":"8177:3:21","nodeType":"YulIdentifier","src":"8177:3:21"},"nativeSrc":"8177:16:21","nodeType":"YulFunctionCall","src":"8177:16:21"},{"kind":"number","nativeSrc":"8195:1:21","nodeType":"YulLiteral","src":"8195:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"8170:6:21","nodeType":"YulIdentifier","src":"8170:6:21"},"nativeSrc":"8170:27:21","nodeType":"YulFunctionCall","src":"8170:27:21"},"nativeSrc":"8170:27:21","nodeType":"YulExpressionStatement","src":"8170:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"7957:246:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"8001:3:21","nodeType":"YulTypedName","src":"8001:3:21","type":""},{"name":"dst","nativeSrc":"8006:3:21","nodeType":"YulTypedName","src":"8006:3:21","type":""},{"name":"length","nativeSrc":"8011:6:21","nodeType":"YulTypedName","src":"8011:6:21","type":""}],"src":"7957:246:21"},{"body":{"nativeSrc":"8257:54:21","nodeType":"YulBlock","src":"8257:54:21","statements":[{"nativeSrc":"8267:38:21","nodeType":"YulAssignment","src":"8267:38:21","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8285:5:21","nodeType":"YulIdentifier","src":"8285:5:21"},{"kind":"number","nativeSrc":"8292:2:21","nodeType":"YulLiteral","src":"8292:2:21","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"8281:3:21","nodeType":"YulIdentifier","src":"8281:3:21"},"nativeSrc":"8281:14:21","nodeType":"YulFunctionCall","src":"8281:14:21"},{"arguments":[{"kind":"number","nativeSrc":"8301:2:21","nodeType":"YulLiteral","src":"8301:2:21","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"8297:3:21","nodeType":"YulIdentifier","src":"8297:3:21"},"nativeSrc":"8297:7:21","nodeType":"YulFunctionCall","src":"8297:7:21"}],"functionName":{"name":"and","nativeSrc":"8277:3:21","nodeType":"YulIdentifier","src":"8277:3:21"},"nativeSrc":"8277:28:21","nodeType":"YulFunctionCall","src":"8277:28:21"},"variableNames":[{"name":"result","nativeSrc":"8267:6:21","nodeType":"YulIdentifier","src":"8267:6:21"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"8209:102:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8240:5:21","nodeType":"YulTypedName","src":"8240:5:21","type":""}],"returnVariables":[{"name":"result","nativeSrc":"8250:6:21","nodeType":"YulTypedName","src":"8250:6:21","type":""}],"src":"8209:102:21"},{"body":{"nativeSrc":"8409:285:21","nodeType":"YulBlock","src":"8409:285:21","statements":[{"nativeSrc":"8419:53:21","nodeType":"YulVariableDeclaration","src":"8419:53:21","value":{"arguments":[{"name":"value","nativeSrc":"8466:5:21","nodeType":"YulIdentifier","src":"8466:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"8433:32:21","nodeType":"YulIdentifier","src":"8433:32:21"},"nativeSrc":"8433:39:21","nodeType":"YulFunctionCall","src":"8433:39:21"},"variables":[{"name":"length","nativeSrc":"8423:6:21","nodeType":"YulTypedName","src":"8423:6:21","type":""}]},{"nativeSrc":"8481:78:21","nodeType":"YulAssignment","src":"8481:78:21","value":{"arguments":[{"name":"pos","nativeSrc":"8547:3:21","nodeType":"YulIdentifier","src":"8547:3:21"},{"name":"length","nativeSrc":"8552:6:21","nodeType":"YulIdentifier","src":"8552:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"8488:58:21","nodeType":"YulIdentifier","src":"8488:58:21"},"nativeSrc":"8488:71:21","nodeType":"YulFunctionCall","src":"8488:71:21"},"variableNames":[{"name":"pos","nativeSrc":"8481:3:21","nodeType":"YulIdentifier","src":"8481:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8607:5:21","nodeType":"YulIdentifier","src":"8607:5:21"},{"kind":"number","nativeSrc":"8614:4:21","nodeType":"YulLiteral","src":"8614:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8603:3:21","nodeType":"YulIdentifier","src":"8603:3:21"},"nativeSrc":"8603:16:21","nodeType":"YulFunctionCall","src":"8603:16:21"},{"name":"pos","nativeSrc":"8621:3:21","nodeType":"YulIdentifier","src":"8621:3:21"},{"name":"length","nativeSrc":"8626:6:21","nodeType":"YulIdentifier","src":"8626:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"8568:34:21","nodeType":"YulIdentifier","src":"8568:34:21"},"nativeSrc":"8568:65:21","nodeType":"YulFunctionCall","src":"8568:65:21"},"nativeSrc":"8568:65:21","nodeType":"YulExpressionStatement","src":"8568:65:21"},{"nativeSrc":"8642:46:21","nodeType":"YulAssignment","src":"8642:46:21","value":{"arguments":[{"name":"pos","nativeSrc":"8653:3:21","nodeType":"YulIdentifier","src":"8653:3:21"},{"arguments":[{"name":"length","nativeSrc":"8680:6:21","nodeType":"YulIdentifier","src":"8680:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8658:21:21","nodeType":"YulIdentifier","src":"8658:21:21"},"nativeSrc":"8658:29:21","nodeType":"YulFunctionCall","src":"8658:29:21"}],"functionName":{"name":"add","nativeSrc":"8649:3:21","nodeType":"YulIdentifier","src":"8649:3:21"},"nativeSrc":"8649:39:21","nodeType":"YulFunctionCall","src":"8649:39:21"},"variableNames":[{"name":"end","nativeSrc":"8642:3:21","nodeType":"YulIdentifier","src":"8642:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8317:377:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8390:5:21","nodeType":"YulTypedName","src":"8390:5:21","type":""},{"name":"pos","nativeSrc":"8397:3:21","nodeType":"YulTypedName","src":"8397:3:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8405:3:21","nodeType":"YulTypedName","src":"8405:3:21","type":""}],"src":"8317:377:21"},{"body":{"nativeSrc":"8818:195:21","nodeType":"YulBlock","src":"8818:195:21","statements":[{"nativeSrc":"8828:26:21","nodeType":"YulAssignment","src":"8828:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"8840:9:21","nodeType":"YulIdentifier","src":"8840:9:21"},{"kind":"number","nativeSrc":"8851:2:21","nodeType":"YulLiteral","src":"8851:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8836:3:21","nodeType":"YulIdentifier","src":"8836:3:21"},"nativeSrc":"8836:18:21","nodeType":"YulFunctionCall","src":"8836:18:21"},"variableNames":[{"name":"tail","nativeSrc":"8828:4:21","nodeType":"YulIdentifier","src":"8828:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8875:9:21","nodeType":"YulIdentifier","src":"8875:9:21"},{"kind":"number","nativeSrc":"8886:1:21","nodeType":"YulLiteral","src":"8886:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"8871:3:21","nodeType":"YulIdentifier","src":"8871:3:21"},"nativeSrc":"8871:17:21","nodeType":"YulFunctionCall","src":"8871:17:21"},{"arguments":[{"name":"tail","nativeSrc":"8894:4:21","nodeType":"YulIdentifier","src":"8894:4:21"},{"name":"headStart","nativeSrc":"8900:9:21","nodeType":"YulIdentifier","src":"8900:9:21"}],"functionName":{"name":"sub","nativeSrc":"8890:3:21","nodeType":"YulIdentifier","src":"8890:3:21"},"nativeSrc":"8890:20:21","nodeType":"YulFunctionCall","src":"8890:20:21"}],"functionName":{"name":"mstore","nativeSrc":"8864:6:21","nodeType":"YulIdentifier","src":"8864:6:21"},"nativeSrc":"8864:47:21","nodeType":"YulFunctionCall","src":"8864:47:21"},"nativeSrc":"8864:47:21","nodeType":"YulExpressionStatement","src":"8864:47:21"},{"nativeSrc":"8920:86:21","nodeType":"YulAssignment","src":"8920:86:21","value":{"arguments":[{"name":"value0","nativeSrc":"8992:6:21","nodeType":"YulIdentifier","src":"8992:6:21"},{"name":"tail","nativeSrc":"9001:4:21","nodeType":"YulIdentifier","src":"9001:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8928:63:21","nodeType":"YulIdentifier","src":"8928:63:21"},"nativeSrc":"8928:78:21","nodeType":"YulFunctionCall","src":"8928:78:21"},"variableNames":[{"name":"tail","nativeSrc":"8920:4:21","nodeType":"YulIdentifier","src":"8920:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8700:313:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8790:9:21","nodeType":"YulTypedName","src":"8790:9:21","type":""},{"name":"value0","nativeSrc":"8802:6:21","nodeType":"YulTypedName","src":"8802:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8813:4:21","nodeType":"YulTypedName","src":"8813:4:21","type":""}],"src":"8700:313:21"},{"body":{"nativeSrc":"9077:40:21","nodeType":"YulBlock","src":"9077:40:21","statements":[{"nativeSrc":"9088:22:21","nodeType":"YulAssignment","src":"9088:22:21","value":{"arguments":[{"name":"value","nativeSrc":"9104:5:21","nodeType":"YulIdentifier","src":"9104:5:21"}],"functionName":{"name":"mload","nativeSrc":"9098:5:21","nodeType":"YulIdentifier","src":"9098:5:21"},"nativeSrc":"9098:12:21","nodeType":"YulFunctionCall","src":"9098:12:21"},"variableNames":[{"name":"length","nativeSrc":"9088:6:21","nodeType":"YulIdentifier","src":"9088:6:21"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"9019:98:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9060:5:21","nodeType":"YulTypedName","src":"9060:5:21","type":""}],"returnVariables":[{"name":"length","nativeSrc":"9070:6:21","nodeType":"YulTypedName","src":"9070:6:21","type":""}],"src":"9019:98:21"},{"body":{"nativeSrc":"9179:60:21","nodeType":"YulBlock","src":"9179:60:21","statements":[{"nativeSrc":"9189:11:21","nodeType":"YulAssignment","src":"9189:11:21","value":{"name":"ptr","nativeSrc":"9197:3:21","nodeType":"YulIdentifier","src":"9197:3:21"},"variableNames":[{"name":"data","nativeSrc":"9189:4:21","nodeType":"YulIdentifier","src":"9189:4:21"}]},{"nativeSrc":"9210:22:21","nodeType":"YulAssignment","src":"9210:22:21","value":{"arguments":[{"name":"ptr","nativeSrc":"9222:3:21","nodeType":"YulIdentifier","src":"9222:3:21"},{"kind":"number","nativeSrc":"9227:4:21","nodeType":"YulLiteral","src":"9227:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9218:3:21","nodeType":"YulIdentifier","src":"9218:3:21"},"nativeSrc":"9218:14:21","nodeType":"YulFunctionCall","src":"9218:14:21"},"variableNames":[{"name":"data","nativeSrc":"9210:4:21","nodeType":"YulIdentifier","src":"9210:4:21"}]}]},"name":"array_dataslot_t_bytes_memory_ptr","nativeSrc":"9123:116:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"9166:3:21","nodeType":"YulTypedName","src":"9166:3:21","type":""}],"returnVariables":[{"name":"data","nativeSrc":"9174:4:21","nodeType":"YulTypedName","src":"9174:4:21","type":""}],"src":"9123:116:21"},{"body":{"nativeSrc":"9300:99:21","nodeType":"YulBlock","src":"9300:99:21","statements":[{"nativeSrc":"9311:42:21","nodeType":"YulVariableDeclaration","src":"9311:42:21","value":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"9348:3:21","nodeType":"YulIdentifier","src":"9348:3:21"}],"functionName":{"name":"mload","nativeSrc":"9342:5:21","nodeType":"YulIdentifier","src":"9342:5:21"},"nativeSrc":"9342:10:21","nodeType":"YulFunctionCall","src":"9342:10:21"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"9324:17:21","nodeType":"YulIdentifier","src":"9324:17:21"},"nativeSrc":"9324:29:21","nodeType":"YulFunctionCall","src":"9324:29:21"},"variables":[{"name":"value","nativeSrc":"9315:5:21","nodeType":"YulTypedName","src":"9315:5:21","type":""}]},{"nativeSrc":"9363:29:21","nodeType":"YulAssignment","src":"9363:29:21","value":{"name":"value","nativeSrc":"9387:5:21","nodeType":"YulIdentifier","src":"9387:5:21"},"variableNames":[{"name":"returnValue","nativeSrc":"9363:11:21","nodeType":"YulIdentifier","src":"9363:11:21"}]}]},"name":"read_from_memoryt_bytes32","nativeSrc":"9245:154:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"9280:3:21","nodeType":"YulTypedName","src":"9280:3:21","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"9288:11:21","nodeType":"YulTypedName","src":"9288:11:21","type":""}],"src":"9245:154:21"},{"body":{"nativeSrc":"9495:504:21","nodeType":"YulBlock","src":"9495:504:21","statements":[{"nativeSrc":"9506:52:21","nodeType":"YulVariableDeclaration","src":"9506:52:21","value":{"arguments":[{"name":"array","nativeSrc":"9552:5:21","nodeType":"YulIdentifier","src":"9552:5:21"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"9520:31:21","nodeType":"YulIdentifier","src":"9520:31:21"},"nativeSrc":"9520:38:21","nodeType":"YulFunctionCall","src":"9520:38:21"},"variables":[{"name":"length","nativeSrc":"9510:6:21","nodeType":"YulTypedName","src":"9510:6:21","type":""}]},{"nativeSrc":"9567:21:21","nodeType":"YulVariableDeclaration","src":"9567:21:21","value":{"name":"array","nativeSrc":"9583:5:21","nodeType":"YulIdentifier","src":"9583:5:21"},"variables":[{"name":"dataArea","nativeSrc":"9571:8:21","nodeType":"YulTypedName","src":"9571:8:21","type":""}]},{"nativeSrc":"9598:52:21","nodeType":"YulAssignment","src":"9598:52:21","value":{"arguments":[{"name":"array","nativeSrc":"9644:5:21","nodeType":"YulIdentifier","src":"9644:5:21"}],"functionName":{"name":"array_dataslot_t_bytes_memory_ptr","nativeSrc":"9610:33:21","nodeType":"YulIdentifier","src":"9610:33:21"},"nativeSrc":"9610:40:21","nodeType":"YulFunctionCall","src":"9610:40:21"},"variableNames":[{"name":"dataArea","nativeSrc":"9598:8:21","nodeType":"YulIdentifier","src":"9598:8:21"}]},{"nativeSrc":"9660:44:21","nodeType":"YulAssignment","src":"9660:44:21","value":{"arguments":[{"name":"dataArea","nativeSrc":"9695:8:21","nodeType":"YulIdentifier","src":"9695:8:21"}],"functionName":{"name":"read_from_memoryt_bytes32","nativeSrc":"9669:25:21","nodeType":"YulIdentifier","src":"9669:25:21"},"nativeSrc":"9669:35:21","nodeType":"YulFunctionCall","src":"9669:35:21"},"variableNames":[{"name":"value","nativeSrc":"9660:5:21","nodeType":"YulIdentifier","src":"9660:5:21"}]},{"body":{"nativeSrc":"9732:260:21","nodeType":"YulBlock","src":"9732:260:21","statements":[{"nativeSrc":"9746:236:21","nodeType":"YulAssignment","src":"9746:236:21","value":{"arguments":[{"name":"value","nativeSrc":"9776:5:21","nodeType":"YulIdentifier","src":"9776:5:21"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9843:1:21","nodeType":"YulLiteral","src":"9843:1:21","type":"","value":"8"},{"arguments":[{"kind":"number","nativeSrc":"9850:2:21","nodeType":"YulLiteral","src":"9850:2:21","type":"","value":"32"},{"name":"length","nativeSrc":"9854:6:21","nodeType":"YulIdentifier","src":"9854:6:21"}],"functionName":{"name":"sub","nativeSrc":"9846:3:21","nodeType":"YulIdentifier","src":"9846:3:21"},"nativeSrc":"9846:15:21","nodeType":"YulFunctionCall","src":"9846:15:21"}],"functionName":{"name":"mul","nativeSrc":"9839:3:21","nodeType":"YulIdentifier","src":"9839:3:21"},"nativeSrc":"9839:23:21","nodeType":"YulFunctionCall","src":"9839:23:21"},{"kind":"number","nativeSrc":"9884:66:21","nodeType":"YulLiteral","src":"9884:66:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"9799:18:21","nodeType":"YulIdentifier","src":"9799:18:21"},"nativeSrc":"9799:169:21","nodeType":"YulFunctionCall","src":"9799:169:21"}],"functionName":{"name":"and","nativeSrc":"9755:3:21","nodeType":"YulIdentifier","src":"9755:3:21"},"nativeSrc":"9755:227:21","nodeType":"YulFunctionCall","src":"9755:227:21"},"variableNames":[{"name":"value","nativeSrc":"9746:5:21","nodeType":"YulIdentifier","src":"9746:5:21"}]}]},"condition":{"arguments":[{"name":"length","nativeSrc":"9720:6:21","nodeType":"YulIdentifier","src":"9720:6:21"},{"kind":"number","nativeSrc":"9728:2:21","nodeType":"YulLiteral","src":"9728:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"9717:2:21","nodeType":"YulIdentifier","src":"9717:2:21"},"nativeSrc":"9717:14:21","nodeType":"YulFunctionCall","src":"9717:14:21"},"nativeSrc":"9714:278:21","nodeType":"YulIf","src":"9714:278:21"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32","nativeSrc":"9405:594:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"9479:5:21","nodeType":"YulTypedName","src":"9479:5:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"9489:5:21","nodeType":"YulTypedName","src":"9489:5:21","type":""}],"src":"9405:594:21"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_dataslot_t_bytes_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function read_from_memoryt_bytes32(ptr) -> returnValue {\n\n        let value := cleanup_t_bytes32(mload(ptr))\n\n        returnValue :=\n\n        value\n\n    }\n\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value {\n\n        let length := array_length_t_bytes_memory_ptr(array)\n        let dataArea := array\n\n        dataArea := array_dataslot_t_bytes_memory_ptr(array)\n\n        value := read_from_memoryt_bytes32(dataArea)\n\n        if lt(length, 32) {\n            value := and(\n                value,\n                shift_left_dynamic(\n                    mul(8, sub(32, length)),\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n            )\n        }\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61016060405260006005553480156200001757600080fd5b50604051620038d7380380620038d783398181016040528101906200003d9190620004c4565b6040518060400160405280600a81526020017f506179666c75656e6365000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200011f5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162000116919062000507565b60405180910390fd5b62000130816200023160201b60201c565b5060016002819055506200014f6003836200026a60201b90919060201c565b61012081815250506200016d6004826200026a60201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a08181525050620001ac620002c260201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000a63565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905562000267816200031f60201b60201c565b50565b600060208351101562000290576200028883620003e360201b60201c565b9050620002bc565b82620002a2836200045060201b60201c565b6000019081620002b391906200079e565b5060ff60001b90505b92915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e05161010051463060405160200162000304959493929190620008b1565b60405160208183030381529060405280519060200120905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080829050601f815111156200043357826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016200042a91906200099d565b60405180910390fd5b8051816200044190620009f3565b60001c1760001b915050919050565b6000819050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200048c826200045f565b9050919050565b6200049e816200047f565b8114620004aa57600080fd5b50565b600081519050620004be8162000493565b92915050565b600060208284031215620004dd57620004dc6200045a565b5b6000620004ed84828501620004ad565b91505092915050565b62000501816200047f565b82525050565b60006020820190506200051e6000830184620004f6565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005a657607f821691505b602082108103620005bc57620005bb6200055e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005e7565b620006328683620005e7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200067f6200067962000673846200064a565b62000654565b6200064a565b9050919050565b6000819050919050565b6200069b836200065e565b620006b3620006aa8262000686565b848454620005f4565b825550505050565b600090565b620006ca620006bb565b620006d781848462000690565b505050565b5b81811015620006ff57620006f3600082620006c0565b600181019050620006dd565b5050565b601f8211156200074e576200071881620005c2565b6200072384620005d7565b8101602085101562000733578190505b6200074b6200074285620005d7565b830182620006dc565b50505b505050565b600082821c905092915050565b6000620007736000198460080262000753565b1980831691505092915050565b60006200078e838362000760565b9150826002028217905092915050565b620007a98262000524565b67ffffffffffffffff811115620007c557620007c46200052f565b5b620007d182546200058d565b620007de82828562000703565b600060209050601f83116001811462000816576000841562000801578287015190505b6200080d858262000780565b8655506200087d565b601f1984166200082686620005c2565b60005b82811015620008505784890151825560018201915060208501945060208101905062000829565b868310156200087057848901516200086c601f89168262000760565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6200089a8162000885565b82525050565b620008ab816200064a565b82525050565b600060a082019050620008c860008301886200088f565b620008d760208301876200088f565b620008e660408301866200088f565b620008f56060830185620008a0565b620009046080830184620004f6565b9695505050505050565b600082825260208201905092915050565b60005b838110156200093f57808201518184015260208101905062000922565b60008484015250505050565b6000601f19601f8301169050919050565b6000620009698262000524565b6200097581856200090e565b9350620009878185602086016200091f565b62000992816200094b565b840191505092915050565b60006020820190508181036000830152620009b981846200095c565b905092915050565b600081519050919050565b6000819050602082019050919050565b6000620009ea825162000885565b80915050919050565b600062000a0082620009c1565b8262000a0c84620009cc565b905062000a1981620009dc565b9250602082101562000a5c5762000a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802620005e7565b831692505b5050919050565b60805160a05160c05160e051610100516101205161014051612e1962000abe60003960006115cb0152600061159001526000611be101526000611bc001526000611873015260006118c9015260006118f20152612e196000f3fe60806040526004361061014f5760003560e01c80638da5cb5b116100b6578063ea13689f1161006f578063ea13689f1461046c578063eb47e011146104a9578063f23a6e61146104e6578063f2fde38b14610523578063fe1fddaa1461054c578063ffb1500e1461057557610156565b80638da5cb5b1461037d578063bc197c81146103a8578063c4385d76146103e5578063c8b5773d1461040e578063c9c61eab14610437578063e30c39781461044157610156565b80634f18868a116101085780634f18868a1461028f578063715018a6146102b857806379ba5097146102cf57806380c4020c146102e657806384b0196e1461030f57806389f4b3171461034057610156565b806301ffc9a71461015b5780631090bafa14610198578063150b7a02146101d55780632394c348146102125780632c1e816d1461023b5780633408e4701461026457610156565b3661015657005b600080fd5b34801561016757600080fd5b50610182600480360381019061017d9190611de1565b6105b2565b60405161018f9190611e29565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba9190612171565b6106ec565b6040516101cc9190611e29565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190612249565b610702565b60405161020991906122e0565b60405180910390f35b34801561021e57600080fd5b50610239600480360381019061023491906122fb565b610717565b005b34801561024757600080fd5b50610262600480360381019061025d9190612357565b610780565b005b34801561027057600080fd5b506102796107cc565b6040516102869190612393565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b191906123ae565b6107d4565b005b3480156102c457600080fd5b506102cd610914565b005b3480156102db57600080fd5b506102e4610928565b005b3480156102f257600080fd5b5061030d60048036038101906103089190612171565b6109b7565b005b34801561031b57600080fd5b50610324610afd565b60405161033797969594939291906125d1565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906122fb565b610ba7565b6040516103749190612393565b60405180910390f35b34801561038957600080fd5b50610392610c10565b60405161039f9190612655565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca91906126c6565b610c39565b6040516103dc91906122e0565b60405180910390f35b3480156103f157600080fd5b5061040c600480360381019061040791906123ae565b610c51565b005b34801561041a57600080fd5b5061043560048036038101906104309190612357565b610f49565b005b61043f610ffe565b005b34801561044d57600080fd5b50610456611000565b6040516104639190612655565b60405180910390f35b34801561047857600080fd5b50610493600480360381019061048e91906127a2565b61102a565b6040516104a09190612655565b60405180910390f35b3480156104b557600080fd5b506104d060048036038101906104cb91906122fb565b611073565b6040516104dd9190612393565b60405180910390f35b3480156104f257600080fd5b5061050d600480360381019061050891906127eb565b6110ae565b60405161051a91906122e0565b60405180910390f35b34801561052f57600080fd5b5061054a60048036038101906105459190612357565b6110c4565b005b34801561055857600080fd5b50610573600480360381019061056e9190612885565b611171565b005b34801561058157600080fd5b5061059c600480360381019061059791906127a2565b61118b565b6040516105a99190612393565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067d57507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106e557507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60006106f883836111bf565b6001905092915050565b600063150b7a0260e01b905095945050505050565b61071f6112d2565b806009836040516107309190612944565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6107886112d2565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600046905090565b6107dc611359565b83600073ffffffffffffffffffffffffffffffffffffffff166009826040516108059190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156108c257506009816040516108639190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156108f9576040517f08062d7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109058585858561139d565b5061090e611544565b50505050565b61091c6112d2565b610926600061154e565b565b600061093261157f565b90508073ffffffffffffffffffffffffffffffffffffffff16610953611000565b73ffffffffffffffffffffffffffffffffffffffff16146109ab57806040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016109a29190612655565b60405180910390fd5b6109b48161154e565b50565b6109bf611359565b6109c982826111bf565b8060800151600a82600001516040516109e29190612944565b90815260200160405180910390206000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610a69576040517fe4ca4c0b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060800151600a8260000151604051610a829190612944565b90815260200160405180910390206000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610af1816000015182606001518360200151846080015161139d565b610af9611544565b5050565b600060608060008060006060610b11611587565b610b196115c2565b46306000801b600067ffffffffffffffff811115610b3a57610b39611e5f565b5b604051908082528060200260200182016040528015610b685781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b6000600683604051610bb99190612944565b908152602001604051809103902060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600063bc197c8160e01b905098975050505050505050565b610c59611359565b83600073ffffffffffffffffffffffffffffffffffffffff16600982604051610c829190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610d3f5750600981604051610ce09190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610d76576040517f08062d7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ddc576040517fcdf1f8f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600987604051610e049190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610eac5784600987604051610e5f9190612944565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8630866040518463ffffffff1660e01b8152600401610ee99392919061295b565b6020604051808303816000875af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906129be565b50610f39868686866115fd565b5050610f43611544565b50505050565b610f516112d2565b600047905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610f7c90612a1c565b60006040518083038185875af1925050503d8060008114610fb9576040519150601f19603f3d011682016040523d82523d6000602084013e610fbe565b606091505b5050905080610ff9576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6009818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a82805160208101820180518482526020830160208501208183528095505050505050602052806000526040600020600091509150505481565b600063f23a6e6160e01b90509695505050505050565b6110cc6112d2565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1661112c610c10565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6111796112d2565b6111858385848461139d565b50505050565b6006818051602081018201805184825260208301602085012081835280955050505050506000915090508060000154905081565b60006112357fa3b140137dde1ec8f85da0fadac4c5d6c5410186ca811cbe1e3d5fb737dfb2f6836000015180519060200120846020015185604001518660600151876080015160405160200161121a96959493929190612a31565b604051602081830303815290604052805190602001206116b5565b9050600061124382856116cf565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112cc576040517f815e1d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6112da61157f565b73ffffffffffffffffffffffffffffffffffffffff166112f8610c10565b73ffffffffffffffffffffffffffffffffffffffff16146113575761131b61157f565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161134e9190612655565b60405180910390fd5b565b6002805403611394576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028081905550565b806006856040516113ae9190612944565b908152602001604051809103902060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561144a57836002836000846040517f3ff3e6f2000000000000000000000000000000000000000000000000000000008152600401611441959493929190612b4e565b60405180910390fd5b8060068560405161145b9190612944565b908152602001604051809103902060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b89190612bd7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016114fa929190612c0b565b6020604051808303816000875af1158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d91906129be565b5050505050565b6001600281905550565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561157c816116fb565b50565b600033905090565b60606115bd60037f00000000000000000000000000000000000000000000000000000000000000006117bf90919063ffffffff16565b905090565b60606115f860047f00000000000000000000000000000000000000000000000000000000000000006117bf90919063ffffffff16565b905090565b8060068560405161160e9190612944565b908152602001604051809103902060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461166b9190612c34565b925050819055507f80b0529195f12df0318651d4b36ffc81b7b3cb429033916c20d71e8d2e219ae3848484846040516116a79493929190612c68565b60405180910390a150505050565b60006116c86116c261186f565b83611926565b9050919050565b6000806000806116df8686611967565b9250925092506116ef82826119c3565b82935050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060ff60001b83146117dc576117d583611b27565b9050611869565b8180546117e890612ce3565b80601f016020809104026020016040519081016040528092919081815260200182805461181490612ce3565b80156118615780601f1061183657610100808354040283529160200191611861565b820191906000526020600020905b81548152906001019060200180831161184457829003601f168201915b505050505090505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156118eb57507f000000000000000000000000000000000000000000000000000000000000000046145b15611918577f00000000000000000000000000000000000000000000000000000000000000009050611923565b611920611b9b565b90505b90565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b600080600060418451036119ac5760008060006020870151925060408701519150606087015160001a905061199e88828585611c31565b9550955095505050506119bc565b60006002855160001b9250925092505b9250925092565b600060038111156119d7576119d6612a92565b5b8260038111156119ea576119e9612a92565b5b0315611b235760016003811115611a0457611a03612a92565b5b826003811115611a1757611a16612a92565b5b03611a4e576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115611a6257611a61612a92565b5b826003811115611a7557611a74612a92565b5b03611aba578060001c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611ab19190612393565b60405180910390fd5b600380811115611acd57611acc612a92565b5b826003811115611ae057611adf612a92565b5b03611b2257806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611b199190612d14565b60405180910390fd5b5b5050565b60606000611b3483611d25565b90506000602067ffffffffffffffff811115611b5357611b52611e5f565b5b6040519080825280601f01601f191660200182016040528015611b855781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001611c16959493929190612d2f565b60405160208183030381529060405280519060200120905090565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c1115611c71576000600385925092509250611d1b565b600060018888888860405160008152602001604052604051611c969493929190612d9e565b6020604051602081039080840390855afa158015611cb8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d0c57600060016000801b93509350935050611d1b565b8060008060001b935093509350505b9450945094915050565b60008060ff8360001c169050601f811115611d6c576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dbe81611d89565b8114611dc957600080fd5b50565b600081359050611ddb81611db5565b92915050565b600060208284031215611df757611df6611d7f565b5b6000611e0584828501611dcc565b91505092915050565b60008115159050919050565b611e2381611e0e565b82525050565b6000602082019050611e3e6000830184611e1a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e9782611e4e565b810181811067ffffffffffffffff82111715611eb657611eb5611e5f565b5b80604052505050565b6000611ec9611d75565b9050611ed58282611e8e565b919050565b600067ffffffffffffffff821115611ef557611ef4611e5f565b5b611efe82611e4e565b9050602081019050919050565b82818337600083830152505050565b6000611f2d611f2884611eda565b611ebf565b905082815260208101848484011115611f4957611f48611e49565b5b611f54848285611f0b565b509392505050565b600082601f830112611f7157611f70611e44565b5b8135611f81848260208601611f1a565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611faf57611fae611e5f565b5b611fb882611e4e565b9050602081019050919050565b6000611fd8611fd384611f94565b611ebf565b905082815260208101848484011115611ff457611ff3611e49565b5b611fff848285611f0b565b509392505050565b600082601f83011261201c5761201b611e44565b5b813561202c848260208601611fc5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061206082612035565b9050919050565b61207081612055565b811461207b57600080fd5b50565b60008135905061208d81612067565b92915050565b6000819050919050565b6120a681612093565b81146120b157600080fd5b50565b6000813590506120c38161209d565b92915050565b600060a082840312156120df576120de611f8a565b5b6120e960a0611ebf565b9050600082013567ffffffffffffffff81111561210957612108611f8f565b5b61211584828501612007565b60008301525060206121298482850161207e565b602083015250604061213d8482850161207e565b60408301525060606121518482850161207e565b6060830152506080612165848285016120b4565b60808301525092915050565b6000806040838503121561218857612187611d7f565b5b600083013567ffffffffffffffff8111156121a6576121a5611d84565b5b6121b285828601611f5c565b925050602083013567ffffffffffffffff8111156121d3576121d2611d84565b5b6121df858286016120c9565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261220957612208611e44565b5b8235905067ffffffffffffffff811115612226576122256121e9565b5b602083019150836001820283011115612242576122416121ee565b5b9250929050565b60008060008060006080868803121561226557612264611d7f565b5b60006122738882890161207e565b95505060206122848882890161207e565b9450506040612295888289016120b4565b935050606086013567ffffffffffffffff8111156122b6576122b5611d84565b5b6122c2888289016121f3565b92509250509295509295909350565b6122da81611d89565b82525050565b60006020820190506122f560008301846122d1565b92915050565b6000806040838503121561231257612311611d7f565b5b600083013567ffffffffffffffff8111156123305761232f611d84565b5b61233c85828601612007565b925050602061234d8582860161207e565b9150509250929050565b60006020828403121561236d5761236c611d7f565b5b600061237b8482850161207e565b91505092915050565b61238d81612093565b82525050565b60006020820190506123a86000830184612384565b92915050565b600080600080608085870312156123c8576123c7611d7f565b5b600085013567ffffffffffffffff8111156123e6576123e5611d84565b5b6123f287828801612007565b94505060206124038782880161207e565b93505060406124148782880161207e565b9250506060612425878288016120b4565b91505092959194509250565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61246681612431565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124a657808201518184015260208101905061248b565b60008484015250505050565b60006124bd8261246c565b6124c78185612477565b93506124d7818560208601612488565b6124e081611e4e565b840191505092915050565b6124f481612055565b82525050565b6000819050919050565b61250d816124fa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61254881612093565b82525050565b600061255a838361253f565b60208301905092915050565b6000602082019050919050565b600061257e82612513565b612588818561251e565b93506125938361252f565b8060005b838110156125c45781516125ab888261254e565b97506125b683612566565b925050600181019050612597565b5085935050505092915050565b600060e0820190506125e6600083018a61245d565b81810360208301526125f881896124b2565b9050818103604083015261260c81886124b2565b905061261b6060830187612384565b61262860808301866124eb565b61263560a0830185612504565b81810360c08301526126478184612573565b905098975050505050505050565b600060208201905061266a60008301846124eb565b92915050565b60008083601f84011261268657612685611e44565b5b8235905067ffffffffffffffff8111156126a3576126a26121e9565b5b6020830191508360208202830111156126bf576126be6121ee565b5b9250929050565b60008060008060008060008060a0898b0312156126e6576126e5611d7f565b5b60006126f48b828c0161207e565b98505060206127058b828c0161207e565b975050604089013567ffffffffffffffff81111561272657612725611d84565b5b6127328b828c01612670565b9650965050606089013567ffffffffffffffff81111561275557612754611d84565b5b6127618b828c01612670565b9450945050608089013567ffffffffffffffff81111561278457612783611d84565b5b6127908b828c016121f3565b92509250509295985092959890939650565b6000602082840312156127b8576127b7611d7f565b5b600082013567ffffffffffffffff8111156127d6576127d5611d84565b5b6127e284828501612007565b91505092915050565b60008060008060008060a0878903121561280857612807611d7f565b5b600061281689828a0161207e565b965050602061282789828a0161207e565b955050604061283889828a016120b4565b945050606061284989828a016120b4565b935050608087013567ffffffffffffffff81111561286a57612869611d84565b5b61287689828a016121f3565b92509250509295509295509295565b6000806000806080858703121561289f5761289e611d7f565b5b60006128ad8782880161207e565b945050602085013567ffffffffffffffff8111156128ce576128cd611d84565b5b6128da87828801612007565b93505060406128eb8782880161207e565b92505060606128fc878288016120b4565b91505092959194509250565b600081905092915050565b600061291e8261246c565b6129288185612908565b9350612938818560208601612488565b80840191505092915050565b60006129508284612913565b915081905092915050565b600060608201905061297060008301866124eb565b61297d60208301856124eb565b61298a6040830184612384565b949350505050565b61299b81611e0e565b81146129a657600080fd5b50565b6000815190506129b881612992565b92915050565b6000602082840312156129d4576129d3611d7f565b5b60006129e2848285016129a9565b91505092915050565b600081905092915050565b50565b6000612a066000836129eb565b9150612a11826129f6565b600082019050919050565b6000612a27826129f9565b9150819050919050565b600060c082019050612a466000830189612504565b612a536020830188612504565b612a6060408301876124eb565b612a6d60608301866124eb565b612a7a60808301856124eb565b612a8760a0830184612384565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110612ad257612ad1612a92565b5b50565b6000819050612ae382612ac1565b919050565b6000612af382612ad5565b9050919050565b612b0381612ae8565b82525050565b6000819050919050565b6000819050919050565b6000612b38612b33612b2e84612b09565b612b13565b612093565b9050919050565b612b4881612b1d565b82525050565b600060a0820190508181036000830152612b6881886124b2565b9050612b776020830187612afa565b612b8460408301866124eb565b612b916060830185612b3f565b612b9e6080830184612384565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612be282612093565b9150612bed83612093565b9250828203905081811115612c0557612c04612ba8565b5b92915050565b6000604082019050612c2060008301856124eb565b612c2d6020830184612384565b9392505050565b6000612c3f82612093565b9150612c4a83612093565b9250828201905080821115612c6257612c61612ba8565b5b92915050565b60006080820190508181036000830152612c8281876124b2565b9050612c9160208301866124eb565b612c9e60408301856124eb565b612cab6060830184612384565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612cfb57607f821691505b602082108103612d0e57612d0d612cb4565b5b50919050565b6000602082019050612d296000830184612504565b92915050565b600060a082019050612d446000830188612504565b612d516020830187612504565b612d5e6040830186612504565b612d6b6060830185612384565b612d7860808301846124eb565b9695505050505050565b600060ff82169050919050565b612d9881612d82565b82525050565b6000608082019050612db36000830187612504565b612dc06020830186612d8f565b612dcd6040830185612504565b612dda6060830184612504565b9594505050505056fea264697066735822122006a78e87c396c9486ef43fd0da495c3c4ed4ca9b8e2c03db9501f17f1d94a53a64736f6c63430008180033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x5 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x38D7 CODESIZE SUB DUP1 PUSH3 0x38D7 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x3D SWAP2 SWAP1 PUSH3 0x4C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x506179666C75656E636500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP CALLER PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x11F JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x116 SWAP2 SWAP1 PUSH3 0x507 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x130 DUP2 PUSH3 0x231 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH3 0x14F PUSH1 0x3 DUP4 PUSH3 0x26A PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x120 DUP2 DUP2 MSTORE POP POP PUSH3 0x16D PUSH1 0x4 DUP3 PUSH3 0x26A PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x140 DUP2 DUP2 MSTORE POP POP DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x100 DUP2 DUP2 MSTORE POP POP CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP PUSH3 0x1AC PUSH3 0x2C2 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP DUP1 PUSH1 0x8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0xA63 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH3 0x267 DUP2 PUSH3 0x31F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x290 JUMPI PUSH3 0x288 DUP4 PUSH3 0x3E3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH3 0x2BC JUMP JUMPDEST DUP3 PUSH3 0x2A2 DUP4 PUSH3 0x450 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 DUP2 PUSH3 0x2B3 SWAP2 SWAP1 PUSH3 0x79E JUMP JUMPDEST POP PUSH1 0xFF PUSH1 0x0 SHL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x304 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x8B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x433 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x305A27A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x42A SWAP2 SWAP1 PUSH3 0x99D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH3 0x441 SWAP1 PUSH3 0x9F3 JUMP JUMPDEST PUSH1 0x0 SHR OR PUSH1 0x0 SHL SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x48C DUP3 PUSH3 0x45F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x49E DUP2 PUSH3 0x47F JUMP JUMPDEST DUP2 EQ PUSH3 0x4AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x4BE DUP2 PUSH3 0x493 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x4DD JUMPI PUSH3 0x4DC PUSH3 0x45A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x4ED DUP5 DUP3 DUP6 ADD PUSH3 0x4AD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x501 DUP2 PUSH3 0x47F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x51E PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x4F6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x5A6 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x5BC JUMPI PUSH3 0x5BB PUSH3 0x55E JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x626 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x5E7 JUMP JUMPDEST PUSH3 0x632 DUP7 DUP4 PUSH3 0x5E7 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x67F PUSH3 0x679 PUSH3 0x673 DUP5 PUSH3 0x64A JUMP JUMPDEST PUSH3 0x654 JUMP JUMPDEST PUSH3 0x64A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x69B DUP4 PUSH3 0x65E JUMP JUMPDEST PUSH3 0x6B3 PUSH3 0x6AA DUP3 PUSH3 0x686 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x5F4 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x6CA PUSH3 0x6BB JUMP JUMPDEST PUSH3 0x6D7 DUP2 DUP5 DUP5 PUSH3 0x690 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x6FF JUMPI PUSH3 0x6F3 PUSH1 0x0 DUP3 PUSH3 0x6C0 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x6DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x74E JUMPI PUSH3 0x718 DUP2 PUSH3 0x5C2 JUMP JUMPDEST PUSH3 0x723 DUP5 PUSH3 0x5D7 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x733 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x74B PUSH3 0x742 DUP6 PUSH3 0x5D7 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x6DC JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x773 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x753 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x78E DUP4 DUP4 PUSH3 0x760 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x7A9 DUP3 PUSH3 0x524 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x7C5 JUMPI PUSH3 0x7C4 PUSH3 0x52F JUMP JUMPDEST JUMPDEST PUSH3 0x7D1 DUP3 SLOAD PUSH3 0x58D JUMP JUMPDEST PUSH3 0x7DE DUP3 DUP3 DUP6 PUSH3 0x703 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x816 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x801 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x80D DUP6 DUP3 PUSH3 0x780 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x87D JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x826 DUP7 PUSH3 0x5C2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x850 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x829 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x870 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x86C PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x760 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x89A DUP2 PUSH3 0x885 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x8AB DUP2 PUSH3 0x64A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH3 0x8C8 PUSH1 0x0 DUP4 ADD DUP9 PUSH3 0x88F JUMP JUMPDEST PUSH3 0x8D7 PUSH1 0x20 DUP4 ADD DUP8 PUSH3 0x88F JUMP JUMPDEST PUSH3 0x8E6 PUSH1 0x40 DUP4 ADD DUP7 PUSH3 0x88F JUMP JUMPDEST PUSH3 0x8F5 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0x8A0 JUMP JUMPDEST PUSH3 0x904 PUSH1 0x80 DUP4 ADD DUP5 PUSH3 0x4F6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x93F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x922 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x969 DUP3 PUSH3 0x524 JUMP JUMPDEST PUSH3 0x975 DUP2 DUP6 PUSH3 0x90E JUMP JUMPDEST SWAP4 POP PUSH3 0x987 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x91F JUMP JUMPDEST PUSH3 0x992 DUP2 PUSH3 0x94B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x9B9 DUP2 DUP5 PUSH3 0x95C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9EA DUP3 MLOAD PUSH3 0x885 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xA00 DUP3 PUSH3 0x9C1 JUMP JUMPDEST DUP3 PUSH3 0xA0C DUP5 PUSH3 0x9CC JUMP JUMPDEST SWAP1 POP PUSH3 0xA19 DUP2 PUSH3 0x9DC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH3 0xA5C JUMPI PUSH3 0xA57 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL PUSH3 0x5E7 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x2E19 PUSH3 0xABE PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x15CB ADD MSTORE PUSH1 0x0 PUSH2 0x1590 ADD MSTORE PUSH1 0x0 PUSH2 0x1BE1 ADD MSTORE PUSH1 0x0 PUSH2 0x1BC0 ADD MSTORE PUSH1 0x0 PUSH2 0x1873 ADD MSTORE PUSH1 0x0 PUSH2 0x18C9 ADD MSTORE PUSH1 0x0 PUSH2 0x18F2 ADD MSTORE PUSH2 0x2E19 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xEA13689F GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEA13689F EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0xEB47E011 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x523 JUMPI DUP1 PUSH4 0xFE1FDDAA EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0xFFB1500E EQ PUSH2 0x575 JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0xC4385D76 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xC8B5773D EQ PUSH2 0x40E JUMPI DUP1 PUSH4 0xC9C61EAB EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x441 JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x4F18868A GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x4F18868A EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x80C4020C EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x89F4B317 EQ PUSH2 0x340 JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x1090BAFA EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x2394C348 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x2C1E816D EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x3408E470 EQ PUSH2 0x264 JUMPI PUSH2 0x156 JUMP JUMPDEST CALLDATASIZE PUSH2 0x156 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0x1DE1 JUMP JUMPDEST PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x2171 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CC SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x2249 JUMP JUMPDEST PUSH2 0x702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x209 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x239 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x22FB JUMP JUMPDEST PUSH2 0x717 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0x2357 JUMP JUMPDEST PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x279 PUSH2 0x7CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x23AE JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x914 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E4 PUSH2 0x928 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x308 SWAP2 SWAP1 PUSH2 0x2171 JUMP JUMPDEST PUSH2 0x9B7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x324 PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x337 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x22FB JUMP JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x374 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x392 PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CA SWAP2 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DC SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x23AE JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x430 SWAP2 SWAP1 PUSH2 0x2357 JUMP JUMPDEST PUSH2 0xF49 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x43F PUSH2 0xFFE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x1000 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x493 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x27A2 JUMP JUMPDEST PUSH2 0x102A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4CB SWAP2 SWAP1 PUSH2 0x22FB JUMP JUMPDEST PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4DD SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x27EB JUMP JUMPDEST PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51A SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x545 SWAP2 SWAP1 PUSH2 0x2357 JUMP JUMPDEST PUSH2 0x10C4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x558 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x573 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56E SWAP2 SWAP1 PUSH2 0x2885 JUMP JUMPDEST PUSH2 0x1171 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x597 SWAP2 SWAP1 PUSH2 0x27A2 JUMP JUMPDEST PUSH2 0x118B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A9 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x67D JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x6E5 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6F8 DUP4 DUP4 PUSH2 0x11BF JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x71F PUSH2 0x12D2 JUMP JUMPDEST DUP1 PUSH1 0x9 DUP4 PUSH1 0x40 MLOAD PUSH2 0x730 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x788 PUSH2 0x12D2 JUMP JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7DC PUSH2 0x1359 JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 DUP3 PUSH1 0x40 MLOAD PUSH2 0x805 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x8C2 JUMPI POP PUSH1 0x9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x863 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x8F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8062D7400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x905 DUP6 DUP6 DUP6 DUP6 PUSH2 0x139D JUMP JUMPDEST POP PUSH2 0x90E PUSH2 0x1544 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x91C PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x926 PUSH1 0x0 PUSH2 0x154E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x932 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x953 PUSH2 0x1000 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9AB JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A2 SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B4 DUP2 PUSH2 0x154E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x9BF PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x9C9 DUP3 DUP3 PUSH2 0x11BF JUMP JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD PUSH1 0xA DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x9E2 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0xA69 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4CA4C0B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD PUSH1 0xA DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xA82 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xAF1 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x139D JUMP JUMPDEST PUSH2 0xAF9 PUSH2 0x1544 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0xB11 PUSH2 0x1587 JUMP JUMPDEST PUSH2 0xB19 PUSH2 0x15C2 JUMP JUMPDEST CHAINID ADDRESS PUSH1 0x0 DUP1 SHL PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB3A JUMPI PUSH2 0xB39 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB68 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xBB9 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC59 PUSH2 0x1359 JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 DUP3 PUSH1 0x40 MLOAD PUSH2 0xC82 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xD3F JUMPI POP PUSH1 0x9 DUP2 PUSH1 0x40 MLOAD PUSH2 0xCE0 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8062D7400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDDC JUMPI PUSH1 0x40 MLOAD PUSH32 0xCDF1F8F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE04 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEAC JUMPI DUP5 PUSH1 0x9 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE5F SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x295B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF2C SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST POP PUSH2 0xF39 DUP7 DUP7 DUP7 DUP7 PUSH2 0x15FD JUMP JUMPDEST POP POP PUSH2 0xF43 PUSH2 0x1544 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xF51 PUSH2 0x12D2 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xF7C SWAP1 PUSH2 0x2A1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xFB9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xFF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x90B8EC1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xA DUP3 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x12D2 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x112C PUSH2 0xC10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x1179 PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x1185 DUP4 DUP6 DUP5 DUP5 PUSH2 0x139D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1235 PUSH32 0xA3B140137DDE1EC8F85DA0FADAC4C5D6C5410186CA811CBE1E3D5FB737DFB2F6 DUP4 PUSH1 0x0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x121A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x16B5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1243 DUP3 DUP6 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x815E1D6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x12DA PUSH2 0x157F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12F8 PUSH2 0xC10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1357 JUMPI PUSH2 0x131B PUSH2 0x157F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x134E SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD SUB PUSH2 0x1394 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST DUP1 PUSH1 0x6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x13AE SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x144A JUMPI DUP4 PUSH1 0x2 DUP4 PUSH1 0x0 DUP5 PUSH1 0x40 MLOAD PUSH32 0x3FF3E6F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1441 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x145B SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x14B8 SWAP2 SWAP1 PUSH2 0x2BD7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14FA SWAP3 SWAP2 SWAP1 PUSH2 0x2C0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1519 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x153D SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x157C DUP2 PUSH2 0x16FB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15BD PUSH1 0x3 PUSH32 0x0 PUSH2 0x17BF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15F8 PUSH1 0x4 PUSH32 0x0 PUSH2 0x17BF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x160E SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x166B SWAP2 SWAP1 PUSH2 0x2C34 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x80B0529195F12DF0318651D4B36FFC81B7B3CB429033916C20D71E8D2E219AE3 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x16A7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16C8 PUSH2 0x16C2 PUSH2 0x186F JUMP JUMPDEST DUP4 PUSH2 0x1926 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x16DF DUP7 DUP7 PUSH2 0x1967 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x16EF DUP3 DUP3 PUSH2 0x19C3 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH1 0x0 SHL DUP4 EQ PUSH2 0x17DC JUMPI PUSH2 0x17D5 DUP4 PUSH2 0x1B27 JUMP JUMPDEST SWAP1 POP PUSH2 0x1869 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x17E8 SWAP1 PUSH2 0x2CE3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1814 SWAP1 PUSH2 0x2CE3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1861 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1836 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1861 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1844 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x18EB JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x1918 JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0x1923 JUMP JUMPDEST PUSH2 0x1920 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x41 DUP5 MLOAD SUB PUSH2 0x19AC JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0x199E DUP9 DUP3 DUP6 DUP6 PUSH2 0x1C31 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP6 MLOAD PUSH1 0x0 SHL SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x19D7 JUMPI PUSH2 0x19D6 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1B23 JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A04 JUMPI PUSH2 0x1A03 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A17 JUMPI PUSH2 0x1A16 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1A4E JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A62 JUMPI PUSH2 0x1A61 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A75 JUMPI PUSH2 0x1A74 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1ABA JUMPI DUP1 PUSH1 0x0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AB1 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1ACD JUMPI PUSH2 0x1ACC PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1AE0 JUMPI PUSH2 0x1ADF PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1B22 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B19 SWAP2 SWAP1 PUSH2 0x2D14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B34 DUP4 PUSH2 0x1D25 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B53 JUMPI PUSH2 0x1B52 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B85 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C16 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH1 0x0 SHR GT ISZERO PUSH2 0x1C71 JUMPI PUSH1 0x0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1C96 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D0C JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x1D1B JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xFF DUP4 PUSH1 0x0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DBE DUP2 PUSH2 0x1D89 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1DDB DUP2 PUSH2 0x1DB5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DF7 JUMPI PUSH2 0x1DF6 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E05 DUP5 DUP3 DUP6 ADD PUSH2 0x1DCC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E23 DUP2 PUSH2 0x1E0E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E3E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1E1A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E97 DUP3 PUSH2 0x1E4E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1EB6 JUMPI PUSH2 0x1EB5 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EC9 PUSH2 0x1D75 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ED5 DUP3 DUP3 PUSH2 0x1E8E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1EF5 JUMPI PUSH2 0x1EF4 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH2 0x1EFE DUP3 PUSH2 0x1E4E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2D PUSH2 0x1F28 DUP5 PUSH2 0x1EDA JUMP JUMPDEST PUSH2 0x1EBF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1F49 JUMPI PUSH2 0x1F48 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH2 0x1F54 DUP5 DUP3 DUP6 PUSH2 0x1F0B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F71 JUMPI PUSH2 0x1F70 PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F81 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1F1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FAF JUMPI PUSH2 0x1FAE PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH2 0x1FB8 DUP3 PUSH2 0x1E4E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FD8 PUSH2 0x1FD3 DUP5 PUSH2 0x1F94 JUMP JUMPDEST PUSH2 0x1EBF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1FF4 JUMPI PUSH2 0x1FF3 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH2 0x1FFF DUP5 DUP3 DUP6 PUSH2 0x1F0B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x201C JUMPI PUSH2 0x201B PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x202C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1FC5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2060 DUP3 PUSH2 0x2035 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2070 DUP2 PUSH2 0x2055 JUMP JUMPDEST DUP2 EQ PUSH2 0x207B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x208D DUP2 PUSH2 0x2067 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20A6 DUP2 PUSH2 0x2093 JUMP JUMPDEST DUP2 EQ PUSH2 0x20B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20C3 DUP2 PUSH2 0x209D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20DF JUMPI PUSH2 0x20DE PUSH2 0x1F8A JUMP JUMPDEST JUMPDEST PUSH2 0x20E9 PUSH1 0xA0 PUSH2 0x1EBF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2109 JUMPI PUSH2 0x2108 PUSH2 0x1F8F JUMP JUMPDEST JUMPDEST PUSH2 0x2115 DUP5 DUP3 DUP6 ADD PUSH2 0x2007 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2129 DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x213D DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x2151 DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x2165 DUP5 DUP3 DUP6 ADD PUSH2 0x20B4 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2188 JUMPI PUSH2 0x2187 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21A6 JUMPI PUSH2 0x21A5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x1F5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21D3 JUMPI PUSH2 0x21D2 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x21DF DUP6 DUP3 DUP7 ADD PUSH2 0x20C9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2209 JUMPI PUSH2 0x2208 PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2226 JUMPI PUSH2 0x2225 PUSH2 0x21E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2242 JUMPI PUSH2 0x2241 PUSH2 0x21EE JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2265 JUMPI PUSH2 0x2264 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2273 DUP9 DUP3 DUP10 ADD PUSH2 0x207E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2284 DUP9 DUP3 DUP10 ADD PUSH2 0x207E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2295 DUP9 DUP3 DUP10 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22B6 JUMPI PUSH2 0x22B5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x22C2 DUP9 DUP3 DUP10 ADD PUSH2 0x21F3 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x22DA DUP2 PUSH2 0x1D89 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x22F5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22D1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2312 JUMPI PUSH2 0x2311 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2330 JUMPI PUSH2 0x232F PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x233C DUP6 DUP3 DUP7 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x234D DUP6 DUP3 DUP7 ADD PUSH2 0x207E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x236D JUMPI PUSH2 0x236C PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x237B DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x238D DUP2 PUSH2 0x2093 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x23A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x23C8 JUMPI PUSH2 0x23C7 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23E6 JUMPI PUSH2 0x23E5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x23F2 DUP8 DUP3 DUP9 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2403 DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2414 DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x2425 DUP8 DUP3 DUP9 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2466 DUP2 PUSH2 0x2431 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x24A6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x248B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24BD DUP3 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x24C7 DUP2 DUP6 PUSH2 0x2477 JUMP JUMPDEST SWAP4 POP PUSH2 0x24D7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2488 JUMP JUMPDEST PUSH2 0x24E0 DUP2 PUSH2 0x1E4E JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x24F4 DUP2 PUSH2 0x2055 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x250D DUP2 PUSH2 0x24FA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2548 DUP2 PUSH2 0x2093 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x255A DUP4 DUP4 PUSH2 0x253F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x257E DUP3 PUSH2 0x2513 JUMP JUMPDEST PUSH2 0x2588 DUP2 DUP6 PUSH2 0x251E JUMP JUMPDEST SWAP4 POP PUSH2 0x2593 DUP4 PUSH2 0x252F JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25C4 JUMPI DUP2 MLOAD PUSH2 0x25AB DUP9 DUP3 PUSH2 0x254E JUMP JUMPDEST SWAP8 POP PUSH2 0x25B6 DUP4 PUSH2 0x2566 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2597 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x25E6 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x245D JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x25F8 DUP2 DUP10 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x260C DUP2 DUP9 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x261B PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x2628 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2635 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2504 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x2647 DUP2 DUP5 PUSH2 0x2573 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x266A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2686 JUMPI PUSH2 0x2685 PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A3 JUMPI PUSH2 0x26A2 PUSH2 0x21E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x26BF JUMPI PUSH2 0x26BE PUSH2 0x21EE JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x26E6 JUMPI PUSH2 0x26E5 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26F4 DUP12 DUP3 DUP13 ADD PUSH2 0x207E JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x2705 DUP12 DUP3 DUP13 ADD PUSH2 0x207E JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2726 JUMPI PUSH2 0x2725 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2732 DUP12 DUP3 DUP13 ADD PUSH2 0x2670 JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2755 JUMPI PUSH2 0x2754 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2761 DUP12 DUP3 DUP13 ADD PUSH2 0x2670 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2784 JUMPI PUSH2 0x2783 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2790 DUP12 DUP3 DUP13 ADD PUSH2 0x21F3 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27B8 JUMPI PUSH2 0x27B7 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27D6 JUMPI PUSH2 0x27D5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x27E2 DUP5 DUP3 DUP6 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2808 JUMPI PUSH2 0x2807 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2816 DUP10 DUP3 DUP11 ADD PUSH2 0x207E JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2827 DUP10 DUP3 DUP11 ADD PUSH2 0x207E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x2838 DUP10 DUP3 DUP11 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x2849 DUP10 DUP3 DUP11 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x286A JUMPI PUSH2 0x2869 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2876 DUP10 DUP3 DUP11 ADD PUSH2 0x21F3 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x289F JUMPI PUSH2 0x289E PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28AD DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28CE JUMPI PUSH2 0x28CD PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x28DA DUP8 DUP3 DUP9 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x28EB DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x28FC DUP8 DUP3 DUP9 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x291E DUP3 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x2928 DUP2 DUP6 PUSH2 0x2908 JUMP JUMPDEST SWAP4 POP PUSH2 0x2938 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2488 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2950 DUP3 DUP5 PUSH2 0x2913 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2970 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x297D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x298A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x299B DUP2 PUSH2 0x1E0E JUMP JUMPDEST DUP2 EQ PUSH2 0x29A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x29B8 DUP2 PUSH2 0x2992 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29D4 JUMPI PUSH2 0x29D3 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29E2 DUP5 DUP3 DUP6 ADD PUSH2 0x29A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A06 PUSH1 0x0 DUP4 PUSH2 0x29EB JUMP JUMPDEST SWAP2 POP PUSH2 0x2A11 DUP3 PUSH2 0x29F6 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A27 DUP3 PUSH2 0x29F9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x2A46 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2A53 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2A60 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2A6D PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2A7A PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2A87 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x2AD2 JUMPI PUSH2 0x2AD1 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x2AE3 DUP3 PUSH2 0x2AC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF3 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B03 DUP2 PUSH2 0x2AE8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B38 PUSH2 0x2B33 PUSH2 0x2B2E DUP5 PUSH2 0x2B09 JUMP JUMPDEST PUSH2 0x2B13 JUMP JUMPDEST PUSH2 0x2093 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B48 DUP2 PUSH2 0x2B1D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B68 DUP2 DUP9 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B77 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2AFA JUMP JUMPDEST PUSH2 0x2B84 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2B91 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2B3F JUMP JUMPDEST PUSH2 0x2B9E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2BE2 DUP3 PUSH2 0x2093 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BED DUP4 PUSH2 0x2093 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2C05 JUMPI PUSH2 0x2C04 PUSH2 0x2BA8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2C20 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2C2D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C3F DUP3 PUSH2 0x2093 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C4A DUP4 PUSH2 0x2093 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2C62 JUMPI PUSH2 0x2C61 PUSH2 0x2BA8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C82 DUP2 DUP8 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C91 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2C9E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2CAB PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2CFB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2D0E JUMPI PUSH2 0x2D0D PUSH2 0x2CB4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D29 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2504 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2D44 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2D51 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2D5E PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2D6B PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x2D78 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x24EB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D98 DUP2 PUSH2 0x2D82 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DB3 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2DC0 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2D8F JUMP JUMPDEST PUSH2 0x2DCD PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2DDA PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2504 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xA7 DUP15 DUP8 0xC3 SWAP7 0xC9 BASEFEE PUSH15 0xF43FD0DA495C3C4ED4CA9B8E2C03DB SWAP6 ADD CALL PUSH32 0x1D94A53A64736F6C634300081800330000000000000000000000000000000000 ","sourceMap":"334:4219:19:-:0;;;580:1:20;551:30;;1439:130:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3328:431:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1486:10:19;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;1713:1:9;1917:7;:21;;;;3401:45:14;3432:13;3401:4;:30;;;;:45;;;;:::i;:::-;3393:53;;;;;;3467:51;3501:16;3467:7;:33;;;;:51;;;;:::i;:::-;3456:62;;;;;;3558:4;3542:22;;;;;;3528:36;;;;;;3607:7;3591:25;;;;;;3574:42;;;;;;3644:13;3627:30;;;;;;3692:23;:21;;;:23;;:::i;:::-;3667:48;;;;;;3747:4;3725:27;;;;;;;;;;3328:431;;1551:13:19::2;1536:12;;:28;;;;;;;;;;;;;;;;;;1439:130:::0;334:4219;;1528:153:1;1617:13;;1610:20;;;;;;;;;;;1640:34;1665:8;1640:24;;;:34;;:::i;:::-;1528:153;:::o;2914:340:10:-;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;;;:20;;:::i;:::-;3077:27;;;;3033:215;3176:5;3135:32;3161:5;3135:25;;;:32;;:::i;:::-;:38;;:46;;;;;;:::i;:::-;;1390:66;3219:17;;3195:42;;2914:340;;;;;:::o;4113:179:14:-;4168:7;2079:95;4226:11;;4239:14;;4255:13;4278:4;4204:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;1708:286:10:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;;;;;;;;;;:::i;:::-;;;;;;;;1836:72;1974:4;:11;1965:4;1957:13;;;:::i;:::-;1949:22;;:36;1941:45;;1917:70;;;1708:286;;;:::o;3135:202:11:-;3203:20;3311:10;3301:20;;3135:202;;;:::o;88:117:21:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:118::-;1289:24;1307:5;1289:24;:::i;:::-;1284:3;1277:37;1202:118;;:::o;1326:222::-;1419:4;1457:2;1446:9;1442:18;1434:26;;1470:71;1538:1;1527:9;1523:17;1514:6;1470:71;:::i;:::-;1326:222;;;;:::o;1554:99::-;1606:6;1640:5;1634:12;1624:22;;1554:99;;;:::o;1659:180::-;1707:77;1704:1;1697:88;1804:4;1801:1;1794:15;1828:4;1825:1;1818:15;1845:180;1893:77;1890:1;1883:88;1990:4;1987:1;1980:15;2014:4;2011:1;2004:15;2031:320;2075:6;2112:1;2106:4;2102:12;2092:22;;2159:1;2153:4;2149:12;2180:18;2170:81;;2236:4;2228:6;2224:17;2214:27;;2170:81;2298:2;2290:6;2287:14;2267:18;2264:38;2261:84;;2317:18;;:::i;:::-;2261:84;2082:269;2031:320;;;:::o;2357:141::-;2406:4;2429:3;2421:11;;2452:3;2449:1;2442:14;2486:4;2483:1;2473:18;2465:26;;2357:141;;;:::o;2504:93::-;2541:6;2588:2;2583;2576:5;2572:14;2568:23;2558:33;;2504:93;;;:::o;2603:107::-;2647:8;2697:5;2691:4;2687:16;2666:37;;2603:107;;;;:::o;2716:393::-;2785:6;2835:1;2823:10;2819:18;2858:97;2888:66;2877:9;2858:97;:::i;:::-;2976:39;3006:8;2995:9;2976:39;:::i;:::-;2964:51;;3048:4;3044:9;3037:5;3033:21;3024:30;;3097:4;3087:8;3083:19;3076:5;3073:30;3063:40;;2792:317;;2716:393;;;;;:::o;3115:77::-;3152:7;3181:5;3170:16;;3115:77;;;:::o;3198:60::-;3226:3;3247:5;3240:12;;3198:60;;;:::o;3264:142::-;3314:9;3347:53;3365:34;3374:24;3392:5;3374:24;:::i;:::-;3365:34;:::i;:::-;3347:53;:::i;:::-;3334:66;;3264:142;;;:::o;3412:75::-;3455:3;3476:5;3469:12;;3412:75;;;:::o;3493:269::-;3603:39;3634:7;3603:39;:::i;:::-;3664:91;3713:41;3737:16;3713:41;:::i;:::-;3705:6;3698:4;3692:11;3664:91;:::i;:::-;3658:4;3651:105;3569:193;3493:269;;;:::o;3768:73::-;3813:3;3768:73;:::o;3847:189::-;3924:32;;:::i;:::-;3965:65;4023:6;4015;4009:4;3965:65;:::i;:::-;3900:136;3847:189;;:::o;4042:186::-;4102:120;4119:3;4112:5;4109:14;4102:120;;;4173:39;4210:1;4203:5;4173:39;:::i;:::-;4146:1;4139:5;4135:13;4126:22;;4102:120;;;4042:186;;:::o;4234:543::-;4335:2;4330:3;4327:11;4324:446;;;4369:38;4401:5;4369:38;:::i;:::-;4453:29;4471:10;4453:29;:::i;:::-;4443:8;4439:44;4636:2;4624:10;4621:18;4618:49;;;4657:8;4642:23;;4618:49;4680:80;4736:22;4754:3;4736:22;:::i;:::-;4726:8;4722:37;4709:11;4680:80;:::i;:::-;4339:431;;4324:446;4234:543;;;:::o;4783:117::-;4837:8;4887:5;4881:4;4877:16;4856:37;;4783:117;;;;:::o;4906:169::-;4950:6;4983:51;5031:1;5027:6;5019:5;5016:1;5012:13;4983:51;:::i;:::-;4979:56;5064:4;5058;5054:15;5044:25;;4957:118;4906:169;;;;:::o;5080:295::-;5156:4;5302:29;5327:3;5321:4;5302:29;:::i;:::-;5294:37;;5364:3;5361:1;5357:11;5351:4;5348:21;5340:29;;5080:295;;;;:::o;5380:1395::-;5497:37;5530:3;5497:37;:::i;:::-;5599:18;5591:6;5588:30;5585:56;;;5621:18;;:::i;:::-;5585:56;5665:38;5697:4;5691:11;5665:38;:::i;:::-;5750:67;5810:6;5802;5796:4;5750:67;:::i;:::-;5844:1;5868:4;5855:17;;5900:2;5892:6;5889:14;5917:1;5912:618;;;;6574:1;6591:6;6588:77;;;6640:9;6635:3;6631:19;6625:26;6616:35;;6588:77;6691:67;6751:6;6744:5;6691:67;:::i;:::-;6685:4;6678:81;6547:222;5882:887;;5912:618;5964:4;5960:9;5952:6;5948:22;5998:37;6030:4;5998:37;:::i;:::-;6057:1;6071:208;6085:7;6082:1;6079:14;6071:208;;;6164:9;6159:3;6155:19;6149:26;6141:6;6134:42;6215:1;6207:6;6203:14;6193:24;;6262:2;6251:9;6247:18;6234:31;;6108:4;6105:1;6101:12;6096:17;;6071:208;;;6307:6;6298:7;6295:19;6292:179;;;6365:9;6360:3;6356:19;6350:26;6408:48;6450:4;6442:6;6438:17;6427:9;6408:48;:::i;:::-;6400:6;6393:64;6315:156;6292:179;6517:1;6513;6505:6;6501:14;6497:22;6491:4;6484:36;5919:611;;;5882:887;;5472:1303;;;5380:1395;;:::o;6781:77::-;6818:7;6847:5;6836:16;;6781:77;;;:::o;6864:118::-;6951:24;6969:5;6951:24;:::i;:::-;6946:3;6939:37;6864:118;;:::o;6988:::-;7075:24;7093:5;7075:24;:::i;:::-;7070:3;7063:37;6988:118;;:::o;7112:664::-;7317:4;7355:3;7344:9;7340:19;7332:27;;7369:71;7437:1;7426:9;7422:17;7413:6;7369:71;:::i;:::-;7450:72;7518:2;7507:9;7503:18;7494:6;7450:72;:::i;:::-;7532;7600:2;7589:9;7585:18;7576:6;7532:72;:::i;:::-;7614;7682:2;7671:9;7667:18;7658:6;7614:72;:::i;:::-;7696:73;7764:3;7753:9;7749:19;7740:6;7696:73;:::i;:::-;7112:664;;;;;;;;:::o;7782:169::-;7866:11;7900:6;7895:3;7888:19;7940:4;7935:3;7931:14;7916:29;;7782:169;;;;:::o;7957:246::-;8038:1;8048:113;8062:6;8059:1;8056:13;8048:113;;;8147:1;8142:3;8138:11;8132:18;8128:1;8123:3;8119:11;8112:39;8084:2;8081:1;8077:10;8072:15;;8048:113;;;8195:1;8186:6;8181:3;8177:16;8170:27;8019:184;7957:246;;;:::o;8209:102::-;8250:6;8301:2;8297:7;8292:2;8285:5;8281:14;8277:28;8267:38;;8209:102;;;:::o;8317:377::-;8405:3;8433:39;8466:5;8433:39;:::i;:::-;8488:71;8552:6;8547:3;8488:71;:::i;:::-;8481:78;;8568:65;8626:6;8621:3;8614:4;8607:5;8603:16;8568:65;:::i;:::-;8658:29;8680:6;8658:29;:::i;:::-;8653:3;8649:39;8642:46;;8409:285;8317:377;;;;:::o;8700:313::-;8813:4;8851:2;8840:9;8836:18;8828:26;;8900:9;8894:4;8890:20;8886:1;8875:9;8871:17;8864:47;8928:78;9001:4;8992:6;8928:78;:::i;:::-;8920:86;;8700:313;;;;:::o;9019:98::-;9070:6;9104:5;9098:12;9088:22;;9019:98;;;:::o;9123:116::-;9174:4;9197:3;9189:11;;9227:4;9222:3;9218:14;9210:22;;9123:116;;;:::o;9245:154::-;9288:11;9324:29;9348:3;9342:10;9324:29;:::i;:::-;9387:5;9363:29;;9300:99;9245:154;;;:::o;9405:594::-;9489:5;9520:38;9552:5;9520:38;:::i;:::-;9583:5;9610:40;9644:5;9610:40;:::i;:::-;9598:52;;9669:35;9695:8;9669:35;:::i;:::-;9660:44;;9728:2;9720:6;9717:14;9714:278;;;9799:169;9884:66;9854:6;9850:2;9846:15;9843:1;9839:23;9799:169;:::i;:::-;9776:5;9755:227;9746:236;;9714:278;9495:504;;9405:594;;;:::o;334:4219:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_3785":{"entryPoint":null,"id":3785,"parameterSlots":0,"returnSlots":0},"@_EIP712Name_1879":{"entryPoint":5511,"id":1879,"parameterSlots":0,"returnSlots":1},"@_EIP712Version_1891":{"entryPoint":5570,"id":1891,"parameterSlots":0,"returnSlots":1},"@_buildDomainSeparator_1809":{"entryPoint":7067,"id":1809,"parameterSlots":0,"returnSlots":1},"@_checkOwner_84":{"entryPoint":4818,"id":84,"parameterSlots":0,"returnSlots":0},"@_domainSeparatorV4_1788":{"entryPoint":6255,"id":1788,"parameterSlots":0,"returnSlots":1},"@_fundERC20_3835":{"entryPoint":5629,"id":3835,"parameterSlots":4,"returnSlots":0},"@_hashTypedDataV4_1825":{"entryPoint":5813,"id":1825,"parameterSlots":1,"returnSlots":1},"@_msgSender_648":{"entryPoint":5503,"id":648,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_723":{"entryPoint":5444,"id":723,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_715":{"entryPoint":4953,"id":715,"parameterSlots":0,"returnSlots":0},"@_throwError_1664":{"entryPoint":6595,"id":1664,"parameterSlots":2,"returnSlots":0},"@_transferERC20_4102":{"entryPoint":5021,"id":4102,"parameterSlots":4,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":5883,"id":146,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_208":{"entryPoint":5454,"id":208,"parameterSlots":1,"returnSlots":0},"@_verify_3321":{"entryPoint":4543,"id":3321,"parameterSlots":2,"returnSlots":0},"@acceptOwnership_232":{"entryPoint":2344,"id":232,"parameterSlots":0,"returnSlots":0},"@adminTransferAirdropOwnership_3508":{"entryPoint":1815,"id":3508,"parameterSlots":2,"returnSlots":0},"@adminWithdrawERC20_3560":{"entryPoint":4465,"id":3560,"parameterSlots":4,"returnSlots":0},"@adminWithdrawNative_3539":{"entryPoint":3913,"id":3539,"parameterSlots":1,"returnSlots":0},"@airdropClaimedAmounts_3174":{"entryPoint":4211,"id":3174,"parameterSlots":0,"returnSlots":0},"@airdropOwners_3168":{"entryPoint":4138,"id":3168,"parameterSlots":0,"returnSlots":0},"@byteLength_853":{"entryPoint":7461,"id":853,"parameterSlots":1,"returnSlots":1},"@claimAirdrop_3392":{"entryPoint":2487,"id":3392,"parameterSlots":2,"returnSlots":0},"@contractBalance_3605":{"entryPoint":4491,"id":3605,"parameterSlots":0,"returnSlots":0},"@eip712Domain_1867":{"entryPoint":2813,"id":1867,"parameterSlots":0,"returnSlots":7},"@fundERC20_3468":{"entryPoint":3153,"id":3468,"parameterSlots":4,"returnSlots":0},"@fundNative_3396":{"entryPoint":4094,"id":3396,"parameterSlots":0,"returnSlots":0},"@getBalance_3413":{"entryPoint":2983,"id":3413,"parameterSlots":2,"returnSlots":1},"@getChainId_3270":{"entryPoint":1996,"id":3270,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_4365":{"entryPoint":3129,"id":4365,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_4344":{"entryPoint":4270,"id":4344,"parameterSlots":6,"returnSlots":1},"@onERC721Received_4325":{"entryPoint":1794,"id":4325,"parameterSlots":5,"returnSlots":1},"@owner_67":{"entryPoint":3088,"id":67,"parameterSlots":0,"returnSlots":1},"@pendingOwner_171":{"entryPoint":4096,"id":171,"parameterSlots":0,"returnSlots":1},"@recover_1421":{"entryPoint":5839,"id":1421,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_98":{"entryPoint":2324,"id":98,"parameterSlots":0,"returnSlots":0},"@setAdminAddress_3261":{"entryPoint":1920,"id":3261,"parameterSlots":1,"returnSlots":0},"@supportsInterface_4395":{"entryPoint":1458,"id":4395,"parameterSlots":1,"returnSlots":1},"@toStringWithFallback_920":{"entryPoint":6079,"id":920,"parameterSlots":2,"returnSlots":1},"@toString_821":{"entryPoint":6951,"id":821,"parameterSlots":1,"returnSlots":1},"@toTypedDataHash_1965":{"entryPoint":6438,"id":1965,"parameterSlots":2,"returnSlots":1},"@transferOwnership_191":{"entryPoint":4292,"id":191,"parameterSlots":1,"returnSlots":0},"@tryRecover_1391":{"entryPoint":6503,"id":1391,"parameterSlots":2,"returnSlots":3},"@tryRecover_1579":{"entryPoint":7217,"id":1579,"parameterSlots":4,"returnSlots":3},"@verify_3339":{"entryPoint":1772,"id":3339,"parameterSlots":2,"returnSlots":1},"@withdrawERC20_3492":{"entryPoint":2004,"id":3492,"parameterSlots":4,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":7962,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":8133,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":8318,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9840,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bool_fromMemory":{"entryPoint":10665,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":7628,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":8691,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes_memory_ptr":{"entryPoint":8028,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":8199,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_AirdropMessage_$3185_memory_ptr":{"entryPoint":8393,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":8372,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":9926,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":8777,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":10219,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_string_memory_ptrt_addresst_uint256":{"entryPoint":10373,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10686,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":7649,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptrt_struct$_AirdropMessage_$3185_memory_ptr":{"entryPoint":8561,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":10146,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_address":{"entryPoint":8955,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_string_memory_ptrt_addresst_addresst_uint256":{"entryPoint":9134,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":9550,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9451,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":9587,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":7706,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes1_to_t_bytes1_fromStack":{"entryPoint":9309,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":9476,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes4_to_t_bytes4_fromStack":{"entryPoint":8913,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_enum$_AssetType_$3578_to_t_uint8_fromStack":{"entryPoint":11002,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack":{"entryPoint":11071,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9394,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10515,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10745,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":9535,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9092,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":11663,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10564,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10780,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9813,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":10587,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":11275,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":7721,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9681,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":11540,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_address_t_address_t_uint256__to_t_bytes32_t_bytes32_t_address_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":10801,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":11567,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":11678,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":8928,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_address_t_address_t_uint256__to_t_string_memory_ptr_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":11368,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_enum$_AssetType_$3578_t_address_t_rational_0_by_1_t_uint256__to_t_string_memory_ptr_t_uint8_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":11086,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9107,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7871,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":7541,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7898,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":8084,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9519,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9491,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":9324,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9574,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":9502,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10731,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9335,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":10504,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11316,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11223,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":8277,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":7694,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes1":{"entryPoint":9265,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9466,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":7561,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_AssetType_$3578":{"entryPoint":10965,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_0_by_1":{"entryPoint":11017,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":8245,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":8339,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":11650,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_AssetType_$3578_to_t_uint8":{"entryPoint":10984,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_0_by_1_to_t_uint256":{"entryPoint":11037,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":7947,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9352,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":11491,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7822,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":11027,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":11176,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":10898,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":11444,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7775,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":8681,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":7748,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":8074,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":8079,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":8686,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":7753,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":7556,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":7551,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":7758,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":10742,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_AssetType_$3578":{"entryPoint":10945,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8295,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":10642,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":7605,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8349,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:31426:21","nodeType":"YulBlock","src":"0:31426:21","statements":[{"body":{"nativeSrc":"47:35:21","nodeType":"YulBlock","src":"47:35:21","statements":[{"nativeSrc":"57:19:21","nodeType":"YulAssignment","src":"57:19:21","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:21","nodeType":"YulLiteral","src":"73:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:21","nodeType":"YulIdentifier","src":"67:5:21"},"nativeSrc":"67:9:21","nodeType":"YulFunctionCall","src":"67:9:21"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:21","nodeType":"YulIdentifier","src":"57:6:21"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:21","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:21","nodeType":"YulTypedName","src":"40:6:21","type":""}],"src":"7:75:21"},{"body":{"nativeSrc":"177:28:21","nodeType":"YulBlock","src":"177:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:21","nodeType":"YulLiteral","src":"194:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:21","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:21","nodeType":"YulIdentifier","src":"187:6:21"},"nativeSrc":"187:12:21","nodeType":"YulFunctionCall","src":"187:12:21"},"nativeSrc":"187:12:21","nodeType":"YulExpressionStatement","src":"187:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:21","nodeType":"YulFunctionDefinition","src":"88:117:21"},{"body":{"nativeSrc":"300:28:21","nodeType":"YulBlock","src":"300:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:21","nodeType":"YulLiteral","src":"317:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:21","nodeType":"YulLiteral","src":"320:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:21","nodeType":"YulIdentifier","src":"310:6:21"},"nativeSrc":"310:12:21","nodeType":"YulFunctionCall","src":"310:12:21"},"nativeSrc":"310:12:21","nodeType":"YulExpressionStatement","src":"310:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:21","nodeType":"YulFunctionDefinition","src":"211:117:21"},{"body":{"nativeSrc":"378:105:21","nodeType":"YulBlock","src":"378:105:21","statements":[{"nativeSrc":"388:89:21","nodeType":"YulAssignment","src":"388:89:21","value":{"arguments":[{"name":"value","nativeSrc":"403:5:21","nodeType":"YulIdentifier","src":"403:5:21"},{"kind":"number","nativeSrc":"410:66:21","nodeType":"YulLiteral","src":"410:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:21","nodeType":"YulIdentifier","src":"399:3:21"},"nativeSrc":"399:78:21","nodeType":"YulFunctionCall","src":"399:78:21"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:21","nodeType":"YulIdentifier","src":"388:7:21"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:21","nodeType":"YulTypedName","src":"360:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:21","nodeType":"YulTypedName","src":"370:7:21","type":""}],"src":"334:149:21"},{"body":{"nativeSrc":"531:78:21","nodeType":"YulBlock","src":"531:78:21","statements":[{"body":{"nativeSrc":"587:16:21","nodeType":"YulBlock","src":"587:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:21","nodeType":"YulLiteral","src":"596:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:21","nodeType":"YulLiteral","src":"599:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:21","nodeType":"YulIdentifier","src":"589:6:21"},"nativeSrc":"589:12:21","nodeType":"YulFunctionCall","src":"589:12:21"},"nativeSrc":"589:12:21","nodeType":"YulExpressionStatement","src":"589:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:21","nodeType":"YulIdentifier","src":"554:5:21"},{"arguments":[{"name":"value","nativeSrc":"578:5:21","nodeType":"YulIdentifier","src":"578:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:21","nodeType":"YulIdentifier","src":"561:16:21"},"nativeSrc":"561:23:21","nodeType":"YulFunctionCall","src":"561:23:21"}],"functionName":{"name":"eq","nativeSrc":"551:2:21","nodeType":"YulIdentifier","src":"551:2:21"},"nativeSrc":"551:34:21","nodeType":"YulFunctionCall","src":"551:34:21"}],"functionName":{"name":"iszero","nativeSrc":"544:6:21","nodeType":"YulIdentifier","src":"544:6:21"},"nativeSrc":"544:42:21","nodeType":"YulFunctionCall","src":"544:42:21"},"nativeSrc":"541:62:21","nodeType":"YulIf","src":"541:62:21"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:21","nodeType":"YulTypedName","src":"524:5:21","type":""}],"src":"489:120:21"},{"body":{"nativeSrc":"666:86:21","nodeType":"YulBlock","src":"666:86:21","statements":[{"nativeSrc":"676:29:21","nodeType":"YulAssignment","src":"676:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:21","nodeType":"YulIdentifier","src":"698:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:21","nodeType":"YulIdentifier","src":"685:12:21"},"nativeSrc":"685:20:21","nodeType":"YulFunctionCall","src":"685:20:21"},"variableNames":[{"name":"value","nativeSrc":"676:5:21","nodeType":"YulIdentifier","src":"676:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:21","nodeType":"YulIdentifier","src":"740:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:21","nodeType":"YulIdentifier","src":"714:25:21"},"nativeSrc":"714:32:21","nodeType":"YulFunctionCall","src":"714:32:21"},"nativeSrc":"714:32:21","nodeType":"YulExpressionStatement","src":"714:32:21"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:21","nodeType":"YulTypedName","src":"644:6:21","type":""},{"name":"end","nativeSrc":"652:3:21","nodeType":"YulTypedName","src":"652:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:21","nodeType":"YulTypedName","src":"660:5:21","type":""}],"src":"615:137:21"},{"body":{"nativeSrc":"823:262:21","nodeType":"YulBlock","src":"823:262:21","statements":[{"body":{"nativeSrc":"869:83:21","nodeType":"YulBlock","src":"869:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:21","nodeType":"YulIdentifier","src":"871:77:21"},"nativeSrc":"871:79:21","nodeType":"YulFunctionCall","src":"871:79:21"},"nativeSrc":"871:79:21","nodeType":"YulExpressionStatement","src":"871:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:21","nodeType":"YulIdentifier","src":"844:7:21"},{"name":"headStart","nativeSrc":"853:9:21","nodeType":"YulIdentifier","src":"853:9:21"}],"functionName":{"name":"sub","nativeSrc":"840:3:21","nodeType":"YulIdentifier","src":"840:3:21"},"nativeSrc":"840:23:21","nodeType":"YulFunctionCall","src":"840:23:21"},{"kind":"number","nativeSrc":"865:2:21","nodeType":"YulLiteral","src":"865:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:21","nodeType":"YulIdentifier","src":"836:3:21"},"nativeSrc":"836:32:21","nodeType":"YulFunctionCall","src":"836:32:21"},"nativeSrc":"833:119:21","nodeType":"YulIf","src":"833:119:21"},{"nativeSrc":"962:116:21","nodeType":"YulBlock","src":"962:116:21","statements":[{"nativeSrc":"977:15:21","nodeType":"YulVariableDeclaration","src":"977:15:21","value":{"kind":"number","nativeSrc":"991:1:21","nodeType":"YulLiteral","src":"991:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:21","nodeType":"YulTypedName","src":"981:6:21","type":""}]},{"nativeSrc":"1006:62:21","nodeType":"YulAssignment","src":"1006:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:21","nodeType":"YulIdentifier","src":"1040:9:21"},{"name":"offset","nativeSrc":"1051:6:21","nodeType":"YulIdentifier","src":"1051:6:21"}],"functionName":{"name":"add","nativeSrc":"1036:3:21","nodeType":"YulIdentifier","src":"1036:3:21"},"nativeSrc":"1036:22:21","nodeType":"YulFunctionCall","src":"1036:22:21"},{"name":"dataEnd","nativeSrc":"1060:7:21","nodeType":"YulIdentifier","src":"1060:7:21"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:21","nodeType":"YulIdentifier","src":"1016:19:21"},"nativeSrc":"1016:52:21","nodeType":"YulFunctionCall","src":"1016:52:21"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:21","nodeType":"YulIdentifier","src":"1006:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:21","nodeType":"YulTypedName","src":"793:9:21","type":""},{"name":"dataEnd","nativeSrc":"804:7:21","nodeType":"YulTypedName","src":"804:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:21","nodeType":"YulTypedName","src":"816:6:21","type":""}],"src":"758:327:21"},{"body":{"nativeSrc":"1133:48:21","nodeType":"YulBlock","src":"1133:48:21","statements":[{"nativeSrc":"1143:32:21","nodeType":"YulAssignment","src":"1143:32:21","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:21","nodeType":"YulIdentifier","src":"1168:5:21"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:21","nodeType":"YulIdentifier","src":"1161:6:21"},"nativeSrc":"1161:13:21","nodeType":"YulFunctionCall","src":"1161:13:21"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:21","nodeType":"YulIdentifier","src":"1154:6:21"},"nativeSrc":"1154:21:21","nodeType":"YulFunctionCall","src":"1154:21:21"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:21","nodeType":"YulIdentifier","src":"1143:7:21"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:21","nodeType":"YulTypedName","src":"1115:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:21","nodeType":"YulTypedName","src":"1125:7:21","type":""}],"src":"1091:90:21"},{"body":{"nativeSrc":"1246:50:21","nodeType":"YulBlock","src":"1246:50:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:21","nodeType":"YulIdentifier","src":"1263:3:21"},{"arguments":[{"name":"value","nativeSrc":"1283:5:21","nodeType":"YulIdentifier","src":"1283:5:21"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:21","nodeType":"YulIdentifier","src":"1268:14:21"},"nativeSrc":"1268:21:21","nodeType":"YulFunctionCall","src":"1268:21:21"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:21","nodeType":"YulIdentifier","src":"1256:6:21"},"nativeSrc":"1256:34:21","nodeType":"YulFunctionCall","src":"1256:34:21"},"nativeSrc":"1256:34:21","nodeType":"YulExpressionStatement","src":"1256:34:21"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:21","nodeType":"YulTypedName","src":"1234:5:21","type":""},{"name":"pos","nativeSrc":"1241:3:21","nodeType":"YulTypedName","src":"1241:3:21","type":""}],"src":"1187:109:21"},{"body":{"nativeSrc":"1394:118:21","nodeType":"YulBlock","src":"1394:118:21","statements":[{"nativeSrc":"1404:26:21","nodeType":"YulAssignment","src":"1404:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:21","nodeType":"YulIdentifier","src":"1416:9:21"},{"kind":"number","nativeSrc":"1427:2:21","nodeType":"YulLiteral","src":"1427:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:21","nodeType":"YulIdentifier","src":"1412:3:21"},"nativeSrc":"1412:18:21","nodeType":"YulFunctionCall","src":"1412:18:21"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:21","nodeType":"YulIdentifier","src":"1404:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:21","nodeType":"YulIdentifier","src":"1478:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:21","nodeType":"YulIdentifier","src":"1491:9:21"},{"kind":"number","nativeSrc":"1502:1:21","nodeType":"YulLiteral","src":"1502:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:21","nodeType":"YulIdentifier","src":"1487:3:21"},"nativeSrc":"1487:17:21","nodeType":"YulFunctionCall","src":"1487:17:21"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:21","nodeType":"YulIdentifier","src":"1440:37:21"},"nativeSrc":"1440:65:21","nodeType":"YulFunctionCall","src":"1440:65:21"},"nativeSrc":"1440:65:21","nodeType":"YulExpressionStatement","src":"1440:65:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:21","nodeType":"YulTypedName","src":"1366:9:21","type":""},{"name":"value0","nativeSrc":"1378:6:21","nodeType":"YulTypedName","src":"1378:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:21","nodeType":"YulTypedName","src":"1389:4:21","type":""}],"src":"1302:210:21"},{"body":{"nativeSrc":"1607:28:21","nodeType":"YulBlock","src":"1607:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1624:1:21","nodeType":"YulLiteral","src":"1624:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1627:1:21","nodeType":"YulLiteral","src":"1627:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1617:6:21","nodeType":"YulIdentifier","src":"1617:6:21"},"nativeSrc":"1617:12:21","nodeType":"YulFunctionCall","src":"1617:12:21"},"nativeSrc":"1617:12:21","nodeType":"YulExpressionStatement","src":"1617:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"1518:117:21","nodeType":"YulFunctionDefinition","src":"1518:117:21"},{"body":{"nativeSrc":"1730:28:21","nodeType":"YulBlock","src":"1730:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1747:1:21","nodeType":"YulLiteral","src":"1747:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1750:1:21","nodeType":"YulLiteral","src":"1750:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1740:6:21","nodeType":"YulIdentifier","src":"1740:6:21"},"nativeSrc":"1740:12:21","nodeType":"YulFunctionCall","src":"1740:12:21"},"nativeSrc":"1740:12:21","nodeType":"YulExpressionStatement","src":"1740:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"1641:117:21","nodeType":"YulFunctionDefinition","src":"1641:117:21"},{"body":{"nativeSrc":"1812:54:21","nodeType":"YulBlock","src":"1812:54:21","statements":[{"nativeSrc":"1822:38:21","nodeType":"YulAssignment","src":"1822:38:21","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1840:5:21","nodeType":"YulIdentifier","src":"1840:5:21"},{"kind":"number","nativeSrc":"1847:2:21","nodeType":"YulLiteral","src":"1847:2:21","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1836:3:21","nodeType":"YulIdentifier","src":"1836:3:21"},"nativeSrc":"1836:14:21","nodeType":"YulFunctionCall","src":"1836:14:21"},{"arguments":[{"kind":"number","nativeSrc":"1856:2:21","nodeType":"YulLiteral","src":"1856:2:21","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1852:3:21","nodeType":"YulIdentifier","src":"1852:3:21"},"nativeSrc":"1852:7:21","nodeType":"YulFunctionCall","src":"1852:7:21"}],"functionName":{"name":"and","nativeSrc":"1832:3:21","nodeType":"YulIdentifier","src":"1832:3:21"},"nativeSrc":"1832:28:21","nodeType":"YulFunctionCall","src":"1832:28:21"},"variableNames":[{"name":"result","nativeSrc":"1822:6:21","nodeType":"YulIdentifier","src":"1822:6:21"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"1764:102:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1795:5:21","nodeType":"YulTypedName","src":"1795:5:21","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1805:6:21","nodeType":"YulTypedName","src":"1805:6:21","type":""}],"src":"1764:102:21"},{"body":{"nativeSrc":"1900:152:21","nodeType":"YulBlock","src":"1900:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1917:1:21","nodeType":"YulLiteral","src":"1917:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1920:77:21","nodeType":"YulLiteral","src":"1920:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1910:6:21","nodeType":"YulIdentifier","src":"1910:6:21"},"nativeSrc":"1910:88:21","nodeType":"YulFunctionCall","src":"1910:88:21"},"nativeSrc":"1910:88:21","nodeType":"YulExpressionStatement","src":"1910:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2014:1:21","nodeType":"YulLiteral","src":"2014:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"2017:4:21","nodeType":"YulLiteral","src":"2017:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"2007:6:21","nodeType":"YulIdentifier","src":"2007:6:21"},"nativeSrc":"2007:15:21","nodeType":"YulFunctionCall","src":"2007:15:21"},"nativeSrc":"2007:15:21","nodeType":"YulExpressionStatement","src":"2007:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2038:1:21","nodeType":"YulLiteral","src":"2038:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2041:4:21","nodeType":"YulLiteral","src":"2041:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2031:6:21","nodeType":"YulIdentifier","src":"2031:6:21"},"nativeSrc":"2031:15:21","nodeType":"YulFunctionCall","src":"2031:15:21"},"nativeSrc":"2031:15:21","nodeType":"YulExpressionStatement","src":"2031:15:21"}]},"name":"panic_error_0x41","nativeSrc":"1872:180:21","nodeType":"YulFunctionDefinition","src":"1872:180:21"},{"body":{"nativeSrc":"2101:238:21","nodeType":"YulBlock","src":"2101:238:21","statements":[{"nativeSrc":"2111:58:21","nodeType":"YulVariableDeclaration","src":"2111:58:21","value":{"arguments":[{"name":"memPtr","nativeSrc":"2133:6:21","nodeType":"YulIdentifier","src":"2133:6:21"},{"arguments":[{"name":"size","nativeSrc":"2163:4:21","nodeType":"YulIdentifier","src":"2163:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2141:21:21","nodeType":"YulIdentifier","src":"2141:21:21"},"nativeSrc":"2141:27:21","nodeType":"YulFunctionCall","src":"2141:27:21"}],"functionName":{"name":"add","nativeSrc":"2129:3:21","nodeType":"YulIdentifier","src":"2129:3:21"},"nativeSrc":"2129:40:21","nodeType":"YulFunctionCall","src":"2129:40:21"},"variables":[{"name":"newFreePtr","nativeSrc":"2115:10:21","nodeType":"YulTypedName","src":"2115:10:21","type":""}]},{"body":{"nativeSrc":"2280:22:21","nodeType":"YulBlock","src":"2280:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2282:16:21","nodeType":"YulIdentifier","src":"2282:16:21"},"nativeSrc":"2282:18:21","nodeType":"YulFunctionCall","src":"2282:18:21"},"nativeSrc":"2282:18:21","nodeType":"YulExpressionStatement","src":"2282:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"2223:10:21","nodeType":"YulIdentifier","src":"2223:10:21"},{"kind":"number","nativeSrc":"2235:18:21","nodeType":"YulLiteral","src":"2235:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2220:2:21","nodeType":"YulIdentifier","src":"2220:2:21"},"nativeSrc":"2220:34:21","nodeType":"YulFunctionCall","src":"2220:34:21"},{"arguments":[{"name":"newFreePtr","nativeSrc":"2259:10:21","nodeType":"YulIdentifier","src":"2259:10:21"},{"name":"memPtr","nativeSrc":"2271:6:21","nodeType":"YulIdentifier","src":"2271:6:21"}],"functionName":{"name":"lt","nativeSrc":"2256:2:21","nodeType":"YulIdentifier","src":"2256:2:21"},"nativeSrc":"2256:22:21","nodeType":"YulFunctionCall","src":"2256:22:21"}],"functionName":{"name":"or","nativeSrc":"2217:2:21","nodeType":"YulIdentifier","src":"2217:2:21"},"nativeSrc":"2217:62:21","nodeType":"YulFunctionCall","src":"2217:62:21"},"nativeSrc":"2214:88:21","nodeType":"YulIf","src":"2214:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2318:2:21","nodeType":"YulLiteral","src":"2318:2:21","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"2322:10:21","nodeType":"YulIdentifier","src":"2322:10:21"}],"functionName":{"name":"mstore","nativeSrc":"2311:6:21","nodeType":"YulIdentifier","src":"2311:6:21"},"nativeSrc":"2311:22:21","nodeType":"YulFunctionCall","src":"2311:22:21"},"nativeSrc":"2311:22:21","nodeType":"YulExpressionStatement","src":"2311:22:21"}]},"name":"finalize_allocation","nativeSrc":"2058:281:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"2087:6:21","nodeType":"YulTypedName","src":"2087:6:21","type":""},{"name":"size","nativeSrc":"2095:4:21","nodeType":"YulTypedName","src":"2095:4:21","type":""}],"src":"2058:281:21"},{"body":{"nativeSrc":"2386:88:21","nodeType":"YulBlock","src":"2386:88:21","statements":[{"nativeSrc":"2396:30:21","nodeType":"YulAssignment","src":"2396:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"2406:18:21","nodeType":"YulIdentifier","src":"2406:18:21"},"nativeSrc":"2406:20:21","nodeType":"YulFunctionCall","src":"2406:20:21"},"variableNames":[{"name":"memPtr","nativeSrc":"2396:6:21","nodeType":"YulIdentifier","src":"2396:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"2455:6:21","nodeType":"YulIdentifier","src":"2455:6:21"},{"name":"size","nativeSrc":"2463:4:21","nodeType":"YulIdentifier","src":"2463:4:21"}],"functionName":{"name":"finalize_allocation","nativeSrc":"2435:19:21","nodeType":"YulIdentifier","src":"2435:19:21"},"nativeSrc":"2435:33:21","nodeType":"YulFunctionCall","src":"2435:33:21"},"nativeSrc":"2435:33:21","nodeType":"YulExpressionStatement","src":"2435:33:21"}]},"name":"allocate_memory","nativeSrc":"2345:129:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"2370:4:21","nodeType":"YulTypedName","src":"2370:4:21","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"2379:6:21","nodeType":"YulTypedName","src":"2379:6:21","type":""}],"src":"2345:129:21"},{"body":{"nativeSrc":"2546:241:21","nodeType":"YulBlock","src":"2546:241:21","statements":[{"body":{"nativeSrc":"2651:22:21","nodeType":"YulBlock","src":"2651:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2653:16:21","nodeType":"YulIdentifier","src":"2653:16:21"},"nativeSrc":"2653:18:21","nodeType":"YulFunctionCall","src":"2653:18:21"},"nativeSrc":"2653:18:21","nodeType":"YulExpressionStatement","src":"2653:18:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2623:6:21","nodeType":"YulIdentifier","src":"2623:6:21"},{"kind":"number","nativeSrc":"2631:18:21","nodeType":"YulLiteral","src":"2631:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2620:2:21","nodeType":"YulIdentifier","src":"2620:2:21"},"nativeSrc":"2620:30:21","nodeType":"YulFunctionCall","src":"2620:30:21"},"nativeSrc":"2617:56:21","nodeType":"YulIf","src":"2617:56:21"},{"nativeSrc":"2683:37:21","nodeType":"YulAssignment","src":"2683:37:21","value":{"arguments":[{"name":"length","nativeSrc":"2713:6:21","nodeType":"YulIdentifier","src":"2713:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2691:21:21","nodeType":"YulIdentifier","src":"2691:21:21"},"nativeSrc":"2691:29:21","nodeType":"YulFunctionCall","src":"2691:29:21"},"variableNames":[{"name":"size","nativeSrc":"2683:4:21","nodeType":"YulIdentifier","src":"2683:4:21"}]},{"nativeSrc":"2757:23:21","nodeType":"YulAssignment","src":"2757:23:21","value":{"arguments":[{"name":"size","nativeSrc":"2769:4:21","nodeType":"YulIdentifier","src":"2769:4:21"},{"kind":"number","nativeSrc":"2775:4:21","nodeType":"YulLiteral","src":"2775:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2765:3:21","nodeType":"YulIdentifier","src":"2765:3:21"},"nativeSrc":"2765:15:21","nodeType":"YulFunctionCall","src":"2765:15:21"},"variableNames":[{"name":"size","nativeSrc":"2757:4:21","nodeType":"YulIdentifier","src":"2757:4:21"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"2480:307:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"2530:6:21","nodeType":"YulTypedName","src":"2530:6:21","type":""}],"returnVariables":[{"name":"size","nativeSrc":"2541:4:21","nodeType":"YulTypedName","src":"2541:4:21","type":""}],"src":"2480:307:21"},{"body":{"nativeSrc":"2857:82:21","nodeType":"YulBlock","src":"2857:82:21","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"2880:3:21","nodeType":"YulIdentifier","src":"2880:3:21"},{"name":"src","nativeSrc":"2885:3:21","nodeType":"YulIdentifier","src":"2885:3:21"},{"name":"length","nativeSrc":"2890:6:21","nodeType":"YulIdentifier","src":"2890:6:21"}],"functionName":{"name":"calldatacopy","nativeSrc":"2867:12:21","nodeType":"YulIdentifier","src":"2867:12:21"},"nativeSrc":"2867:30:21","nodeType":"YulFunctionCall","src":"2867:30:21"},"nativeSrc":"2867:30:21","nodeType":"YulExpressionStatement","src":"2867:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2917:3:21","nodeType":"YulIdentifier","src":"2917:3:21"},{"name":"length","nativeSrc":"2922:6:21","nodeType":"YulIdentifier","src":"2922:6:21"}],"functionName":{"name":"add","nativeSrc":"2913:3:21","nodeType":"YulIdentifier","src":"2913:3:21"},"nativeSrc":"2913:16:21","nodeType":"YulFunctionCall","src":"2913:16:21"},{"kind":"number","nativeSrc":"2931:1:21","nodeType":"YulLiteral","src":"2931:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2906:6:21","nodeType":"YulIdentifier","src":"2906:6:21"},"nativeSrc":"2906:27:21","nodeType":"YulFunctionCall","src":"2906:27:21"},"nativeSrc":"2906:27:21","nodeType":"YulExpressionStatement","src":"2906:27:21"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"2793:146:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"2839:3:21","nodeType":"YulTypedName","src":"2839:3:21","type":""},{"name":"dst","nativeSrc":"2844:3:21","nodeType":"YulTypedName","src":"2844:3:21","type":""},{"name":"length","nativeSrc":"2849:6:21","nodeType":"YulTypedName","src":"2849:6:21","type":""}],"src":"2793:146:21"},{"body":{"nativeSrc":"3028:340:21","nodeType":"YulBlock","src":"3028:340:21","statements":[{"nativeSrc":"3038:74:21","nodeType":"YulAssignment","src":"3038:74:21","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"3104:6:21","nodeType":"YulIdentifier","src":"3104:6:21"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"3063:40:21","nodeType":"YulIdentifier","src":"3063:40:21"},"nativeSrc":"3063:48:21","nodeType":"YulFunctionCall","src":"3063:48:21"}],"functionName":{"name":"allocate_memory","nativeSrc":"3047:15:21","nodeType":"YulIdentifier","src":"3047:15:21"},"nativeSrc":"3047:65:21","nodeType":"YulFunctionCall","src":"3047:65:21"},"variableNames":[{"name":"array","nativeSrc":"3038:5:21","nodeType":"YulIdentifier","src":"3038:5:21"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"3128:5:21","nodeType":"YulIdentifier","src":"3128:5:21"},{"name":"length","nativeSrc":"3135:6:21","nodeType":"YulIdentifier","src":"3135:6:21"}],"functionName":{"name":"mstore","nativeSrc":"3121:6:21","nodeType":"YulIdentifier","src":"3121:6:21"},"nativeSrc":"3121:21:21","nodeType":"YulFunctionCall","src":"3121:21:21"},"nativeSrc":"3121:21:21","nodeType":"YulExpressionStatement","src":"3121:21:21"},{"nativeSrc":"3151:27:21","nodeType":"YulVariableDeclaration","src":"3151:27:21","value":{"arguments":[{"name":"array","nativeSrc":"3166:5:21","nodeType":"YulIdentifier","src":"3166:5:21"},{"kind":"number","nativeSrc":"3173:4:21","nodeType":"YulLiteral","src":"3173:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3162:3:21","nodeType":"YulIdentifier","src":"3162:3:21"},"nativeSrc":"3162:16:21","nodeType":"YulFunctionCall","src":"3162:16:21"},"variables":[{"name":"dst","nativeSrc":"3155:3:21","nodeType":"YulTypedName","src":"3155:3:21","type":""}]},{"body":{"nativeSrc":"3216:83:21","nodeType":"YulBlock","src":"3216:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"3218:77:21","nodeType":"YulIdentifier","src":"3218:77:21"},"nativeSrc":"3218:79:21","nodeType":"YulFunctionCall","src":"3218:79:21"},"nativeSrc":"3218:79:21","nodeType":"YulExpressionStatement","src":"3218:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"3197:3:21","nodeType":"YulIdentifier","src":"3197:3:21"},{"name":"length","nativeSrc":"3202:6:21","nodeType":"YulIdentifier","src":"3202:6:21"}],"functionName":{"name":"add","nativeSrc":"3193:3:21","nodeType":"YulIdentifier","src":"3193:3:21"},"nativeSrc":"3193:16:21","nodeType":"YulFunctionCall","src":"3193:16:21"},{"name":"end","nativeSrc":"3211:3:21","nodeType":"YulIdentifier","src":"3211:3:21"}],"functionName":{"name":"gt","nativeSrc":"3190:2:21","nodeType":"YulIdentifier","src":"3190:2:21"},"nativeSrc":"3190:25:21","nodeType":"YulFunctionCall","src":"3190:25:21"},"nativeSrc":"3187:112:21","nodeType":"YulIf","src":"3187:112:21"},{"expression":{"arguments":[{"name":"src","nativeSrc":"3345:3:21","nodeType":"YulIdentifier","src":"3345:3:21"},{"name":"dst","nativeSrc":"3350:3:21","nodeType":"YulIdentifier","src":"3350:3:21"},{"name":"length","nativeSrc":"3355:6:21","nodeType":"YulIdentifier","src":"3355:6:21"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"3308:36:21","nodeType":"YulIdentifier","src":"3308:36:21"},"nativeSrc":"3308:54:21","nodeType":"YulFunctionCall","src":"3308:54:21"},"nativeSrc":"3308:54:21","nodeType":"YulExpressionStatement","src":"3308:54:21"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"2945:423:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"3001:3:21","nodeType":"YulTypedName","src":"3001:3:21","type":""},{"name":"length","nativeSrc":"3006:6:21","nodeType":"YulTypedName","src":"3006:6:21","type":""},{"name":"end","nativeSrc":"3014:3:21","nodeType":"YulTypedName","src":"3014:3:21","type":""}],"returnVariables":[{"name":"array","nativeSrc":"3022:5:21","nodeType":"YulTypedName","src":"3022:5:21","type":""}],"src":"2945:423:21"},{"body":{"nativeSrc":"3448:277:21","nodeType":"YulBlock","src":"3448:277:21","statements":[{"body":{"nativeSrc":"3497:83:21","nodeType":"YulBlock","src":"3497:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"3499:77:21","nodeType":"YulIdentifier","src":"3499:77:21"},"nativeSrc":"3499:79:21","nodeType":"YulFunctionCall","src":"3499:79:21"},"nativeSrc":"3499:79:21","nodeType":"YulExpressionStatement","src":"3499:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3476:6:21","nodeType":"YulIdentifier","src":"3476:6:21"},{"kind":"number","nativeSrc":"3484:4:21","nodeType":"YulLiteral","src":"3484:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3472:3:21","nodeType":"YulIdentifier","src":"3472:3:21"},"nativeSrc":"3472:17:21","nodeType":"YulFunctionCall","src":"3472:17:21"},{"name":"end","nativeSrc":"3491:3:21","nodeType":"YulIdentifier","src":"3491:3:21"}],"functionName":{"name":"slt","nativeSrc":"3468:3:21","nodeType":"YulIdentifier","src":"3468:3:21"},"nativeSrc":"3468:27:21","nodeType":"YulFunctionCall","src":"3468:27:21"}],"functionName":{"name":"iszero","nativeSrc":"3461:6:21","nodeType":"YulIdentifier","src":"3461:6:21"},"nativeSrc":"3461:35:21","nodeType":"YulFunctionCall","src":"3461:35:21"},"nativeSrc":"3458:122:21","nodeType":"YulIf","src":"3458:122:21"},{"nativeSrc":"3589:34:21","nodeType":"YulVariableDeclaration","src":"3589:34:21","value":{"arguments":[{"name":"offset","nativeSrc":"3616:6:21","nodeType":"YulIdentifier","src":"3616:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"3603:12:21","nodeType":"YulIdentifier","src":"3603:12:21"},"nativeSrc":"3603:20:21","nodeType":"YulFunctionCall","src":"3603:20:21"},"variables":[{"name":"length","nativeSrc":"3593:6:21","nodeType":"YulTypedName","src":"3593:6:21","type":""}]},{"nativeSrc":"3632:87:21","nodeType":"YulAssignment","src":"3632:87:21","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3692:6:21","nodeType":"YulIdentifier","src":"3692:6:21"},{"kind":"number","nativeSrc":"3700:4:21","nodeType":"YulLiteral","src":"3700:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3688:3:21","nodeType":"YulIdentifier","src":"3688:3:21"},"nativeSrc":"3688:17:21","nodeType":"YulFunctionCall","src":"3688:17:21"},{"name":"length","nativeSrc":"3707:6:21","nodeType":"YulIdentifier","src":"3707:6:21"},{"name":"end","nativeSrc":"3715:3:21","nodeType":"YulIdentifier","src":"3715:3:21"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"3641:46:21","nodeType":"YulIdentifier","src":"3641:46:21"},"nativeSrc":"3641:78:21","nodeType":"YulFunctionCall","src":"3641:78:21"},"variableNames":[{"name":"array","nativeSrc":"3632:5:21","nodeType":"YulIdentifier","src":"3632:5:21"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"3387:338:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3426:6:21","nodeType":"YulTypedName","src":"3426:6:21","type":""},{"name":"end","nativeSrc":"3434:3:21","nodeType":"YulTypedName","src":"3434:3:21","type":""}],"returnVariables":[{"name":"array","nativeSrc":"3442:5:21","nodeType":"YulTypedName","src":"3442:5:21","type":""}],"src":"3387:338:21"},{"body":{"nativeSrc":"3820:28:21","nodeType":"YulBlock","src":"3820:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3837:1:21","nodeType":"YulLiteral","src":"3837:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"3840:1:21","nodeType":"YulLiteral","src":"3840:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3830:6:21","nodeType":"YulIdentifier","src":"3830:6:21"},"nativeSrc":"3830:12:21","nodeType":"YulFunctionCall","src":"3830:12:21"},"nativeSrc":"3830:12:21","nodeType":"YulExpressionStatement","src":"3830:12:21"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nativeSrc":"3731:117:21","nodeType":"YulFunctionDefinition","src":"3731:117:21"},{"body":{"nativeSrc":"3943:28:21","nodeType":"YulBlock","src":"3943:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3960:1:21","nodeType":"YulLiteral","src":"3960:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"3963:1:21","nodeType":"YulLiteral","src":"3963:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3953:6:21","nodeType":"YulIdentifier","src":"3953:6:21"},"nativeSrc":"3953:12:21","nodeType":"YulFunctionCall","src":"3953:12:21"},"nativeSrc":"3953:12:21","nodeType":"YulExpressionStatement","src":"3953:12:21"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nativeSrc":"3854:117:21","nodeType":"YulFunctionDefinition","src":"3854:117:21"},{"body":{"nativeSrc":"4044:241:21","nodeType":"YulBlock","src":"4044:241:21","statements":[{"body":{"nativeSrc":"4149:22:21","nodeType":"YulBlock","src":"4149:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4151:16:21","nodeType":"YulIdentifier","src":"4151:16:21"},"nativeSrc":"4151:18:21","nodeType":"YulFunctionCall","src":"4151:18:21"},"nativeSrc":"4151:18:21","nodeType":"YulExpressionStatement","src":"4151:18:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4121:6:21","nodeType":"YulIdentifier","src":"4121:6:21"},{"kind":"number","nativeSrc":"4129:18:21","nodeType":"YulLiteral","src":"4129:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4118:2:21","nodeType":"YulIdentifier","src":"4118:2:21"},"nativeSrc":"4118:30:21","nodeType":"YulFunctionCall","src":"4118:30:21"},"nativeSrc":"4115:56:21","nodeType":"YulIf","src":"4115:56:21"},{"nativeSrc":"4181:37:21","nodeType":"YulAssignment","src":"4181:37:21","value":{"arguments":[{"name":"length","nativeSrc":"4211:6:21","nodeType":"YulIdentifier","src":"4211:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"4189:21:21","nodeType":"YulIdentifier","src":"4189:21:21"},"nativeSrc":"4189:29:21","nodeType":"YulFunctionCall","src":"4189:29:21"},"variableNames":[{"name":"size","nativeSrc":"4181:4:21","nodeType":"YulIdentifier","src":"4181:4:21"}]},{"nativeSrc":"4255:23:21","nodeType":"YulAssignment","src":"4255:23:21","value":{"arguments":[{"name":"size","nativeSrc":"4267:4:21","nodeType":"YulIdentifier","src":"4267:4:21"},{"kind":"number","nativeSrc":"4273:4:21","nodeType":"YulLiteral","src":"4273:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4263:3:21","nodeType":"YulIdentifier","src":"4263:3:21"},"nativeSrc":"4263:15:21","nodeType":"YulFunctionCall","src":"4263:15:21"},"variableNames":[{"name":"size","nativeSrc":"4255:4:21","nodeType":"YulIdentifier","src":"4255:4:21"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"3977:308:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"4028:6:21","nodeType":"YulTypedName","src":"4028:6:21","type":""}],"returnVariables":[{"name":"size","nativeSrc":"4039:4:21","nodeType":"YulTypedName","src":"4039:4:21","type":""}],"src":"3977:308:21"},{"body":{"nativeSrc":"4375:341:21","nodeType":"YulBlock","src":"4375:341:21","statements":[{"nativeSrc":"4385:75:21","nodeType":"YulAssignment","src":"4385:75:21","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"4452:6:21","nodeType":"YulIdentifier","src":"4452:6:21"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"4410:41:21","nodeType":"YulIdentifier","src":"4410:41:21"},"nativeSrc":"4410:49:21","nodeType":"YulFunctionCall","src":"4410:49:21"}],"functionName":{"name":"allocate_memory","nativeSrc":"4394:15:21","nodeType":"YulIdentifier","src":"4394:15:21"},"nativeSrc":"4394:66:21","nodeType":"YulFunctionCall","src":"4394:66:21"},"variableNames":[{"name":"array","nativeSrc":"4385:5:21","nodeType":"YulIdentifier","src":"4385:5:21"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"4476:5:21","nodeType":"YulIdentifier","src":"4476:5:21"},{"name":"length","nativeSrc":"4483:6:21","nodeType":"YulIdentifier","src":"4483:6:21"}],"functionName":{"name":"mstore","nativeSrc":"4469:6:21","nodeType":"YulIdentifier","src":"4469:6:21"},"nativeSrc":"4469:21:21","nodeType":"YulFunctionCall","src":"4469:21:21"},"nativeSrc":"4469:21:21","nodeType":"YulExpressionStatement","src":"4469:21:21"},{"nativeSrc":"4499:27:21","nodeType":"YulVariableDeclaration","src":"4499:27:21","value":{"arguments":[{"name":"array","nativeSrc":"4514:5:21","nodeType":"YulIdentifier","src":"4514:5:21"},{"kind":"number","nativeSrc":"4521:4:21","nodeType":"YulLiteral","src":"4521:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4510:3:21","nodeType":"YulIdentifier","src":"4510:3:21"},"nativeSrc":"4510:16:21","nodeType":"YulFunctionCall","src":"4510:16:21"},"variables":[{"name":"dst","nativeSrc":"4503:3:21","nodeType":"YulTypedName","src":"4503:3:21","type":""}]},{"body":{"nativeSrc":"4564:83:21","nodeType":"YulBlock","src":"4564:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"4566:77:21","nodeType":"YulIdentifier","src":"4566:77:21"},"nativeSrc":"4566:79:21","nodeType":"YulFunctionCall","src":"4566:79:21"},"nativeSrc":"4566:79:21","nodeType":"YulExpressionStatement","src":"4566:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4545:3:21","nodeType":"YulIdentifier","src":"4545:3:21"},{"name":"length","nativeSrc":"4550:6:21","nodeType":"YulIdentifier","src":"4550:6:21"}],"functionName":{"name":"add","nativeSrc":"4541:3:21","nodeType":"YulIdentifier","src":"4541:3:21"},"nativeSrc":"4541:16:21","nodeType":"YulFunctionCall","src":"4541:16:21"},{"name":"end","nativeSrc":"4559:3:21","nodeType":"YulIdentifier","src":"4559:3:21"}],"functionName":{"name":"gt","nativeSrc":"4538:2:21","nodeType":"YulIdentifier","src":"4538:2:21"},"nativeSrc":"4538:25:21","nodeType":"YulFunctionCall","src":"4538:25:21"},"nativeSrc":"4535:112:21","nodeType":"YulIf","src":"4535:112:21"},{"expression":{"arguments":[{"name":"src","nativeSrc":"4693:3:21","nodeType":"YulIdentifier","src":"4693:3:21"},{"name":"dst","nativeSrc":"4698:3:21","nodeType":"YulIdentifier","src":"4698:3:21"},{"name":"length","nativeSrc":"4703:6:21","nodeType":"YulIdentifier","src":"4703:6:21"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"4656:36:21","nodeType":"YulIdentifier","src":"4656:36:21"},"nativeSrc":"4656:54:21","nodeType":"YulFunctionCall","src":"4656:54:21"},"nativeSrc":"4656:54:21","nodeType":"YulExpressionStatement","src":"4656:54:21"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"4291:425:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"4348:3:21","nodeType":"YulTypedName","src":"4348:3:21","type":""},{"name":"length","nativeSrc":"4353:6:21","nodeType":"YulTypedName","src":"4353:6:21","type":""},{"name":"end","nativeSrc":"4361:3:21","nodeType":"YulTypedName","src":"4361:3:21","type":""}],"returnVariables":[{"name":"array","nativeSrc":"4369:5:21","nodeType":"YulTypedName","src":"4369:5:21","type":""}],"src":"4291:425:21"},{"body":{"nativeSrc":"4798:278:21","nodeType":"YulBlock","src":"4798:278:21","statements":[{"body":{"nativeSrc":"4847:83:21","nodeType":"YulBlock","src":"4847:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"4849:77:21","nodeType":"YulIdentifier","src":"4849:77:21"},"nativeSrc":"4849:79:21","nodeType":"YulFunctionCall","src":"4849:79:21"},"nativeSrc":"4849:79:21","nodeType":"YulExpressionStatement","src":"4849:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4826:6:21","nodeType":"YulIdentifier","src":"4826:6:21"},{"kind":"number","nativeSrc":"4834:4:21","nodeType":"YulLiteral","src":"4834:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4822:3:21","nodeType":"YulIdentifier","src":"4822:3:21"},"nativeSrc":"4822:17:21","nodeType":"YulFunctionCall","src":"4822:17:21"},{"name":"end","nativeSrc":"4841:3:21","nodeType":"YulIdentifier","src":"4841:3:21"}],"functionName":{"name":"slt","nativeSrc":"4818:3:21","nodeType":"YulIdentifier","src":"4818:3:21"},"nativeSrc":"4818:27:21","nodeType":"YulFunctionCall","src":"4818:27:21"}],"functionName":{"name":"iszero","nativeSrc":"4811:6:21","nodeType":"YulIdentifier","src":"4811:6:21"},"nativeSrc":"4811:35:21","nodeType":"YulFunctionCall","src":"4811:35:21"},"nativeSrc":"4808:122:21","nodeType":"YulIf","src":"4808:122:21"},{"nativeSrc":"4939:34:21","nodeType":"YulVariableDeclaration","src":"4939:34:21","value":{"arguments":[{"name":"offset","nativeSrc":"4966:6:21","nodeType":"YulIdentifier","src":"4966:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"4953:12:21","nodeType":"YulIdentifier","src":"4953:12:21"},"nativeSrc":"4953:20:21","nodeType":"YulFunctionCall","src":"4953:20:21"},"variables":[{"name":"length","nativeSrc":"4943:6:21","nodeType":"YulTypedName","src":"4943:6:21","type":""}]},{"nativeSrc":"4982:88:21","nodeType":"YulAssignment","src":"4982:88:21","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"5043:6:21","nodeType":"YulIdentifier","src":"5043:6:21"},{"kind":"number","nativeSrc":"5051:4:21","nodeType":"YulLiteral","src":"5051:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5039:3:21","nodeType":"YulIdentifier","src":"5039:3:21"},"nativeSrc":"5039:17:21","nodeType":"YulFunctionCall","src":"5039:17:21"},{"name":"length","nativeSrc":"5058:6:21","nodeType":"YulIdentifier","src":"5058:6:21"},{"name":"end","nativeSrc":"5066:3:21","nodeType":"YulIdentifier","src":"5066:3:21"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"4991:47:21","nodeType":"YulIdentifier","src":"4991:47:21"},"nativeSrc":"4991:79:21","nodeType":"YulFunctionCall","src":"4991:79:21"},"variableNames":[{"name":"array","nativeSrc":"4982:5:21","nodeType":"YulIdentifier","src":"4982:5:21"}]}]},"name":"abi_decode_t_string_memory_ptr","nativeSrc":"4736:340:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4776:6:21","nodeType":"YulTypedName","src":"4776:6:21","type":""},{"name":"end","nativeSrc":"4784:3:21","nodeType":"YulTypedName","src":"4784:3:21","type":""}],"returnVariables":[{"name":"array","nativeSrc":"4792:5:21","nodeType":"YulTypedName","src":"4792:5:21","type":""}],"src":"4736:340:21"},{"body":{"nativeSrc":"5127:81:21","nodeType":"YulBlock","src":"5127:81:21","statements":[{"nativeSrc":"5137:65:21","nodeType":"YulAssignment","src":"5137:65:21","value":{"arguments":[{"name":"value","nativeSrc":"5152:5:21","nodeType":"YulIdentifier","src":"5152:5:21"},{"kind":"number","nativeSrc":"5159:42:21","nodeType":"YulLiteral","src":"5159:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5148:3:21","nodeType":"YulIdentifier","src":"5148:3:21"},"nativeSrc":"5148:54:21","nodeType":"YulFunctionCall","src":"5148:54:21"},"variableNames":[{"name":"cleaned","nativeSrc":"5137:7:21","nodeType":"YulIdentifier","src":"5137:7:21"}]}]},"name":"cleanup_t_uint160","nativeSrc":"5082:126:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5109:5:21","nodeType":"YulTypedName","src":"5109:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5119:7:21","nodeType":"YulTypedName","src":"5119:7:21","type":""}],"src":"5082:126:21"},{"body":{"nativeSrc":"5259:51:21","nodeType":"YulBlock","src":"5259:51:21","statements":[{"nativeSrc":"5269:35:21","nodeType":"YulAssignment","src":"5269:35:21","value":{"arguments":[{"name":"value","nativeSrc":"5298:5:21","nodeType":"YulIdentifier","src":"5298:5:21"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"5280:17:21","nodeType":"YulIdentifier","src":"5280:17:21"},"nativeSrc":"5280:24:21","nodeType":"YulFunctionCall","src":"5280:24:21"},"variableNames":[{"name":"cleaned","nativeSrc":"5269:7:21","nodeType":"YulIdentifier","src":"5269:7:21"}]}]},"name":"cleanup_t_address","nativeSrc":"5214:96:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5241:5:21","nodeType":"YulTypedName","src":"5241:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5251:7:21","nodeType":"YulTypedName","src":"5251:7:21","type":""}],"src":"5214:96:21"},{"body":{"nativeSrc":"5359:79:21","nodeType":"YulBlock","src":"5359:79:21","statements":[{"body":{"nativeSrc":"5416:16:21","nodeType":"YulBlock","src":"5416:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5425:1:21","nodeType":"YulLiteral","src":"5425:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"5428:1:21","nodeType":"YulLiteral","src":"5428:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5418:6:21","nodeType":"YulIdentifier","src":"5418:6:21"},"nativeSrc":"5418:12:21","nodeType":"YulFunctionCall","src":"5418:12:21"},"nativeSrc":"5418:12:21","nodeType":"YulExpressionStatement","src":"5418:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5382:5:21","nodeType":"YulIdentifier","src":"5382:5:21"},{"arguments":[{"name":"value","nativeSrc":"5407:5:21","nodeType":"YulIdentifier","src":"5407:5:21"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"5389:17:21","nodeType":"YulIdentifier","src":"5389:17:21"},"nativeSrc":"5389:24:21","nodeType":"YulFunctionCall","src":"5389:24:21"}],"functionName":{"name":"eq","nativeSrc":"5379:2:21","nodeType":"YulIdentifier","src":"5379:2:21"},"nativeSrc":"5379:35:21","nodeType":"YulFunctionCall","src":"5379:35:21"}],"functionName":{"name":"iszero","nativeSrc":"5372:6:21","nodeType":"YulIdentifier","src":"5372:6:21"},"nativeSrc":"5372:43:21","nodeType":"YulFunctionCall","src":"5372:43:21"},"nativeSrc":"5369:63:21","nodeType":"YulIf","src":"5369:63:21"}]},"name":"validator_revert_t_address","nativeSrc":"5316:122:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5352:5:21","nodeType":"YulTypedName","src":"5352:5:21","type":""}],"src":"5316:122:21"},{"body":{"nativeSrc":"5496:87:21","nodeType":"YulBlock","src":"5496:87:21","statements":[{"nativeSrc":"5506:29:21","nodeType":"YulAssignment","src":"5506:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"5528:6:21","nodeType":"YulIdentifier","src":"5528:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"5515:12:21","nodeType":"YulIdentifier","src":"5515:12:21"},"nativeSrc":"5515:20:21","nodeType":"YulFunctionCall","src":"5515:20:21"},"variableNames":[{"name":"value","nativeSrc":"5506:5:21","nodeType":"YulIdentifier","src":"5506:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5571:5:21","nodeType":"YulIdentifier","src":"5571:5:21"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"5544:26:21","nodeType":"YulIdentifier","src":"5544:26:21"},"nativeSrc":"5544:33:21","nodeType":"YulFunctionCall","src":"5544:33:21"},"nativeSrc":"5544:33:21","nodeType":"YulExpressionStatement","src":"5544:33:21"}]},"name":"abi_decode_t_address","nativeSrc":"5444:139:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"5474:6:21","nodeType":"YulTypedName","src":"5474:6:21","type":""},{"name":"end","nativeSrc":"5482:3:21","nodeType":"YulTypedName","src":"5482:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"5490:5:21","nodeType":"YulTypedName","src":"5490:5:21","type":""}],"src":"5444:139:21"},{"body":{"nativeSrc":"5634:32:21","nodeType":"YulBlock","src":"5634:32:21","statements":[{"nativeSrc":"5644:16:21","nodeType":"YulAssignment","src":"5644:16:21","value":{"name":"value","nativeSrc":"5655:5:21","nodeType":"YulIdentifier","src":"5655:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"5644:7:21","nodeType":"YulIdentifier","src":"5644:7:21"}]}]},"name":"cleanup_t_uint256","nativeSrc":"5589:77:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5616:5:21","nodeType":"YulTypedName","src":"5616:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5626:7:21","nodeType":"YulTypedName","src":"5626:7:21","type":""}],"src":"5589:77:21"},{"body":{"nativeSrc":"5715:79:21","nodeType":"YulBlock","src":"5715:79:21","statements":[{"body":{"nativeSrc":"5772:16:21","nodeType":"YulBlock","src":"5772:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5781:1:21","nodeType":"YulLiteral","src":"5781:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"5784:1:21","nodeType":"YulLiteral","src":"5784:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5774:6:21","nodeType":"YulIdentifier","src":"5774:6:21"},"nativeSrc":"5774:12:21","nodeType":"YulFunctionCall","src":"5774:12:21"},"nativeSrc":"5774:12:21","nodeType":"YulExpressionStatement","src":"5774:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5738:5:21","nodeType":"YulIdentifier","src":"5738:5:21"},{"arguments":[{"name":"value","nativeSrc":"5763:5:21","nodeType":"YulIdentifier","src":"5763:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"5745:17:21","nodeType":"YulIdentifier","src":"5745:17:21"},"nativeSrc":"5745:24:21","nodeType":"YulFunctionCall","src":"5745:24:21"}],"functionName":{"name":"eq","nativeSrc":"5735:2:21","nodeType":"YulIdentifier","src":"5735:2:21"},"nativeSrc":"5735:35:21","nodeType":"YulFunctionCall","src":"5735:35:21"}],"functionName":{"name":"iszero","nativeSrc":"5728:6:21","nodeType":"YulIdentifier","src":"5728:6:21"},"nativeSrc":"5728:43:21","nodeType":"YulFunctionCall","src":"5728:43:21"},"nativeSrc":"5725:63:21","nodeType":"YulIf","src":"5725:63:21"}]},"name":"validator_revert_t_uint256","nativeSrc":"5672:122:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5708:5:21","nodeType":"YulTypedName","src":"5708:5:21","type":""}],"src":"5672:122:21"},{"body":{"nativeSrc":"5852:87:21","nodeType":"YulBlock","src":"5852:87:21","statements":[{"nativeSrc":"5862:29:21","nodeType":"YulAssignment","src":"5862:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"5884:6:21","nodeType":"YulIdentifier","src":"5884:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"5871:12:21","nodeType":"YulIdentifier","src":"5871:12:21"},"nativeSrc":"5871:20:21","nodeType":"YulFunctionCall","src":"5871:20:21"},"variableNames":[{"name":"value","nativeSrc":"5862:5:21","nodeType":"YulIdentifier","src":"5862:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5927:5:21","nodeType":"YulIdentifier","src":"5927:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"5900:26:21","nodeType":"YulIdentifier","src":"5900:26:21"},"nativeSrc":"5900:33:21","nodeType":"YulFunctionCall","src":"5900:33:21"},"nativeSrc":"5900:33:21","nodeType":"YulExpressionStatement","src":"5900:33:21"}]},"name":"abi_decode_t_uint256","nativeSrc":"5800:139:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"5830:6:21","nodeType":"YulTypedName","src":"5830:6:21","type":""},{"name":"end","nativeSrc":"5838:3:21","nodeType":"YulTypedName","src":"5838:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"5846:5:21","nodeType":"YulTypedName","src":"5846:5:21","type":""}],"src":"5800:139:21"},{"body":{"nativeSrc":"6072:1171:21","nodeType":"YulBlock","src":"6072:1171:21","statements":[{"body":{"nativeSrc":"6116:83:21","nodeType":"YulBlock","src":"6116:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nativeSrc":"6118:77:21","nodeType":"YulIdentifier","src":"6118:77:21"},"nativeSrc":"6118:79:21","nodeType":"YulFunctionCall","src":"6118:79:21"},"nativeSrc":"6118:79:21","nodeType":"YulExpressionStatement","src":"6118:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nativeSrc":"6093:3:21","nodeType":"YulIdentifier","src":"6093:3:21"},{"name":"headStart","nativeSrc":"6098:9:21","nodeType":"YulIdentifier","src":"6098:9:21"}],"functionName":{"name":"sub","nativeSrc":"6089:3:21","nodeType":"YulIdentifier","src":"6089:3:21"},"nativeSrc":"6089:19:21","nodeType":"YulFunctionCall","src":"6089:19:21"},{"kind":"number","nativeSrc":"6110:4:21","nodeType":"YulLiteral","src":"6110:4:21","type":"","value":"0xa0"}],"functionName":{"name":"slt","nativeSrc":"6085:3:21","nodeType":"YulIdentifier","src":"6085:3:21"},"nativeSrc":"6085:30:21","nodeType":"YulFunctionCall","src":"6085:30:21"},"nativeSrc":"6082:117:21","nodeType":"YulIf","src":"6082:117:21"},{"nativeSrc":"6208:30:21","nodeType":"YulAssignment","src":"6208:30:21","value":{"arguments":[{"kind":"number","nativeSrc":"6233:4:21","nodeType":"YulLiteral","src":"6233:4:21","type":"","value":"0xa0"}],"functionName":{"name":"allocate_memory","nativeSrc":"6217:15:21","nodeType":"YulIdentifier","src":"6217:15:21"},"nativeSrc":"6217:21:21","nodeType":"YulFunctionCall","src":"6217:21:21"},"variableNames":[{"name":"value","nativeSrc":"6208:5:21","nodeType":"YulIdentifier","src":"6208:5:21"}]},{"nativeSrc":"6248:325:21","nodeType":"YulBlock","src":"6248:325:21","statements":[{"nativeSrc":"6288:45:21","nodeType":"YulVariableDeclaration","src":"6288:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6319:9:21","nodeType":"YulIdentifier","src":"6319:9:21"},{"kind":"number","nativeSrc":"6330:1:21","nodeType":"YulLiteral","src":"6330:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6315:3:21","nodeType":"YulIdentifier","src":"6315:3:21"},"nativeSrc":"6315:17:21","nodeType":"YulFunctionCall","src":"6315:17:21"}],"functionName":{"name":"calldataload","nativeSrc":"6302:12:21","nodeType":"YulIdentifier","src":"6302:12:21"},"nativeSrc":"6302:31:21","nodeType":"YulFunctionCall","src":"6302:31:21"},"variables":[{"name":"offset","nativeSrc":"6292:6:21","nodeType":"YulTypedName","src":"6292:6:21","type":""}]},{"body":{"nativeSrc":"6380:83:21","nodeType":"YulBlock","src":"6380:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nativeSrc":"6382:77:21","nodeType":"YulIdentifier","src":"6382:77:21"},"nativeSrc":"6382:79:21","nodeType":"YulFunctionCall","src":"6382:79:21"},"nativeSrc":"6382:79:21","nodeType":"YulExpressionStatement","src":"6382:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6352:6:21","nodeType":"YulIdentifier","src":"6352:6:21"},{"kind":"number","nativeSrc":"6360:18:21","nodeType":"YulLiteral","src":"6360:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6349:2:21","nodeType":"YulIdentifier","src":"6349:2:21"},"nativeSrc":"6349:30:21","nodeType":"YulFunctionCall","src":"6349:30:21"},"nativeSrc":"6346:117:21","nodeType":"YulIf","src":"6346:117:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6488:5:21","nodeType":"YulIdentifier","src":"6488:5:21"},{"kind":"number","nativeSrc":"6495:4:21","nodeType":"YulLiteral","src":"6495:4:21","type":"","value":"0x00"}],"functionName":{"name":"add","nativeSrc":"6484:3:21","nodeType":"YulIdentifier","src":"6484:3:21"},"nativeSrc":"6484:16:21","nodeType":"YulFunctionCall","src":"6484:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6537:9:21","nodeType":"YulIdentifier","src":"6537:9:21"},{"name":"offset","nativeSrc":"6548:6:21","nodeType":"YulIdentifier","src":"6548:6:21"}],"functionName":{"name":"add","nativeSrc":"6533:3:21","nodeType":"YulIdentifier","src":"6533:3:21"},"nativeSrc":"6533:22:21","nodeType":"YulFunctionCall","src":"6533:22:21"},{"name":"end","nativeSrc":"6557:3:21","nodeType":"YulIdentifier","src":"6557:3:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"6502:30:21","nodeType":"YulIdentifier","src":"6502:30:21"},"nativeSrc":"6502:59:21","nodeType":"YulFunctionCall","src":"6502:59:21"}],"functionName":{"name":"mstore","nativeSrc":"6477:6:21","nodeType":"YulIdentifier","src":"6477:6:21"},"nativeSrc":"6477:85:21","nodeType":"YulFunctionCall","src":"6477:85:21"},"nativeSrc":"6477:85:21","nodeType":"YulExpressionStatement","src":"6477:85:21"}]},{"nativeSrc":"6583:152:21","nodeType":"YulBlock","src":"6583:152:21","statements":[{"nativeSrc":"6619:16:21","nodeType":"YulVariableDeclaration","src":"6619:16:21","value":{"kind":"number","nativeSrc":"6633:2:21","nodeType":"YulLiteral","src":"6633:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"6623:6:21","nodeType":"YulTypedName","src":"6623:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6660:5:21","nodeType":"YulIdentifier","src":"6660:5:21"},{"kind":"number","nativeSrc":"6667:4:21","nodeType":"YulLiteral","src":"6667:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6656:3:21","nodeType":"YulIdentifier","src":"6656:3:21"},"nativeSrc":"6656:16:21","nodeType":"YulFunctionCall","src":"6656:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6699:9:21","nodeType":"YulIdentifier","src":"6699:9:21"},{"name":"offset","nativeSrc":"6710:6:21","nodeType":"YulIdentifier","src":"6710:6:21"}],"functionName":{"name":"add","nativeSrc":"6695:3:21","nodeType":"YulIdentifier","src":"6695:3:21"},"nativeSrc":"6695:22:21","nodeType":"YulFunctionCall","src":"6695:22:21"},{"name":"end","nativeSrc":"6719:3:21","nodeType":"YulIdentifier","src":"6719:3:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6674:20:21","nodeType":"YulIdentifier","src":"6674:20:21"},"nativeSrc":"6674:49:21","nodeType":"YulFunctionCall","src":"6674:49:21"}],"functionName":{"name":"mstore","nativeSrc":"6649:6:21","nodeType":"YulIdentifier","src":"6649:6:21"},"nativeSrc":"6649:75:21","nodeType":"YulFunctionCall","src":"6649:75:21"},"nativeSrc":"6649:75:21","nodeType":"YulExpressionStatement","src":"6649:75:21"}]},{"nativeSrc":"6745:152:21","nodeType":"YulBlock","src":"6745:152:21","statements":[{"nativeSrc":"6781:16:21","nodeType":"YulVariableDeclaration","src":"6781:16:21","value":{"kind":"number","nativeSrc":"6795:2:21","nodeType":"YulLiteral","src":"6795:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"6785:6:21","nodeType":"YulTypedName","src":"6785:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6822:5:21","nodeType":"YulIdentifier","src":"6822:5:21"},{"kind":"number","nativeSrc":"6829:4:21","nodeType":"YulLiteral","src":"6829:4:21","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"6818:3:21","nodeType":"YulIdentifier","src":"6818:3:21"},"nativeSrc":"6818:16:21","nodeType":"YulFunctionCall","src":"6818:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6861:9:21","nodeType":"YulIdentifier","src":"6861:9:21"},{"name":"offset","nativeSrc":"6872:6:21","nodeType":"YulIdentifier","src":"6872:6:21"}],"functionName":{"name":"add","nativeSrc":"6857:3:21","nodeType":"YulIdentifier","src":"6857:3:21"},"nativeSrc":"6857:22:21","nodeType":"YulFunctionCall","src":"6857:22:21"},{"name":"end","nativeSrc":"6881:3:21","nodeType":"YulIdentifier","src":"6881:3:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"6836:20:21","nodeType":"YulIdentifier","src":"6836:20:21"},"nativeSrc":"6836:49:21","nodeType":"YulFunctionCall","src":"6836:49:21"}],"functionName":{"name":"mstore","nativeSrc":"6811:6:21","nodeType":"YulIdentifier","src":"6811:6:21"},"nativeSrc":"6811:75:21","nodeType":"YulFunctionCall","src":"6811:75:21"},"nativeSrc":"6811:75:21","nodeType":"YulExpressionStatement","src":"6811:75:21"}]},{"nativeSrc":"6907:156:21","nodeType":"YulBlock","src":"6907:156:21","statements":[{"nativeSrc":"6947:16:21","nodeType":"YulVariableDeclaration","src":"6947:16:21","value":{"kind":"number","nativeSrc":"6961:2:21","nodeType":"YulLiteral","src":"6961:2:21","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"6951:6:21","nodeType":"YulTypedName","src":"6951:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6988:5:21","nodeType":"YulIdentifier","src":"6988:5:21"},{"kind":"number","nativeSrc":"6995:4:21","nodeType":"YulLiteral","src":"6995:4:21","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"6984:3:21","nodeType":"YulIdentifier","src":"6984:3:21"},"nativeSrc":"6984:16:21","nodeType":"YulFunctionCall","src":"6984:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7027:9:21","nodeType":"YulIdentifier","src":"7027:9:21"},{"name":"offset","nativeSrc":"7038:6:21","nodeType":"YulIdentifier","src":"7038:6:21"}],"functionName":{"name":"add","nativeSrc":"7023:3:21","nodeType":"YulIdentifier","src":"7023:3:21"},"nativeSrc":"7023:22:21","nodeType":"YulFunctionCall","src":"7023:22:21"},{"name":"end","nativeSrc":"7047:3:21","nodeType":"YulIdentifier","src":"7047:3:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"7002:20:21","nodeType":"YulIdentifier","src":"7002:20:21"},"nativeSrc":"7002:49:21","nodeType":"YulFunctionCall","src":"7002:49:21"}],"functionName":{"name":"mstore","nativeSrc":"6977:6:21","nodeType":"YulIdentifier","src":"6977:6:21"},"nativeSrc":"6977:75:21","nodeType":"YulFunctionCall","src":"6977:75:21"},"nativeSrc":"6977:75:21","nodeType":"YulExpressionStatement","src":"6977:75:21"}]},{"nativeSrc":"7073:163:21","nodeType":"YulBlock","src":"7073:163:21","statements":[{"nativeSrc":"7119:17:21","nodeType":"YulVariableDeclaration","src":"7119:17:21","value":{"kind":"number","nativeSrc":"7133:3:21","nodeType":"YulLiteral","src":"7133:3:21","type":"","value":"128"},"variables":[{"name":"offset","nativeSrc":"7123:6:21","nodeType":"YulTypedName","src":"7123:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7161:5:21","nodeType":"YulIdentifier","src":"7161:5:21"},{"kind":"number","nativeSrc":"7168:4:21","nodeType":"YulLiteral","src":"7168:4:21","type":"","value":"0x80"}],"functionName":{"name":"add","nativeSrc":"7157:3:21","nodeType":"YulIdentifier","src":"7157:3:21"},"nativeSrc":"7157:16:21","nodeType":"YulFunctionCall","src":"7157:16:21"},{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7200:9:21","nodeType":"YulIdentifier","src":"7200:9:21"},{"name":"offset","nativeSrc":"7211:6:21","nodeType":"YulIdentifier","src":"7211:6:21"}],"functionName":{"name":"add","nativeSrc":"7196:3:21","nodeType":"YulIdentifier","src":"7196:3:21"},"nativeSrc":"7196:22:21","nodeType":"YulFunctionCall","src":"7196:22:21"},{"name":"end","nativeSrc":"7220:3:21","nodeType":"YulIdentifier","src":"7220:3:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"7175:20:21","nodeType":"YulIdentifier","src":"7175:20:21"},"nativeSrc":"7175:49:21","nodeType":"YulFunctionCall","src":"7175:49:21"}],"functionName":{"name":"mstore","nativeSrc":"7150:6:21","nodeType":"YulIdentifier","src":"7150:6:21"},"nativeSrc":"7150:75:21","nodeType":"YulFunctionCall","src":"7150:75:21"},"nativeSrc":"7150:75:21","nodeType":"YulExpressionStatement","src":"7150:75:21"}]}]},"name":"abi_decode_t_struct$_AirdropMessage_$3185_memory_ptr","nativeSrc":"5985:1258:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6047:9:21","nodeType":"YulTypedName","src":"6047:9:21","type":""},{"name":"end","nativeSrc":"6058:3:21","nodeType":"YulTypedName","src":"6058:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6066:5:21","nodeType":"YulTypedName","src":"6066:5:21","type":""}],"src":"5985:1258:21"},{"body":{"nativeSrc":"7373:752:21","nodeType":"YulBlock","src":"7373:752:21","statements":[{"body":{"nativeSrc":"7419:83:21","nodeType":"YulBlock","src":"7419:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"7421:77:21","nodeType":"YulIdentifier","src":"7421:77:21"},"nativeSrc":"7421:79:21","nodeType":"YulFunctionCall","src":"7421:79:21"},"nativeSrc":"7421:79:21","nodeType":"YulExpressionStatement","src":"7421:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7394:7:21","nodeType":"YulIdentifier","src":"7394:7:21"},{"name":"headStart","nativeSrc":"7403:9:21","nodeType":"YulIdentifier","src":"7403:9:21"}],"functionName":{"name":"sub","nativeSrc":"7390:3:21","nodeType":"YulIdentifier","src":"7390:3:21"},"nativeSrc":"7390:23:21","nodeType":"YulFunctionCall","src":"7390:23:21"},{"kind":"number","nativeSrc":"7415:2:21","nodeType":"YulLiteral","src":"7415:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7386:3:21","nodeType":"YulIdentifier","src":"7386:3:21"},"nativeSrc":"7386:32:21","nodeType":"YulFunctionCall","src":"7386:32:21"},"nativeSrc":"7383:119:21","nodeType":"YulIf","src":"7383:119:21"},{"nativeSrc":"7512:286:21","nodeType":"YulBlock","src":"7512:286:21","statements":[{"nativeSrc":"7527:45:21","nodeType":"YulVariableDeclaration","src":"7527:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7558:9:21","nodeType":"YulIdentifier","src":"7558:9:21"},{"kind":"number","nativeSrc":"7569:1:21","nodeType":"YulLiteral","src":"7569:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7554:3:21","nodeType":"YulIdentifier","src":"7554:3:21"},"nativeSrc":"7554:17:21","nodeType":"YulFunctionCall","src":"7554:17:21"}],"functionName":{"name":"calldataload","nativeSrc":"7541:12:21","nodeType":"YulIdentifier","src":"7541:12:21"},"nativeSrc":"7541:31:21","nodeType":"YulFunctionCall","src":"7541:31:21"},"variables":[{"name":"offset","nativeSrc":"7531:6:21","nodeType":"YulTypedName","src":"7531:6:21","type":""}]},{"body":{"nativeSrc":"7619:83:21","nodeType":"YulBlock","src":"7619:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"7621:77:21","nodeType":"YulIdentifier","src":"7621:77:21"},"nativeSrc":"7621:79:21","nodeType":"YulFunctionCall","src":"7621:79:21"},"nativeSrc":"7621:79:21","nodeType":"YulExpressionStatement","src":"7621:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7591:6:21","nodeType":"YulIdentifier","src":"7591:6:21"},{"kind":"number","nativeSrc":"7599:18:21","nodeType":"YulLiteral","src":"7599:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7588:2:21","nodeType":"YulIdentifier","src":"7588:2:21"},"nativeSrc":"7588:30:21","nodeType":"YulFunctionCall","src":"7588:30:21"},"nativeSrc":"7585:117:21","nodeType":"YulIf","src":"7585:117:21"},{"nativeSrc":"7716:72:21","nodeType":"YulAssignment","src":"7716:72:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7760:9:21","nodeType":"YulIdentifier","src":"7760:9:21"},{"name":"offset","nativeSrc":"7771:6:21","nodeType":"YulIdentifier","src":"7771:6:21"}],"functionName":{"name":"add","nativeSrc":"7756:3:21","nodeType":"YulIdentifier","src":"7756:3:21"},"nativeSrc":"7756:22:21","nodeType":"YulFunctionCall","src":"7756:22:21"},{"name":"dataEnd","nativeSrc":"7780:7:21","nodeType":"YulIdentifier","src":"7780:7:21"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"7726:29:21","nodeType":"YulIdentifier","src":"7726:29:21"},"nativeSrc":"7726:62:21","nodeType":"YulFunctionCall","src":"7726:62:21"},"variableNames":[{"name":"value0","nativeSrc":"7716:6:21","nodeType":"YulIdentifier","src":"7716:6:21"}]}]},{"nativeSrc":"7808:310:21","nodeType":"YulBlock","src":"7808:310:21","statements":[{"nativeSrc":"7823:46:21","nodeType":"YulVariableDeclaration","src":"7823:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7854:9:21","nodeType":"YulIdentifier","src":"7854:9:21"},{"kind":"number","nativeSrc":"7865:2:21","nodeType":"YulLiteral","src":"7865:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7850:3:21","nodeType":"YulIdentifier","src":"7850:3:21"},"nativeSrc":"7850:18:21","nodeType":"YulFunctionCall","src":"7850:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"7837:12:21","nodeType":"YulIdentifier","src":"7837:12:21"},"nativeSrc":"7837:32:21","nodeType":"YulFunctionCall","src":"7837:32:21"},"variables":[{"name":"offset","nativeSrc":"7827:6:21","nodeType":"YulTypedName","src":"7827:6:21","type":""}]},{"body":{"nativeSrc":"7916:83:21","nodeType":"YulBlock","src":"7916:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"7918:77:21","nodeType":"YulIdentifier","src":"7918:77:21"},"nativeSrc":"7918:79:21","nodeType":"YulFunctionCall","src":"7918:79:21"},"nativeSrc":"7918:79:21","nodeType":"YulExpressionStatement","src":"7918:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7888:6:21","nodeType":"YulIdentifier","src":"7888:6:21"},{"kind":"number","nativeSrc":"7896:18:21","nodeType":"YulLiteral","src":"7896:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7885:2:21","nodeType":"YulIdentifier","src":"7885:2:21"},"nativeSrc":"7885:30:21","nodeType":"YulFunctionCall","src":"7885:30:21"},"nativeSrc":"7882:117:21","nodeType":"YulIf","src":"7882:117:21"},{"nativeSrc":"8013:95:21","nodeType":"YulAssignment","src":"8013:95:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8080:9:21","nodeType":"YulIdentifier","src":"8080:9:21"},{"name":"offset","nativeSrc":"8091:6:21","nodeType":"YulIdentifier","src":"8091:6:21"}],"functionName":{"name":"add","nativeSrc":"8076:3:21","nodeType":"YulIdentifier","src":"8076:3:21"},"nativeSrc":"8076:22:21","nodeType":"YulFunctionCall","src":"8076:22:21"},{"name":"dataEnd","nativeSrc":"8100:7:21","nodeType":"YulIdentifier","src":"8100:7:21"}],"functionName":{"name":"abi_decode_t_struct$_AirdropMessage_$3185_memory_ptr","nativeSrc":"8023:52:21","nodeType":"YulIdentifier","src":"8023:52:21"},"nativeSrc":"8023:85:21","nodeType":"YulFunctionCall","src":"8023:85:21"},"variableNames":[{"name":"value1","nativeSrc":"8013:6:21","nodeType":"YulIdentifier","src":"8013:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_struct$_AirdropMessage_$3185_memory_ptr","nativeSrc":"7249:876:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7335:9:21","nodeType":"YulTypedName","src":"7335:9:21","type":""},{"name":"dataEnd","nativeSrc":"7346:7:21","nodeType":"YulTypedName","src":"7346:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7358:6:21","nodeType":"YulTypedName","src":"7358:6:21","type":""},{"name":"value1","nativeSrc":"7366:6:21","nodeType":"YulTypedName","src":"7366:6:21","type":""}],"src":"7249:876:21"},{"body":{"nativeSrc":"8220:28:21","nodeType":"YulBlock","src":"8220:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8237:1:21","nodeType":"YulLiteral","src":"8237:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"8240:1:21","nodeType":"YulLiteral","src":"8240:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8230:6:21","nodeType":"YulIdentifier","src":"8230:6:21"},"nativeSrc":"8230:12:21","nodeType":"YulFunctionCall","src":"8230:12:21"},"nativeSrc":"8230:12:21","nodeType":"YulExpressionStatement","src":"8230:12:21"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"8131:117:21","nodeType":"YulFunctionDefinition","src":"8131:117:21"},{"body":{"nativeSrc":"8343:28:21","nodeType":"YulBlock","src":"8343:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8360:1:21","nodeType":"YulLiteral","src":"8360:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"8363:1:21","nodeType":"YulLiteral","src":"8363:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8353:6:21","nodeType":"YulIdentifier","src":"8353:6:21"},"nativeSrc":"8353:12:21","nodeType":"YulFunctionCall","src":"8353:12:21"},"nativeSrc":"8353:12:21","nodeType":"YulExpressionStatement","src":"8353:12:21"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"8254:117:21","nodeType":"YulFunctionDefinition","src":"8254:117:21"},{"body":{"nativeSrc":"8464:478:21","nodeType":"YulBlock","src":"8464:478:21","statements":[{"body":{"nativeSrc":"8513:83:21","nodeType":"YulBlock","src":"8513:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"8515:77:21","nodeType":"YulIdentifier","src":"8515:77:21"},"nativeSrc":"8515:79:21","nodeType":"YulFunctionCall","src":"8515:79:21"},"nativeSrc":"8515:79:21","nodeType":"YulExpressionStatement","src":"8515:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"8492:6:21","nodeType":"YulIdentifier","src":"8492:6:21"},{"kind":"number","nativeSrc":"8500:4:21","nodeType":"YulLiteral","src":"8500:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8488:3:21","nodeType":"YulIdentifier","src":"8488:3:21"},"nativeSrc":"8488:17:21","nodeType":"YulFunctionCall","src":"8488:17:21"},{"name":"end","nativeSrc":"8507:3:21","nodeType":"YulIdentifier","src":"8507:3:21"}],"functionName":{"name":"slt","nativeSrc":"8484:3:21","nodeType":"YulIdentifier","src":"8484:3:21"},"nativeSrc":"8484:27:21","nodeType":"YulFunctionCall","src":"8484:27:21"}],"functionName":{"name":"iszero","nativeSrc":"8477:6:21","nodeType":"YulIdentifier","src":"8477:6:21"},"nativeSrc":"8477:35:21","nodeType":"YulFunctionCall","src":"8477:35:21"},"nativeSrc":"8474:122:21","nodeType":"YulIf","src":"8474:122:21"},{"nativeSrc":"8605:30:21","nodeType":"YulAssignment","src":"8605:30:21","value":{"arguments":[{"name":"offset","nativeSrc":"8628:6:21","nodeType":"YulIdentifier","src":"8628:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"8615:12:21","nodeType":"YulIdentifier","src":"8615:12:21"},"nativeSrc":"8615:20:21","nodeType":"YulFunctionCall","src":"8615:20:21"},"variableNames":[{"name":"length","nativeSrc":"8605:6:21","nodeType":"YulIdentifier","src":"8605:6:21"}]},{"body":{"nativeSrc":"8678:83:21","nodeType":"YulBlock","src":"8678:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"8680:77:21","nodeType":"YulIdentifier","src":"8680:77:21"},"nativeSrc":"8680:79:21","nodeType":"YulFunctionCall","src":"8680:79:21"},"nativeSrc":"8680:79:21","nodeType":"YulExpressionStatement","src":"8680:79:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"8650:6:21","nodeType":"YulIdentifier","src":"8650:6:21"},{"kind":"number","nativeSrc":"8658:18:21","nodeType":"YulLiteral","src":"8658:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8647:2:21","nodeType":"YulIdentifier","src":"8647:2:21"},"nativeSrc":"8647:30:21","nodeType":"YulFunctionCall","src":"8647:30:21"},"nativeSrc":"8644:117:21","nodeType":"YulIf","src":"8644:117:21"},{"nativeSrc":"8770:29:21","nodeType":"YulAssignment","src":"8770:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"8786:6:21","nodeType":"YulIdentifier","src":"8786:6:21"},{"kind":"number","nativeSrc":"8794:4:21","nodeType":"YulLiteral","src":"8794:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8782:3:21","nodeType":"YulIdentifier","src":"8782:3:21"},"nativeSrc":"8782:17:21","nodeType":"YulFunctionCall","src":"8782:17:21"},"variableNames":[{"name":"arrayPos","nativeSrc":"8770:8:21","nodeType":"YulIdentifier","src":"8770:8:21"}]},{"body":{"nativeSrc":"8853:83:21","nodeType":"YulBlock","src":"8853:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"8855:77:21","nodeType":"YulIdentifier","src":"8855:77:21"},"nativeSrc":"8855:79:21","nodeType":"YulFunctionCall","src":"8855:79:21"},"nativeSrc":"8855:79:21","nodeType":"YulExpressionStatement","src":"8855:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nativeSrc":"8818:8:21","nodeType":"YulIdentifier","src":"8818:8:21"},{"arguments":[{"name":"length","nativeSrc":"8832:6:21","nodeType":"YulIdentifier","src":"8832:6:21"},{"kind":"number","nativeSrc":"8840:4:21","nodeType":"YulLiteral","src":"8840:4:21","type":"","value":"0x01"}],"functionName":{"name":"mul","nativeSrc":"8828:3:21","nodeType":"YulIdentifier","src":"8828:3:21"},"nativeSrc":"8828:17:21","nodeType":"YulFunctionCall","src":"8828:17:21"}],"functionName":{"name":"add","nativeSrc":"8814:3:21","nodeType":"YulIdentifier","src":"8814:3:21"},"nativeSrc":"8814:32:21","nodeType":"YulFunctionCall","src":"8814:32:21"},{"name":"end","nativeSrc":"8848:3:21","nodeType":"YulIdentifier","src":"8848:3:21"}],"functionName":{"name":"gt","nativeSrc":"8811:2:21","nodeType":"YulIdentifier","src":"8811:2:21"},"nativeSrc":"8811:41:21","nodeType":"YulFunctionCall","src":"8811:41:21"},"nativeSrc":"8808:128:21","nodeType":"YulIf","src":"8808:128:21"}]},"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"8390:552:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8431:6:21","nodeType":"YulTypedName","src":"8431:6:21","type":""},{"name":"end","nativeSrc":"8439:3:21","nodeType":"YulTypedName","src":"8439:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"8447:8:21","nodeType":"YulTypedName","src":"8447:8:21","type":""},{"name":"length","nativeSrc":"8457:6:21","nodeType":"YulTypedName","src":"8457:6:21","type":""}],"src":"8390:552:21"},{"body":{"nativeSrc":"9084:827:21","nodeType":"YulBlock","src":"9084:827:21","statements":[{"body":{"nativeSrc":"9131:83:21","nodeType":"YulBlock","src":"9131:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"9133:77:21","nodeType":"YulIdentifier","src":"9133:77:21"},"nativeSrc":"9133:79:21","nodeType":"YulFunctionCall","src":"9133:79:21"},"nativeSrc":"9133:79:21","nodeType":"YulExpressionStatement","src":"9133:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9105:7:21","nodeType":"YulIdentifier","src":"9105:7:21"},{"name":"headStart","nativeSrc":"9114:9:21","nodeType":"YulIdentifier","src":"9114:9:21"}],"functionName":{"name":"sub","nativeSrc":"9101:3:21","nodeType":"YulIdentifier","src":"9101:3:21"},"nativeSrc":"9101:23:21","nodeType":"YulFunctionCall","src":"9101:23:21"},{"kind":"number","nativeSrc":"9126:3:21","nodeType":"YulLiteral","src":"9126:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"9097:3:21","nodeType":"YulIdentifier","src":"9097:3:21"},"nativeSrc":"9097:33:21","nodeType":"YulFunctionCall","src":"9097:33:21"},"nativeSrc":"9094:120:21","nodeType":"YulIf","src":"9094:120:21"},{"nativeSrc":"9224:117:21","nodeType":"YulBlock","src":"9224:117:21","statements":[{"nativeSrc":"9239:15:21","nodeType":"YulVariableDeclaration","src":"9239:15:21","value":{"kind":"number","nativeSrc":"9253:1:21","nodeType":"YulLiteral","src":"9253:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"9243:6:21","nodeType":"YulTypedName","src":"9243:6:21","type":""}]},{"nativeSrc":"9268:63:21","nodeType":"YulAssignment","src":"9268:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9303:9:21","nodeType":"YulIdentifier","src":"9303:9:21"},{"name":"offset","nativeSrc":"9314:6:21","nodeType":"YulIdentifier","src":"9314:6:21"}],"functionName":{"name":"add","nativeSrc":"9299:3:21","nodeType":"YulIdentifier","src":"9299:3:21"},"nativeSrc":"9299:22:21","nodeType":"YulFunctionCall","src":"9299:22:21"},{"name":"dataEnd","nativeSrc":"9323:7:21","nodeType":"YulIdentifier","src":"9323:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9278:20:21","nodeType":"YulIdentifier","src":"9278:20:21"},"nativeSrc":"9278:53:21","nodeType":"YulFunctionCall","src":"9278:53:21"},"variableNames":[{"name":"value0","nativeSrc":"9268:6:21","nodeType":"YulIdentifier","src":"9268:6:21"}]}]},{"nativeSrc":"9351:118:21","nodeType":"YulBlock","src":"9351:118:21","statements":[{"nativeSrc":"9366:16:21","nodeType":"YulVariableDeclaration","src":"9366:16:21","value":{"kind":"number","nativeSrc":"9380:2:21","nodeType":"YulLiteral","src":"9380:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"9370:6:21","nodeType":"YulTypedName","src":"9370:6:21","type":""}]},{"nativeSrc":"9396:63:21","nodeType":"YulAssignment","src":"9396:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9431:9:21","nodeType":"YulIdentifier","src":"9431:9:21"},{"name":"offset","nativeSrc":"9442:6:21","nodeType":"YulIdentifier","src":"9442:6:21"}],"functionName":{"name":"add","nativeSrc":"9427:3:21","nodeType":"YulIdentifier","src":"9427:3:21"},"nativeSrc":"9427:22:21","nodeType":"YulFunctionCall","src":"9427:22:21"},{"name":"dataEnd","nativeSrc":"9451:7:21","nodeType":"YulIdentifier","src":"9451:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"9406:20:21","nodeType":"YulIdentifier","src":"9406:20:21"},"nativeSrc":"9406:53:21","nodeType":"YulFunctionCall","src":"9406:53:21"},"variableNames":[{"name":"value1","nativeSrc":"9396:6:21","nodeType":"YulIdentifier","src":"9396:6:21"}]}]},{"nativeSrc":"9479:118:21","nodeType":"YulBlock","src":"9479:118:21","statements":[{"nativeSrc":"9494:16:21","nodeType":"YulVariableDeclaration","src":"9494:16:21","value":{"kind":"number","nativeSrc":"9508:2:21","nodeType":"YulLiteral","src":"9508:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"9498:6:21","nodeType":"YulTypedName","src":"9498:6:21","type":""}]},{"nativeSrc":"9524:63:21","nodeType":"YulAssignment","src":"9524:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9559:9:21","nodeType":"YulIdentifier","src":"9559:9:21"},{"name":"offset","nativeSrc":"9570:6:21","nodeType":"YulIdentifier","src":"9570:6:21"}],"functionName":{"name":"add","nativeSrc":"9555:3:21","nodeType":"YulIdentifier","src":"9555:3:21"},"nativeSrc":"9555:22:21","nodeType":"YulFunctionCall","src":"9555:22:21"},{"name":"dataEnd","nativeSrc":"9579:7:21","nodeType":"YulIdentifier","src":"9579:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"9534:20:21","nodeType":"YulIdentifier","src":"9534:20:21"},"nativeSrc":"9534:53:21","nodeType":"YulFunctionCall","src":"9534:53:21"},"variableNames":[{"name":"value2","nativeSrc":"9524:6:21","nodeType":"YulIdentifier","src":"9524:6:21"}]}]},{"nativeSrc":"9607:297:21","nodeType":"YulBlock","src":"9607:297:21","statements":[{"nativeSrc":"9622:46:21","nodeType":"YulVariableDeclaration","src":"9622:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9653:9:21","nodeType":"YulIdentifier","src":"9653:9:21"},{"kind":"number","nativeSrc":"9664:2:21","nodeType":"YulLiteral","src":"9664:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9649:3:21","nodeType":"YulIdentifier","src":"9649:3:21"},"nativeSrc":"9649:18:21","nodeType":"YulFunctionCall","src":"9649:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"9636:12:21","nodeType":"YulIdentifier","src":"9636:12:21"},"nativeSrc":"9636:32:21","nodeType":"YulFunctionCall","src":"9636:32:21"},"variables":[{"name":"offset","nativeSrc":"9626:6:21","nodeType":"YulTypedName","src":"9626:6:21","type":""}]},{"body":{"nativeSrc":"9715:83:21","nodeType":"YulBlock","src":"9715:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"9717:77:21","nodeType":"YulIdentifier","src":"9717:77:21"},"nativeSrc":"9717:79:21","nodeType":"YulFunctionCall","src":"9717:79:21"},"nativeSrc":"9717:79:21","nodeType":"YulExpressionStatement","src":"9717:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9687:6:21","nodeType":"YulIdentifier","src":"9687:6:21"},{"kind":"number","nativeSrc":"9695:18:21","nodeType":"YulLiteral","src":"9695:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9684:2:21","nodeType":"YulIdentifier","src":"9684:2:21"},"nativeSrc":"9684:30:21","nodeType":"YulFunctionCall","src":"9684:30:21"},"nativeSrc":"9681:117:21","nodeType":"YulIf","src":"9681:117:21"},{"nativeSrc":"9812:82:21","nodeType":"YulAssignment","src":"9812:82:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9866:9:21","nodeType":"YulIdentifier","src":"9866:9:21"},{"name":"offset","nativeSrc":"9877:6:21","nodeType":"YulIdentifier","src":"9877:6:21"}],"functionName":{"name":"add","nativeSrc":"9862:3:21","nodeType":"YulIdentifier","src":"9862:3:21"},"nativeSrc":"9862:22:21","nodeType":"YulFunctionCall","src":"9862:22:21"},{"name":"dataEnd","nativeSrc":"9886:7:21","nodeType":"YulIdentifier","src":"9886:7:21"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"9830:31:21","nodeType":"YulIdentifier","src":"9830:31:21"},"nativeSrc":"9830:64:21","nodeType":"YulFunctionCall","src":"9830:64:21"},"variableNames":[{"name":"value3","nativeSrc":"9812:6:21","nodeType":"YulIdentifier","src":"9812:6:21"},{"name":"value4","nativeSrc":"9820:6:21","nodeType":"YulIdentifier","src":"9820:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"8948:963:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9022:9:21","nodeType":"YulTypedName","src":"9022:9:21","type":""},{"name":"dataEnd","nativeSrc":"9033:7:21","nodeType":"YulTypedName","src":"9033:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9045:6:21","nodeType":"YulTypedName","src":"9045:6:21","type":""},{"name":"value1","nativeSrc":"9053:6:21","nodeType":"YulTypedName","src":"9053:6:21","type":""},{"name":"value2","nativeSrc":"9061:6:21","nodeType":"YulTypedName","src":"9061:6:21","type":""},{"name":"value3","nativeSrc":"9069:6:21","nodeType":"YulTypedName","src":"9069:6:21","type":""},{"name":"value4","nativeSrc":"9077:6:21","nodeType":"YulTypedName","src":"9077:6:21","type":""}],"src":"8948:963:21"},{"body":{"nativeSrc":"9980:52:21","nodeType":"YulBlock","src":"9980:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9997:3:21","nodeType":"YulIdentifier","src":"9997:3:21"},{"arguments":[{"name":"value","nativeSrc":"10019:5:21","nodeType":"YulIdentifier","src":"10019:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"10002:16:21","nodeType":"YulIdentifier","src":"10002:16:21"},"nativeSrc":"10002:23:21","nodeType":"YulFunctionCall","src":"10002:23:21"}],"functionName":{"name":"mstore","nativeSrc":"9990:6:21","nodeType":"YulIdentifier","src":"9990:6:21"},"nativeSrc":"9990:36:21","nodeType":"YulFunctionCall","src":"9990:36:21"},"nativeSrc":"9990:36:21","nodeType":"YulExpressionStatement","src":"9990:36:21"}]},"name":"abi_encode_t_bytes4_to_t_bytes4_fromStack","nativeSrc":"9917:115:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9968:5:21","nodeType":"YulTypedName","src":"9968:5:21","type":""},{"name":"pos","nativeSrc":"9975:3:21","nodeType":"YulTypedName","src":"9975:3:21","type":""}],"src":"9917:115:21"},{"body":{"nativeSrc":"10134:122:21","nodeType":"YulBlock","src":"10134:122:21","statements":[{"nativeSrc":"10144:26:21","nodeType":"YulAssignment","src":"10144:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"10156:9:21","nodeType":"YulIdentifier","src":"10156:9:21"},{"kind":"number","nativeSrc":"10167:2:21","nodeType":"YulLiteral","src":"10167:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10152:3:21","nodeType":"YulIdentifier","src":"10152:3:21"},"nativeSrc":"10152:18:21","nodeType":"YulFunctionCall","src":"10152:18:21"},"variableNames":[{"name":"tail","nativeSrc":"10144:4:21","nodeType":"YulIdentifier","src":"10144:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"10222:6:21","nodeType":"YulIdentifier","src":"10222:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"10235:9:21","nodeType":"YulIdentifier","src":"10235:9:21"},{"kind":"number","nativeSrc":"10246:1:21","nodeType":"YulLiteral","src":"10246:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10231:3:21","nodeType":"YulIdentifier","src":"10231:3:21"},"nativeSrc":"10231:17:21","nodeType":"YulFunctionCall","src":"10231:17:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4_fromStack","nativeSrc":"10180:41:21","nodeType":"YulIdentifier","src":"10180:41:21"},"nativeSrc":"10180:69:21","nodeType":"YulFunctionCall","src":"10180:69:21"},"nativeSrc":"10180:69:21","nodeType":"YulExpressionStatement","src":"10180:69:21"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"10038:218:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10106:9:21","nodeType":"YulTypedName","src":"10106:9:21","type":""},{"name":"value0","nativeSrc":"10118:6:21","nodeType":"YulTypedName","src":"10118:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10129:4:21","nodeType":"YulTypedName","src":"10129:4:21","type":""}],"src":"10038:218:21"},{"body":{"nativeSrc":"10355:561:21","nodeType":"YulBlock","src":"10355:561:21","statements":[{"body":{"nativeSrc":"10401:83:21","nodeType":"YulBlock","src":"10401:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"10403:77:21","nodeType":"YulIdentifier","src":"10403:77:21"},"nativeSrc":"10403:79:21","nodeType":"YulFunctionCall","src":"10403:79:21"},"nativeSrc":"10403:79:21","nodeType":"YulExpressionStatement","src":"10403:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10376:7:21","nodeType":"YulIdentifier","src":"10376:7:21"},{"name":"headStart","nativeSrc":"10385:9:21","nodeType":"YulIdentifier","src":"10385:9:21"}],"functionName":{"name":"sub","nativeSrc":"10372:3:21","nodeType":"YulIdentifier","src":"10372:3:21"},"nativeSrc":"10372:23:21","nodeType":"YulFunctionCall","src":"10372:23:21"},{"kind":"number","nativeSrc":"10397:2:21","nodeType":"YulLiteral","src":"10397:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10368:3:21","nodeType":"YulIdentifier","src":"10368:3:21"},"nativeSrc":"10368:32:21","nodeType":"YulFunctionCall","src":"10368:32:21"},"nativeSrc":"10365:119:21","nodeType":"YulIf","src":"10365:119:21"},{"nativeSrc":"10494:287:21","nodeType":"YulBlock","src":"10494:287:21","statements":[{"nativeSrc":"10509:45:21","nodeType":"YulVariableDeclaration","src":"10509:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10540:9:21","nodeType":"YulIdentifier","src":"10540:9:21"},{"kind":"number","nativeSrc":"10551:1:21","nodeType":"YulLiteral","src":"10551:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10536:3:21","nodeType":"YulIdentifier","src":"10536:3:21"},"nativeSrc":"10536:17:21","nodeType":"YulFunctionCall","src":"10536:17:21"}],"functionName":{"name":"calldataload","nativeSrc":"10523:12:21","nodeType":"YulIdentifier","src":"10523:12:21"},"nativeSrc":"10523:31:21","nodeType":"YulFunctionCall","src":"10523:31:21"},"variables":[{"name":"offset","nativeSrc":"10513:6:21","nodeType":"YulTypedName","src":"10513:6:21","type":""}]},{"body":{"nativeSrc":"10601:83:21","nodeType":"YulBlock","src":"10601:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"10603:77:21","nodeType":"YulIdentifier","src":"10603:77:21"},"nativeSrc":"10603:79:21","nodeType":"YulFunctionCall","src":"10603:79:21"},"nativeSrc":"10603:79:21","nodeType":"YulExpressionStatement","src":"10603:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"10573:6:21","nodeType":"YulIdentifier","src":"10573:6:21"},{"kind":"number","nativeSrc":"10581:18:21","nodeType":"YulLiteral","src":"10581:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10570:2:21","nodeType":"YulIdentifier","src":"10570:2:21"},"nativeSrc":"10570:30:21","nodeType":"YulFunctionCall","src":"10570:30:21"},"nativeSrc":"10567:117:21","nodeType":"YulIf","src":"10567:117:21"},{"nativeSrc":"10698:73:21","nodeType":"YulAssignment","src":"10698:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10743:9:21","nodeType":"YulIdentifier","src":"10743:9:21"},{"name":"offset","nativeSrc":"10754:6:21","nodeType":"YulIdentifier","src":"10754:6:21"}],"functionName":{"name":"add","nativeSrc":"10739:3:21","nodeType":"YulIdentifier","src":"10739:3:21"},"nativeSrc":"10739:22:21","nodeType":"YulFunctionCall","src":"10739:22:21"},{"name":"dataEnd","nativeSrc":"10763:7:21","nodeType":"YulIdentifier","src":"10763:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"10708:30:21","nodeType":"YulIdentifier","src":"10708:30:21"},"nativeSrc":"10708:63:21","nodeType":"YulFunctionCall","src":"10708:63:21"},"variableNames":[{"name":"value0","nativeSrc":"10698:6:21","nodeType":"YulIdentifier","src":"10698:6:21"}]}]},{"nativeSrc":"10791:118:21","nodeType":"YulBlock","src":"10791:118:21","statements":[{"nativeSrc":"10806:16:21","nodeType":"YulVariableDeclaration","src":"10806:16:21","value":{"kind":"number","nativeSrc":"10820:2:21","nodeType":"YulLiteral","src":"10820:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"10810:6:21","nodeType":"YulTypedName","src":"10810:6:21","type":""}]},{"nativeSrc":"10836:63:21","nodeType":"YulAssignment","src":"10836:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10871:9:21","nodeType":"YulIdentifier","src":"10871:9:21"},{"name":"offset","nativeSrc":"10882:6:21","nodeType":"YulIdentifier","src":"10882:6:21"}],"functionName":{"name":"add","nativeSrc":"10867:3:21","nodeType":"YulIdentifier","src":"10867:3:21"},"nativeSrc":"10867:22:21","nodeType":"YulFunctionCall","src":"10867:22:21"},{"name":"dataEnd","nativeSrc":"10891:7:21","nodeType":"YulIdentifier","src":"10891:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"10846:20:21","nodeType":"YulIdentifier","src":"10846:20:21"},"nativeSrc":"10846:53:21","nodeType":"YulFunctionCall","src":"10846:53:21"},"variableNames":[{"name":"value1","nativeSrc":"10836:6:21","nodeType":"YulIdentifier","src":"10836:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_address","nativeSrc":"10262:654:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10317:9:21","nodeType":"YulTypedName","src":"10317:9:21","type":""},{"name":"dataEnd","nativeSrc":"10328:7:21","nodeType":"YulTypedName","src":"10328:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10340:6:21","nodeType":"YulTypedName","src":"10340:6:21","type":""},{"name":"value1","nativeSrc":"10348:6:21","nodeType":"YulTypedName","src":"10348:6:21","type":""}],"src":"10262:654:21"},{"body":{"nativeSrc":"10988:263:21","nodeType":"YulBlock","src":"10988:263:21","statements":[{"body":{"nativeSrc":"11034:83:21","nodeType":"YulBlock","src":"11034:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"11036:77:21","nodeType":"YulIdentifier","src":"11036:77:21"},"nativeSrc":"11036:79:21","nodeType":"YulFunctionCall","src":"11036:79:21"},"nativeSrc":"11036:79:21","nodeType":"YulExpressionStatement","src":"11036:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11009:7:21","nodeType":"YulIdentifier","src":"11009:7:21"},{"name":"headStart","nativeSrc":"11018:9:21","nodeType":"YulIdentifier","src":"11018:9:21"}],"functionName":{"name":"sub","nativeSrc":"11005:3:21","nodeType":"YulIdentifier","src":"11005:3:21"},"nativeSrc":"11005:23:21","nodeType":"YulFunctionCall","src":"11005:23:21"},{"kind":"number","nativeSrc":"11030:2:21","nodeType":"YulLiteral","src":"11030:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11001:3:21","nodeType":"YulIdentifier","src":"11001:3:21"},"nativeSrc":"11001:32:21","nodeType":"YulFunctionCall","src":"11001:32:21"},"nativeSrc":"10998:119:21","nodeType":"YulIf","src":"10998:119:21"},{"nativeSrc":"11127:117:21","nodeType":"YulBlock","src":"11127:117:21","statements":[{"nativeSrc":"11142:15:21","nodeType":"YulVariableDeclaration","src":"11142:15:21","value":{"kind":"number","nativeSrc":"11156:1:21","nodeType":"YulLiteral","src":"11156:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"11146:6:21","nodeType":"YulTypedName","src":"11146:6:21","type":""}]},{"nativeSrc":"11171:63:21","nodeType":"YulAssignment","src":"11171:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11206:9:21","nodeType":"YulIdentifier","src":"11206:9:21"},{"name":"offset","nativeSrc":"11217:6:21","nodeType":"YulIdentifier","src":"11217:6:21"}],"functionName":{"name":"add","nativeSrc":"11202:3:21","nodeType":"YulIdentifier","src":"11202:3:21"},"nativeSrc":"11202:22:21","nodeType":"YulFunctionCall","src":"11202:22:21"},{"name":"dataEnd","nativeSrc":"11226:7:21","nodeType":"YulIdentifier","src":"11226:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"11181:20:21","nodeType":"YulIdentifier","src":"11181:20:21"},"nativeSrc":"11181:53:21","nodeType":"YulFunctionCall","src":"11181:53:21"},"variableNames":[{"name":"value0","nativeSrc":"11171:6:21","nodeType":"YulIdentifier","src":"11171:6:21"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"10922:329:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10958:9:21","nodeType":"YulTypedName","src":"10958:9:21","type":""},{"name":"dataEnd","nativeSrc":"10969:7:21","nodeType":"YulTypedName","src":"10969:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10981:6:21","nodeType":"YulTypedName","src":"10981:6:21","type":""}],"src":"10922:329:21"},{"body":{"nativeSrc":"11322:53:21","nodeType":"YulBlock","src":"11322:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"11339:3:21","nodeType":"YulIdentifier","src":"11339:3:21"},{"arguments":[{"name":"value","nativeSrc":"11362:5:21","nodeType":"YulIdentifier","src":"11362:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"11344:17:21","nodeType":"YulIdentifier","src":"11344:17:21"},"nativeSrc":"11344:24:21","nodeType":"YulFunctionCall","src":"11344:24:21"}],"functionName":{"name":"mstore","nativeSrc":"11332:6:21","nodeType":"YulIdentifier","src":"11332:6:21"},"nativeSrc":"11332:37:21","nodeType":"YulFunctionCall","src":"11332:37:21"},"nativeSrc":"11332:37:21","nodeType":"YulExpressionStatement","src":"11332:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"11257:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"11310:5:21","nodeType":"YulTypedName","src":"11310:5:21","type":""},{"name":"pos","nativeSrc":"11317:3:21","nodeType":"YulTypedName","src":"11317:3:21","type":""}],"src":"11257:118:21"},{"body":{"nativeSrc":"11479:124:21","nodeType":"YulBlock","src":"11479:124:21","statements":[{"nativeSrc":"11489:26:21","nodeType":"YulAssignment","src":"11489:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"11501:9:21","nodeType":"YulIdentifier","src":"11501:9:21"},{"kind":"number","nativeSrc":"11512:2:21","nodeType":"YulLiteral","src":"11512:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11497:3:21","nodeType":"YulIdentifier","src":"11497:3:21"},"nativeSrc":"11497:18:21","nodeType":"YulFunctionCall","src":"11497:18:21"},"variableNames":[{"name":"tail","nativeSrc":"11489:4:21","nodeType":"YulIdentifier","src":"11489:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"11569:6:21","nodeType":"YulIdentifier","src":"11569:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"11582:9:21","nodeType":"YulIdentifier","src":"11582:9:21"},{"kind":"number","nativeSrc":"11593:1:21","nodeType":"YulLiteral","src":"11593:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11578:3:21","nodeType":"YulIdentifier","src":"11578:3:21"},"nativeSrc":"11578:17:21","nodeType":"YulFunctionCall","src":"11578:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"11525:43:21","nodeType":"YulIdentifier","src":"11525:43:21"},"nativeSrc":"11525:71:21","nodeType":"YulFunctionCall","src":"11525:71:21"},"nativeSrc":"11525:71:21","nodeType":"YulExpressionStatement","src":"11525:71:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"11381:222:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11451:9:21","nodeType":"YulTypedName","src":"11451:9:21","type":""},{"name":"value0","nativeSrc":"11463:6:21","nodeType":"YulTypedName","src":"11463:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11474:4:21","nodeType":"YulTypedName","src":"11474:4:21","type":""}],"src":"11381:222:21"},{"body":{"nativeSrc":"11736:818:21","nodeType":"YulBlock","src":"11736:818:21","statements":[{"body":{"nativeSrc":"11783:83:21","nodeType":"YulBlock","src":"11783:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"11785:77:21","nodeType":"YulIdentifier","src":"11785:77:21"},"nativeSrc":"11785:79:21","nodeType":"YulFunctionCall","src":"11785:79:21"},"nativeSrc":"11785:79:21","nodeType":"YulExpressionStatement","src":"11785:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11757:7:21","nodeType":"YulIdentifier","src":"11757:7:21"},{"name":"headStart","nativeSrc":"11766:9:21","nodeType":"YulIdentifier","src":"11766:9:21"}],"functionName":{"name":"sub","nativeSrc":"11753:3:21","nodeType":"YulIdentifier","src":"11753:3:21"},"nativeSrc":"11753:23:21","nodeType":"YulFunctionCall","src":"11753:23:21"},{"kind":"number","nativeSrc":"11778:3:21","nodeType":"YulLiteral","src":"11778:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"11749:3:21","nodeType":"YulIdentifier","src":"11749:3:21"},"nativeSrc":"11749:33:21","nodeType":"YulFunctionCall","src":"11749:33:21"},"nativeSrc":"11746:120:21","nodeType":"YulIf","src":"11746:120:21"},{"nativeSrc":"11876:287:21","nodeType":"YulBlock","src":"11876:287:21","statements":[{"nativeSrc":"11891:45:21","nodeType":"YulVariableDeclaration","src":"11891:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11922:9:21","nodeType":"YulIdentifier","src":"11922:9:21"},{"kind":"number","nativeSrc":"11933:1:21","nodeType":"YulLiteral","src":"11933:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"11918:3:21","nodeType":"YulIdentifier","src":"11918:3:21"},"nativeSrc":"11918:17:21","nodeType":"YulFunctionCall","src":"11918:17:21"}],"functionName":{"name":"calldataload","nativeSrc":"11905:12:21","nodeType":"YulIdentifier","src":"11905:12:21"},"nativeSrc":"11905:31:21","nodeType":"YulFunctionCall","src":"11905:31:21"},"variables":[{"name":"offset","nativeSrc":"11895:6:21","nodeType":"YulTypedName","src":"11895:6:21","type":""}]},{"body":{"nativeSrc":"11983:83:21","nodeType":"YulBlock","src":"11983:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"11985:77:21","nodeType":"YulIdentifier","src":"11985:77:21"},"nativeSrc":"11985:79:21","nodeType":"YulFunctionCall","src":"11985:79:21"},"nativeSrc":"11985:79:21","nodeType":"YulExpressionStatement","src":"11985:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"11955:6:21","nodeType":"YulIdentifier","src":"11955:6:21"},{"kind":"number","nativeSrc":"11963:18:21","nodeType":"YulLiteral","src":"11963:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11952:2:21","nodeType":"YulIdentifier","src":"11952:2:21"},"nativeSrc":"11952:30:21","nodeType":"YulFunctionCall","src":"11952:30:21"},"nativeSrc":"11949:117:21","nodeType":"YulIf","src":"11949:117:21"},{"nativeSrc":"12080:73:21","nodeType":"YulAssignment","src":"12080:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12125:9:21","nodeType":"YulIdentifier","src":"12125:9:21"},{"name":"offset","nativeSrc":"12136:6:21","nodeType":"YulIdentifier","src":"12136:6:21"}],"functionName":{"name":"add","nativeSrc":"12121:3:21","nodeType":"YulIdentifier","src":"12121:3:21"},"nativeSrc":"12121:22:21","nodeType":"YulFunctionCall","src":"12121:22:21"},{"name":"dataEnd","nativeSrc":"12145:7:21","nodeType":"YulIdentifier","src":"12145:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"12090:30:21","nodeType":"YulIdentifier","src":"12090:30:21"},"nativeSrc":"12090:63:21","nodeType":"YulFunctionCall","src":"12090:63:21"},"variableNames":[{"name":"value0","nativeSrc":"12080:6:21","nodeType":"YulIdentifier","src":"12080:6:21"}]}]},{"nativeSrc":"12173:118:21","nodeType":"YulBlock","src":"12173:118:21","statements":[{"nativeSrc":"12188:16:21","nodeType":"YulVariableDeclaration","src":"12188:16:21","value":{"kind":"number","nativeSrc":"12202:2:21","nodeType":"YulLiteral","src":"12202:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"12192:6:21","nodeType":"YulTypedName","src":"12192:6:21","type":""}]},{"nativeSrc":"12218:63:21","nodeType":"YulAssignment","src":"12218:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12253:9:21","nodeType":"YulIdentifier","src":"12253:9:21"},{"name":"offset","nativeSrc":"12264:6:21","nodeType":"YulIdentifier","src":"12264:6:21"}],"functionName":{"name":"add","nativeSrc":"12249:3:21","nodeType":"YulIdentifier","src":"12249:3:21"},"nativeSrc":"12249:22:21","nodeType":"YulFunctionCall","src":"12249:22:21"},{"name":"dataEnd","nativeSrc":"12273:7:21","nodeType":"YulIdentifier","src":"12273:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"12228:20:21","nodeType":"YulIdentifier","src":"12228:20:21"},"nativeSrc":"12228:53:21","nodeType":"YulFunctionCall","src":"12228:53:21"},"variableNames":[{"name":"value1","nativeSrc":"12218:6:21","nodeType":"YulIdentifier","src":"12218:6:21"}]}]},{"nativeSrc":"12301:118:21","nodeType":"YulBlock","src":"12301:118:21","statements":[{"nativeSrc":"12316:16:21","nodeType":"YulVariableDeclaration","src":"12316:16:21","value":{"kind":"number","nativeSrc":"12330:2:21","nodeType":"YulLiteral","src":"12330:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"12320:6:21","nodeType":"YulTypedName","src":"12320:6:21","type":""}]},{"nativeSrc":"12346:63:21","nodeType":"YulAssignment","src":"12346:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12381:9:21","nodeType":"YulIdentifier","src":"12381:9:21"},{"name":"offset","nativeSrc":"12392:6:21","nodeType":"YulIdentifier","src":"12392:6:21"}],"functionName":{"name":"add","nativeSrc":"12377:3:21","nodeType":"YulIdentifier","src":"12377:3:21"},"nativeSrc":"12377:22:21","nodeType":"YulFunctionCall","src":"12377:22:21"},{"name":"dataEnd","nativeSrc":"12401:7:21","nodeType":"YulIdentifier","src":"12401:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"12356:20:21","nodeType":"YulIdentifier","src":"12356:20:21"},"nativeSrc":"12356:53:21","nodeType":"YulFunctionCall","src":"12356:53:21"},"variableNames":[{"name":"value2","nativeSrc":"12346:6:21","nodeType":"YulIdentifier","src":"12346:6:21"}]}]},{"nativeSrc":"12429:118:21","nodeType":"YulBlock","src":"12429:118:21","statements":[{"nativeSrc":"12444:16:21","nodeType":"YulVariableDeclaration","src":"12444:16:21","value":{"kind":"number","nativeSrc":"12458:2:21","nodeType":"YulLiteral","src":"12458:2:21","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"12448:6:21","nodeType":"YulTypedName","src":"12448:6:21","type":""}]},{"nativeSrc":"12474:63:21","nodeType":"YulAssignment","src":"12474:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12509:9:21","nodeType":"YulIdentifier","src":"12509:9:21"},{"name":"offset","nativeSrc":"12520:6:21","nodeType":"YulIdentifier","src":"12520:6:21"}],"functionName":{"name":"add","nativeSrc":"12505:3:21","nodeType":"YulIdentifier","src":"12505:3:21"},"nativeSrc":"12505:22:21","nodeType":"YulFunctionCall","src":"12505:22:21"},{"name":"dataEnd","nativeSrc":"12529:7:21","nodeType":"YulIdentifier","src":"12529:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"12484:20:21","nodeType":"YulIdentifier","src":"12484:20:21"},"nativeSrc":"12484:53:21","nodeType":"YulFunctionCall","src":"12484:53:21"},"variableNames":[{"name":"value3","nativeSrc":"12474:6:21","nodeType":"YulIdentifier","src":"12474:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_addresst_addresst_uint256","nativeSrc":"11609:945:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11682:9:21","nodeType":"YulTypedName","src":"11682:9:21","type":""},{"name":"dataEnd","nativeSrc":"11693:7:21","nodeType":"YulTypedName","src":"11693:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11705:6:21","nodeType":"YulTypedName","src":"11705:6:21","type":""},{"name":"value1","nativeSrc":"11713:6:21","nodeType":"YulTypedName","src":"11713:6:21","type":""},{"name":"value2","nativeSrc":"11721:6:21","nodeType":"YulTypedName","src":"11721:6:21","type":""},{"name":"value3","nativeSrc":"11729:6:21","nodeType":"YulTypedName","src":"11729:6:21","type":""}],"src":"11609:945:21"},{"body":{"nativeSrc":"12604:105:21","nodeType":"YulBlock","src":"12604:105:21","statements":[{"nativeSrc":"12614:89:21","nodeType":"YulAssignment","src":"12614:89:21","value":{"arguments":[{"name":"value","nativeSrc":"12629:5:21","nodeType":"YulIdentifier","src":"12629:5:21"},{"kind":"number","nativeSrc":"12636:66:21","nodeType":"YulLiteral","src":"12636:66:21","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"12625:3:21","nodeType":"YulIdentifier","src":"12625:3:21"},"nativeSrc":"12625:78:21","nodeType":"YulFunctionCall","src":"12625:78:21"},"variableNames":[{"name":"cleaned","nativeSrc":"12614:7:21","nodeType":"YulIdentifier","src":"12614:7:21"}]}]},"name":"cleanup_t_bytes1","nativeSrc":"12560:149:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12586:5:21","nodeType":"YulTypedName","src":"12586:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"12596:7:21","nodeType":"YulTypedName","src":"12596:7:21","type":""}],"src":"12560:149:21"},{"body":{"nativeSrc":"12778:52:21","nodeType":"YulBlock","src":"12778:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"12795:3:21","nodeType":"YulIdentifier","src":"12795:3:21"},{"arguments":[{"name":"value","nativeSrc":"12817:5:21","nodeType":"YulIdentifier","src":"12817:5:21"}],"functionName":{"name":"cleanup_t_bytes1","nativeSrc":"12800:16:21","nodeType":"YulIdentifier","src":"12800:16:21"},"nativeSrc":"12800:23:21","nodeType":"YulFunctionCall","src":"12800:23:21"}],"functionName":{"name":"mstore","nativeSrc":"12788:6:21","nodeType":"YulIdentifier","src":"12788:6:21"},"nativeSrc":"12788:36:21","nodeType":"YulFunctionCall","src":"12788:36:21"},"nativeSrc":"12788:36:21","nodeType":"YulExpressionStatement","src":"12788:36:21"}]},"name":"abi_encode_t_bytes1_to_t_bytes1_fromStack","nativeSrc":"12715:115:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12766:5:21","nodeType":"YulTypedName","src":"12766:5:21","type":""},{"name":"pos","nativeSrc":"12773:3:21","nodeType":"YulTypedName","src":"12773:3:21","type":""}],"src":"12715:115:21"},{"body":{"nativeSrc":"12895:40:21","nodeType":"YulBlock","src":"12895:40:21","statements":[{"nativeSrc":"12906:22:21","nodeType":"YulAssignment","src":"12906:22:21","value":{"arguments":[{"name":"value","nativeSrc":"12922:5:21","nodeType":"YulIdentifier","src":"12922:5:21"}],"functionName":{"name":"mload","nativeSrc":"12916:5:21","nodeType":"YulIdentifier","src":"12916:5:21"},"nativeSrc":"12916:12:21","nodeType":"YulFunctionCall","src":"12916:12:21"},"variableNames":[{"name":"length","nativeSrc":"12906:6:21","nodeType":"YulIdentifier","src":"12906:6:21"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"12836:99:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12878:5:21","nodeType":"YulTypedName","src":"12878:5:21","type":""}],"returnVariables":[{"name":"length","nativeSrc":"12888:6:21","nodeType":"YulTypedName","src":"12888:6:21","type":""}],"src":"12836:99:21"},{"body":{"nativeSrc":"13037:73:21","nodeType":"YulBlock","src":"13037:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"13054:3:21","nodeType":"YulIdentifier","src":"13054:3:21"},{"name":"length","nativeSrc":"13059:6:21","nodeType":"YulIdentifier","src":"13059:6:21"}],"functionName":{"name":"mstore","nativeSrc":"13047:6:21","nodeType":"YulIdentifier","src":"13047:6:21"},"nativeSrc":"13047:19:21","nodeType":"YulFunctionCall","src":"13047:19:21"},"nativeSrc":"13047:19:21","nodeType":"YulExpressionStatement","src":"13047:19:21"},{"nativeSrc":"13075:29:21","nodeType":"YulAssignment","src":"13075:29:21","value":{"arguments":[{"name":"pos","nativeSrc":"13094:3:21","nodeType":"YulIdentifier","src":"13094:3:21"},{"kind":"number","nativeSrc":"13099:4:21","nodeType":"YulLiteral","src":"13099:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13090:3:21","nodeType":"YulIdentifier","src":"13090:3:21"},"nativeSrc":"13090:14:21","nodeType":"YulFunctionCall","src":"13090:14:21"},"variableNames":[{"name":"updated_pos","nativeSrc":"13075:11:21","nodeType":"YulIdentifier","src":"13075:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"12941:169:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13009:3:21","nodeType":"YulTypedName","src":"13009:3:21","type":""},{"name":"length","nativeSrc":"13014:6:21","nodeType":"YulTypedName","src":"13014:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"13025:11:21","nodeType":"YulTypedName","src":"13025:11:21","type":""}],"src":"12941:169:21"},{"body":{"nativeSrc":"13178:184:21","nodeType":"YulBlock","src":"13178:184:21","statements":[{"nativeSrc":"13188:10:21","nodeType":"YulVariableDeclaration","src":"13188:10:21","value":{"kind":"number","nativeSrc":"13197:1:21","nodeType":"YulLiteral","src":"13197:1:21","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"13192:1:21","nodeType":"YulTypedName","src":"13192:1:21","type":""}]},{"body":{"nativeSrc":"13257:63:21","nodeType":"YulBlock","src":"13257:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"13282:3:21","nodeType":"YulIdentifier","src":"13282:3:21"},{"name":"i","nativeSrc":"13287:1:21","nodeType":"YulIdentifier","src":"13287:1:21"}],"functionName":{"name":"add","nativeSrc":"13278:3:21","nodeType":"YulIdentifier","src":"13278:3:21"},"nativeSrc":"13278:11:21","nodeType":"YulFunctionCall","src":"13278:11:21"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"13301:3:21","nodeType":"YulIdentifier","src":"13301:3:21"},{"name":"i","nativeSrc":"13306:1:21","nodeType":"YulIdentifier","src":"13306:1:21"}],"functionName":{"name":"add","nativeSrc":"13297:3:21","nodeType":"YulIdentifier","src":"13297:3:21"},"nativeSrc":"13297:11:21","nodeType":"YulFunctionCall","src":"13297:11:21"}],"functionName":{"name":"mload","nativeSrc":"13291:5:21","nodeType":"YulIdentifier","src":"13291:5:21"},"nativeSrc":"13291:18:21","nodeType":"YulFunctionCall","src":"13291:18:21"}],"functionName":{"name":"mstore","nativeSrc":"13271:6:21","nodeType":"YulIdentifier","src":"13271:6:21"},"nativeSrc":"13271:39:21","nodeType":"YulFunctionCall","src":"13271:39:21"},"nativeSrc":"13271:39:21","nodeType":"YulExpressionStatement","src":"13271:39:21"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"13218:1:21","nodeType":"YulIdentifier","src":"13218:1:21"},{"name":"length","nativeSrc":"13221:6:21","nodeType":"YulIdentifier","src":"13221:6:21"}],"functionName":{"name":"lt","nativeSrc":"13215:2:21","nodeType":"YulIdentifier","src":"13215:2:21"},"nativeSrc":"13215:13:21","nodeType":"YulFunctionCall","src":"13215:13:21"},"nativeSrc":"13207:113:21","nodeType":"YulForLoop","post":{"nativeSrc":"13229:19:21","nodeType":"YulBlock","src":"13229:19:21","statements":[{"nativeSrc":"13231:15:21","nodeType":"YulAssignment","src":"13231:15:21","value":{"arguments":[{"name":"i","nativeSrc":"13240:1:21","nodeType":"YulIdentifier","src":"13240:1:21"},{"kind":"number","nativeSrc":"13243:2:21","nodeType":"YulLiteral","src":"13243:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13236:3:21","nodeType":"YulIdentifier","src":"13236:3:21"},"nativeSrc":"13236:10:21","nodeType":"YulFunctionCall","src":"13236:10:21"},"variableNames":[{"name":"i","nativeSrc":"13231:1:21","nodeType":"YulIdentifier","src":"13231:1:21"}]}]},"pre":{"nativeSrc":"13211:3:21","nodeType":"YulBlock","src":"13211:3:21","statements":[]},"src":"13207:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"13340:3:21","nodeType":"YulIdentifier","src":"13340:3:21"},{"name":"length","nativeSrc":"13345:6:21","nodeType":"YulIdentifier","src":"13345:6:21"}],"functionName":{"name":"add","nativeSrc":"13336:3:21","nodeType":"YulIdentifier","src":"13336:3:21"},"nativeSrc":"13336:16:21","nodeType":"YulFunctionCall","src":"13336:16:21"},{"kind":"number","nativeSrc":"13354:1:21","nodeType":"YulLiteral","src":"13354:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"13329:6:21","nodeType":"YulIdentifier","src":"13329:6:21"},"nativeSrc":"13329:27:21","nodeType":"YulFunctionCall","src":"13329:27:21"},"nativeSrc":"13329:27:21","nodeType":"YulExpressionStatement","src":"13329:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"13116:246:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"13160:3:21","nodeType":"YulTypedName","src":"13160:3:21","type":""},{"name":"dst","nativeSrc":"13165:3:21","nodeType":"YulTypedName","src":"13165:3:21","type":""},{"name":"length","nativeSrc":"13170:6:21","nodeType":"YulTypedName","src":"13170:6:21","type":""}],"src":"13116:246:21"},{"body":{"nativeSrc":"13460:285:21","nodeType":"YulBlock","src":"13460:285:21","statements":[{"nativeSrc":"13470:53:21","nodeType":"YulVariableDeclaration","src":"13470:53:21","value":{"arguments":[{"name":"value","nativeSrc":"13517:5:21","nodeType":"YulIdentifier","src":"13517:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"13484:32:21","nodeType":"YulIdentifier","src":"13484:32:21"},"nativeSrc":"13484:39:21","nodeType":"YulFunctionCall","src":"13484:39:21"},"variables":[{"name":"length","nativeSrc":"13474:6:21","nodeType":"YulTypedName","src":"13474:6:21","type":""}]},{"nativeSrc":"13532:78:21","nodeType":"YulAssignment","src":"13532:78:21","value":{"arguments":[{"name":"pos","nativeSrc":"13598:3:21","nodeType":"YulIdentifier","src":"13598:3:21"},{"name":"length","nativeSrc":"13603:6:21","nodeType":"YulIdentifier","src":"13603:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"13539:58:21","nodeType":"YulIdentifier","src":"13539:58:21"},"nativeSrc":"13539:71:21","nodeType":"YulFunctionCall","src":"13539:71:21"},"variableNames":[{"name":"pos","nativeSrc":"13532:3:21","nodeType":"YulIdentifier","src":"13532:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13658:5:21","nodeType":"YulIdentifier","src":"13658:5:21"},{"kind":"number","nativeSrc":"13665:4:21","nodeType":"YulLiteral","src":"13665:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13654:3:21","nodeType":"YulIdentifier","src":"13654:3:21"},"nativeSrc":"13654:16:21","nodeType":"YulFunctionCall","src":"13654:16:21"},{"name":"pos","nativeSrc":"13672:3:21","nodeType":"YulIdentifier","src":"13672:3:21"},{"name":"length","nativeSrc":"13677:6:21","nodeType":"YulIdentifier","src":"13677:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"13619:34:21","nodeType":"YulIdentifier","src":"13619:34:21"},"nativeSrc":"13619:65:21","nodeType":"YulFunctionCall","src":"13619:65:21"},"nativeSrc":"13619:65:21","nodeType":"YulExpressionStatement","src":"13619:65:21"},{"nativeSrc":"13693:46:21","nodeType":"YulAssignment","src":"13693:46:21","value":{"arguments":[{"name":"pos","nativeSrc":"13704:3:21","nodeType":"YulIdentifier","src":"13704:3:21"},{"arguments":[{"name":"length","nativeSrc":"13731:6:21","nodeType":"YulIdentifier","src":"13731:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"13709:21:21","nodeType":"YulIdentifier","src":"13709:21:21"},"nativeSrc":"13709:29:21","nodeType":"YulFunctionCall","src":"13709:29:21"}],"functionName":{"name":"add","nativeSrc":"13700:3:21","nodeType":"YulIdentifier","src":"13700:3:21"},"nativeSrc":"13700:39:21","nodeType":"YulFunctionCall","src":"13700:39:21"},"variableNames":[{"name":"end","nativeSrc":"13693:3:21","nodeType":"YulIdentifier","src":"13693:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"13368:377:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"13441:5:21","nodeType":"YulTypedName","src":"13441:5:21","type":""},{"name":"pos","nativeSrc":"13448:3:21","nodeType":"YulTypedName","src":"13448:3:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13456:3:21","nodeType":"YulTypedName","src":"13456:3:21","type":""}],"src":"13368:377:21"},{"body":{"nativeSrc":"13816:53:21","nodeType":"YulBlock","src":"13816:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"13833:3:21","nodeType":"YulIdentifier","src":"13833:3:21"},{"arguments":[{"name":"value","nativeSrc":"13856:5:21","nodeType":"YulIdentifier","src":"13856:5:21"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"13838:17:21","nodeType":"YulIdentifier","src":"13838:17:21"},"nativeSrc":"13838:24:21","nodeType":"YulFunctionCall","src":"13838:24:21"}],"functionName":{"name":"mstore","nativeSrc":"13826:6:21","nodeType":"YulIdentifier","src":"13826:6:21"},"nativeSrc":"13826:37:21","nodeType":"YulFunctionCall","src":"13826:37:21"},"nativeSrc":"13826:37:21","nodeType":"YulExpressionStatement","src":"13826:37:21"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"13751:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"13804:5:21","nodeType":"YulTypedName","src":"13804:5:21","type":""},{"name":"pos","nativeSrc":"13811:3:21","nodeType":"YulTypedName","src":"13811:3:21","type":""}],"src":"13751:118:21"},{"body":{"nativeSrc":"13920:32:21","nodeType":"YulBlock","src":"13920:32:21","statements":[{"nativeSrc":"13930:16:21","nodeType":"YulAssignment","src":"13930:16:21","value":{"name":"value","nativeSrc":"13941:5:21","nodeType":"YulIdentifier","src":"13941:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"13930:7:21","nodeType":"YulIdentifier","src":"13930:7:21"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"13875:77:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"13902:5:21","nodeType":"YulTypedName","src":"13902:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"13912:7:21","nodeType":"YulTypedName","src":"13912:7:21","type":""}],"src":"13875:77:21"},{"body":{"nativeSrc":"14023:53:21","nodeType":"YulBlock","src":"14023:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"14040:3:21","nodeType":"YulIdentifier","src":"14040:3:21"},{"arguments":[{"name":"value","nativeSrc":"14063:5:21","nodeType":"YulIdentifier","src":"14063:5:21"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"14045:17:21","nodeType":"YulIdentifier","src":"14045:17:21"},"nativeSrc":"14045:24:21","nodeType":"YulFunctionCall","src":"14045:24:21"}],"functionName":{"name":"mstore","nativeSrc":"14033:6:21","nodeType":"YulIdentifier","src":"14033:6:21"},"nativeSrc":"14033:37:21","nodeType":"YulFunctionCall","src":"14033:37:21"},"nativeSrc":"14033:37:21","nodeType":"YulExpressionStatement","src":"14033:37:21"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"13958:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14011:5:21","nodeType":"YulTypedName","src":"14011:5:21","type":""},{"name":"pos","nativeSrc":"14018:3:21","nodeType":"YulTypedName","src":"14018:3:21","type":""}],"src":"13958:118:21"},{"body":{"nativeSrc":"14156:40:21","nodeType":"YulBlock","src":"14156:40:21","statements":[{"nativeSrc":"14167:22:21","nodeType":"YulAssignment","src":"14167:22:21","value":{"arguments":[{"name":"value","nativeSrc":"14183:5:21","nodeType":"YulIdentifier","src":"14183:5:21"}],"functionName":{"name":"mload","nativeSrc":"14177:5:21","nodeType":"YulIdentifier","src":"14177:5:21"},"nativeSrc":"14177:12:21","nodeType":"YulFunctionCall","src":"14177:12:21"},"variableNames":[{"name":"length","nativeSrc":"14167:6:21","nodeType":"YulIdentifier","src":"14167:6:21"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"14082:114:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14139:5:21","nodeType":"YulTypedName","src":"14139:5:21","type":""}],"returnVariables":[{"name":"length","nativeSrc":"14149:6:21","nodeType":"YulTypedName","src":"14149:6:21","type":""}],"src":"14082:114:21"},{"body":{"nativeSrc":"14313:73:21","nodeType":"YulBlock","src":"14313:73:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"14330:3:21","nodeType":"YulIdentifier","src":"14330:3:21"},{"name":"length","nativeSrc":"14335:6:21","nodeType":"YulIdentifier","src":"14335:6:21"}],"functionName":{"name":"mstore","nativeSrc":"14323:6:21","nodeType":"YulIdentifier","src":"14323:6:21"},"nativeSrc":"14323:19:21","nodeType":"YulFunctionCall","src":"14323:19:21"},"nativeSrc":"14323:19:21","nodeType":"YulExpressionStatement","src":"14323:19:21"},{"nativeSrc":"14351:29:21","nodeType":"YulAssignment","src":"14351:29:21","value":{"arguments":[{"name":"pos","nativeSrc":"14370:3:21","nodeType":"YulIdentifier","src":"14370:3:21"},{"kind":"number","nativeSrc":"14375:4:21","nodeType":"YulLiteral","src":"14375:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14366:3:21","nodeType":"YulIdentifier","src":"14366:3:21"},"nativeSrc":"14366:14:21","nodeType":"YulFunctionCall","src":"14366:14:21"},"variableNames":[{"name":"updated_pos","nativeSrc":"14351:11:21","nodeType":"YulIdentifier","src":"14351:11:21"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nativeSrc":"14202:184:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14285:3:21","nodeType":"YulTypedName","src":"14285:3:21","type":""},{"name":"length","nativeSrc":"14290:6:21","nodeType":"YulTypedName","src":"14290:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"14301:11:21","nodeType":"YulTypedName","src":"14301:11:21","type":""}],"src":"14202:184:21"},{"body":{"nativeSrc":"14464:60:21","nodeType":"YulBlock","src":"14464:60:21","statements":[{"nativeSrc":"14474:11:21","nodeType":"YulAssignment","src":"14474:11:21","value":{"name":"ptr","nativeSrc":"14482:3:21","nodeType":"YulIdentifier","src":"14482:3:21"},"variableNames":[{"name":"data","nativeSrc":"14474:4:21","nodeType":"YulIdentifier","src":"14474:4:21"}]},{"nativeSrc":"14495:22:21","nodeType":"YulAssignment","src":"14495:22:21","value":{"arguments":[{"name":"ptr","nativeSrc":"14507:3:21","nodeType":"YulIdentifier","src":"14507:3:21"},{"kind":"number","nativeSrc":"14512:4:21","nodeType":"YulLiteral","src":"14512:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14503:3:21","nodeType":"YulIdentifier","src":"14503:3:21"},"nativeSrc":"14503:14:21","nodeType":"YulFunctionCall","src":"14503:14:21"},"variableNames":[{"name":"data","nativeSrc":"14495:4:21","nodeType":"YulIdentifier","src":"14495:4:21"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"14392:132:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"14451:3:21","nodeType":"YulTypedName","src":"14451:3:21","type":""}],"returnVariables":[{"name":"data","nativeSrc":"14459:4:21","nodeType":"YulTypedName","src":"14459:4:21","type":""}],"src":"14392:132:21"},{"body":{"nativeSrc":"14585:53:21","nodeType":"YulBlock","src":"14585:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"14602:3:21","nodeType":"YulIdentifier","src":"14602:3:21"},{"arguments":[{"name":"value","nativeSrc":"14625:5:21","nodeType":"YulIdentifier","src":"14625:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"14607:17:21","nodeType":"YulIdentifier","src":"14607:17:21"},"nativeSrc":"14607:24:21","nodeType":"YulFunctionCall","src":"14607:24:21"}],"functionName":{"name":"mstore","nativeSrc":"14595:6:21","nodeType":"YulIdentifier","src":"14595:6:21"},"nativeSrc":"14595:37:21","nodeType":"YulFunctionCall","src":"14595:37:21"},"nativeSrc":"14595:37:21","nodeType":"YulExpressionStatement","src":"14595:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256","nativeSrc":"14530:108:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"14573:5:21","nodeType":"YulTypedName","src":"14573:5:21","type":""},{"name":"pos","nativeSrc":"14580:3:21","nodeType":"YulTypedName","src":"14580:3:21","type":""}],"src":"14530:108:21"},{"body":{"nativeSrc":"14724:99:21","nodeType":"YulBlock","src":"14724:99:21","statements":[{"expression":{"arguments":[{"name":"value0","nativeSrc":"14768:6:21","nodeType":"YulIdentifier","src":"14768:6:21"},{"name":"pos","nativeSrc":"14776:3:21","nodeType":"YulIdentifier","src":"14776:3:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nativeSrc":"14734:33:21","nodeType":"YulIdentifier","src":"14734:33:21"},"nativeSrc":"14734:46:21","nodeType":"YulFunctionCall","src":"14734:46:21"},"nativeSrc":"14734:46:21","nodeType":"YulExpressionStatement","src":"14734:46:21"},{"nativeSrc":"14789:28:21","nodeType":"YulAssignment","src":"14789:28:21","value":{"arguments":[{"name":"pos","nativeSrc":"14807:3:21","nodeType":"YulIdentifier","src":"14807:3:21"},{"kind":"number","nativeSrc":"14812:4:21","nodeType":"YulLiteral","src":"14812:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14803:3:21","nodeType":"YulIdentifier","src":"14803:3:21"},"nativeSrc":"14803:14:21","nodeType":"YulFunctionCall","src":"14803:14:21"},"variableNames":[{"name":"updatedPos","nativeSrc":"14789:10:21","nodeType":"YulIdentifier","src":"14789:10:21"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nativeSrc":"14644:179:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nativeSrc":"14697:6:21","nodeType":"YulTypedName","src":"14697:6:21","type":""},{"name":"pos","nativeSrc":"14705:3:21","nodeType":"YulTypedName","src":"14705:3:21","type":""}],"returnVariables":[{"name":"updatedPos","nativeSrc":"14713:10:21","nodeType":"YulTypedName","src":"14713:10:21","type":""}],"src":"14644:179:21"},{"body":{"nativeSrc":"14904:38:21","nodeType":"YulBlock","src":"14904:38:21","statements":[{"nativeSrc":"14914:22:21","nodeType":"YulAssignment","src":"14914:22:21","value":{"arguments":[{"name":"ptr","nativeSrc":"14926:3:21","nodeType":"YulIdentifier","src":"14926:3:21"},{"kind":"number","nativeSrc":"14931:4:21","nodeType":"YulLiteral","src":"14931:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14922:3:21","nodeType":"YulIdentifier","src":"14922:3:21"},"nativeSrc":"14922:14:21","nodeType":"YulFunctionCall","src":"14922:14:21"},"variableNames":[{"name":"next","nativeSrc":"14914:4:21","nodeType":"YulIdentifier","src":"14914:4:21"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"14829:113:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"14891:3:21","nodeType":"YulTypedName","src":"14891:3:21","type":""}],"returnVariables":[{"name":"next","nativeSrc":"14899:4:21","nodeType":"YulTypedName","src":"14899:4:21","type":""}],"src":"14829:113:21"},{"body":{"nativeSrc":"15102:608:21","nodeType":"YulBlock","src":"15102:608:21","statements":[{"nativeSrc":"15112:68:21","nodeType":"YulVariableDeclaration","src":"15112:68:21","value":{"arguments":[{"name":"value","nativeSrc":"15174:5:21","nodeType":"YulIdentifier","src":"15174:5:21"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"15126:47:21","nodeType":"YulIdentifier","src":"15126:47:21"},"nativeSrc":"15126:54:21","nodeType":"YulFunctionCall","src":"15126:54:21"},"variables":[{"name":"length","nativeSrc":"15116:6:21","nodeType":"YulTypedName","src":"15116:6:21","type":""}]},{"nativeSrc":"15189:93:21","nodeType":"YulAssignment","src":"15189:93:21","value":{"arguments":[{"name":"pos","nativeSrc":"15270:3:21","nodeType":"YulIdentifier","src":"15270:3:21"},{"name":"length","nativeSrc":"15275:6:21","nodeType":"YulIdentifier","src":"15275:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nativeSrc":"15196:73:21","nodeType":"YulIdentifier","src":"15196:73:21"},"nativeSrc":"15196:86:21","nodeType":"YulFunctionCall","src":"15196:86:21"},"variableNames":[{"name":"pos","nativeSrc":"15189:3:21","nodeType":"YulIdentifier","src":"15189:3:21"}]},{"nativeSrc":"15291:71:21","nodeType":"YulVariableDeclaration","src":"15291:71:21","value":{"arguments":[{"name":"value","nativeSrc":"15356:5:21","nodeType":"YulIdentifier","src":"15356:5:21"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"15306:49:21","nodeType":"YulIdentifier","src":"15306:49:21"},"nativeSrc":"15306:56:21","nodeType":"YulFunctionCall","src":"15306:56:21"},"variables":[{"name":"baseRef","nativeSrc":"15295:7:21","nodeType":"YulTypedName","src":"15295:7:21","type":""}]},{"nativeSrc":"15371:21:21","nodeType":"YulVariableDeclaration","src":"15371:21:21","value":{"name":"baseRef","nativeSrc":"15385:7:21","nodeType":"YulIdentifier","src":"15385:7:21"},"variables":[{"name":"srcPtr","nativeSrc":"15375:6:21","nodeType":"YulTypedName","src":"15375:6:21","type":""}]},{"body":{"nativeSrc":"15461:224:21","nodeType":"YulBlock","src":"15461:224:21","statements":[{"nativeSrc":"15475:34:21","nodeType":"YulVariableDeclaration","src":"15475:34:21","value":{"arguments":[{"name":"srcPtr","nativeSrc":"15502:6:21","nodeType":"YulIdentifier","src":"15502:6:21"}],"functionName":{"name":"mload","nativeSrc":"15496:5:21","nodeType":"YulIdentifier","src":"15496:5:21"},"nativeSrc":"15496:13:21","nodeType":"YulFunctionCall","src":"15496:13:21"},"variables":[{"name":"elementValue0","nativeSrc":"15479:13:21","nodeType":"YulTypedName","src":"15479:13:21","type":""}]},{"nativeSrc":"15522:70:21","nodeType":"YulAssignment","src":"15522:70:21","value":{"arguments":[{"name":"elementValue0","nativeSrc":"15573:13:21","nodeType":"YulIdentifier","src":"15573:13:21"},{"name":"pos","nativeSrc":"15588:3:21","nodeType":"YulIdentifier","src":"15588:3:21"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nativeSrc":"15529:43:21","nodeType":"YulIdentifier","src":"15529:43:21"},"nativeSrc":"15529:63:21","nodeType":"YulFunctionCall","src":"15529:63:21"},"variableNames":[{"name":"pos","nativeSrc":"15522:3:21","nodeType":"YulIdentifier","src":"15522:3:21"}]},{"nativeSrc":"15605:70:21","nodeType":"YulAssignment","src":"15605:70:21","value":{"arguments":[{"name":"srcPtr","nativeSrc":"15668:6:21","nodeType":"YulIdentifier","src":"15668:6:21"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"15615:52:21","nodeType":"YulIdentifier","src":"15615:52:21"},"nativeSrc":"15615:60:21","nodeType":"YulFunctionCall","src":"15615:60:21"},"variableNames":[{"name":"srcPtr","nativeSrc":"15605:6:21","nodeType":"YulIdentifier","src":"15605:6:21"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"15423:1:21","nodeType":"YulIdentifier","src":"15423:1:21"},{"name":"length","nativeSrc":"15426:6:21","nodeType":"YulIdentifier","src":"15426:6:21"}],"functionName":{"name":"lt","nativeSrc":"15420:2:21","nodeType":"YulIdentifier","src":"15420:2:21"},"nativeSrc":"15420:13:21","nodeType":"YulFunctionCall","src":"15420:13:21"},"nativeSrc":"15401:284:21","nodeType":"YulForLoop","post":{"nativeSrc":"15434:18:21","nodeType":"YulBlock","src":"15434:18:21","statements":[{"nativeSrc":"15436:14:21","nodeType":"YulAssignment","src":"15436:14:21","value":{"arguments":[{"name":"i","nativeSrc":"15445:1:21","nodeType":"YulIdentifier","src":"15445:1:21"},{"kind":"number","nativeSrc":"15448:1:21","nodeType":"YulLiteral","src":"15448:1:21","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"15441:3:21","nodeType":"YulIdentifier","src":"15441:3:21"},"nativeSrc":"15441:9:21","nodeType":"YulFunctionCall","src":"15441:9:21"},"variableNames":[{"name":"i","nativeSrc":"15436:1:21","nodeType":"YulIdentifier","src":"15436:1:21"}]}]},"pre":{"nativeSrc":"15405:14:21","nodeType":"YulBlock","src":"15405:14:21","statements":[{"nativeSrc":"15407:10:21","nodeType":"YulVariableDeclaration","src":"15407:10:21","value":{"kind":"number","nativeSrc":"15416:1:21","nodeType":"YulLiteral","src":"15416:1:21","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"15411:1:21","nodeType":"YulTypedName","src":"15411:1:21","type":""}]}]},"src":"15401:284:21"},{"nativeSrc":"15694:10:21","nodeType":"YulAssignment","src":"15694:10:21","value":{"name":"pos","nativeSrc":"15701:3:21","nodeType":"YulIdentifier","src":"15701:3:21"},"variableNames":[{"name":"end","nativeSrc":"15694:3:21","nodeType":"YulIdentifier","src":"15694:3:21"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nativeSrc":"14978:732:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"15081:5:21","nodeType":"YulTypedName","src":"15081:5:21","type":""},{"name":"pos","nativeSrc":"15088:3:21","nodeType":"YulTypedName","src":"15088:3:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15097:3:21","nodeType":"YulTypedName","src":"15097:3:21","type":""}],"src":"14978:732:21"},{"body":{"nativeSrc":"16070:861:21","nodeType":"YulBlock","src":"16070:861:21","statements":[{"nativeSrc":"16080:27:21","nodeType":"YulAssignment","src":"16080:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"16092:9:21","nodeType":"YulIdentifier","src":"16092:9:21"},{"kind":"number","nativeSrc":"16103:3:21","nodeType":"YulLiteral","src":"16103:3:21","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"16088:3:21","nodeType":"YulIdentifier","src":"16088:3:21"},"nativeSrc":"16088:19:21","nodeType":"YulFunctionCall","src":"16088:19:21"},"variableNames":[{"name":"tail","nativeSrc":"16080:4:21","nodeType":"YulIdentifier","src":"16080:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"16159:6:21","nodeType":"YulIdentifier","src":"16159:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"16172:9:21","nodeType":"YulIdentifier","src":"16172:9:21"},{"kind":"number","nativeSrc":"16183:1:21","nodeType":"YulLiteral","src":"16183:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"16168:3:21","nodeType":"YulIdentifier","src":"16168:3:21"},"nativeSrc":"16168:17:21","nodeType":"YulFunctionCall","src":"16168:17:21"}],"functionName":{"name":"abi_encode_t_bytes1_to_t_bytes1_fromStack","nativeSrc":"16117:41:21","nodeType":"YulIdentifier","src":"16117:41:21"},"nativeSrc":"16117:69:21","nodeType":"YulFunctionCall","src":"16117:69:21"},"nativeSrc":"16117:69:21","nodeType":"YulExpressionStatement","src":"16117:69:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16207:9:21","nodeType":"YulIdentifier","src":"16207:9:21"},{"kind":"number","nativeSrc":"16218:2:21","nodeType":"YulLiteral","src":"16218:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16203:3:21","nodeType":"YulIdentifier","src":"16203:3:21"},"nativeSrc":"16203:18:21","nodeType":"YulFunctionCall","src":"16203:18:21"},{"arguments":[{"name":"tail","nativeSrc":"16227:4:21","nodeType":"YulIdentifier","src":"16227:4:21"},{"name":"headStart","nativeSrc":"16233:9:21","nodeType":"YulIdentifier","src":"16233:9:21"}],"functionName":{"name":"sub","nativeSrc":"16223:3:21","nodeType":"YulIdentifier","src":"16223:3:21"},"nativeSrc":"16223:20:21","nodeType":"YulFunctionCall","src":"16223:20:21"}],"functionName":{"name":"mstore","nativeSrc":"16196:6:21","nodeType":"YulIdentifier","src":"16196:6:21"},"nativeSrc":"16196:48:21","nodeType":"YulFunctionCall","src":"16196:48:21"},"nativeSrc":"16196:48:21","nodeType":"YulExpressionStatement","src":"16196:48:21"},{"nativeSrc":"16253:86:21","nodeType":"YulAssignment","src":"16253:86:21","value":{"arguments":[{"name":"value1","nativeSrc":"16325:6:21","nodeType":"YulIdentifier","src":"16325:6:21"},{"name":"tail","nativeSrc":"16334:4:21","nodeType":"YulIdentifier","src":"16334:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"16261:63:21","nodeType":"YulIdentifier","src":"16261:63:21"},"nativeSrc":"16261:78:21","nodeType":"YulFunctionCall","src":"16261:78:21"},"variableNames":[{"name":"tail","nativeSrc":"16253:4:21","nodeType":"YulIdentifier","src":"16253:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16360:9:21","nodeType":"YulIdentifier","src":"16360:9:21"},{"kind":"number","nativeSrc":"16371:2:21","nodeType":"YulLiteral","src":"16371:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16356:3:21","nodeType":"YulIdentifier","src":"16356:3:21"},"nativeSrc":"16356:18:21","nodeType":"YulFunctionCall","src":"16356:18:21"},{"arguments":[{"name":"tail","nativeSrc":"16380:4:21","nodeType":"YulIdentifier","src":"16380:4:21"},{"name":"headStart","nativeSrc":"16386:9:21","nodeType":"YulIdentifier","src":"16386:9:21"}],"functionName":{"name":"sub","nativeSrc":"16376:3:21","nodeType":"YulIdentifier","src":"16376:3:21"},"nativeSrc":"16376:20:21","nodeType":"YulFunctionCall","src":"16376:20:21"}],"functionName":{"name":"mstore","nativeSrc":"16349:6:21","nodeType":"YulIdentifier","src":"16349:6:21"},"nativeSrc":"16349:48:21","nodeType":"YulFunctionCall","src":"16349:48:21"},"nativeSrc":"16349:48:21","nodeType":"YulExpressionStatement","src":"16349:48:21"},{"nativeSrc":"16406:86:21","nodeType":"YulAssignment","src":"16406:86:21","value":{"arguments":[{"name":"value2","nativeSrc":"16478:6:21","nodeType":"YulIdentifier","src":"16478:6:21"},{"name":"tail","nativeSrc":"16487:4:21","nodeType":"YulIdentifier","src":"16487:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"16414:63:21","nodeType":"YulIdentifier","src":"16414:63:21"},"nativeSrc":"16414:78:21","nodeType":"YulFunctionCall","src":"16414:78:21"},"variableNames":[{"name":"tail","nativeSrc":"16406:4:21","nodeType":"YulIdentifier","src":"16406:4:21"}]},{"expression":{"arguments":[{"name":"value3","nativeSrc":"16546:6:21","nodeType":"YulIdentifier","src":"16546:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"16559:9:21","nodeType":"YulIdentifier","src":"16559:9:21"},{"kind":"number","nativeSrc":"16570:2:21","nodeType":"YulLiteral","src":"16570:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16555:3:21","nodeType":"YulIdentifier","src":"16555:3:21"},"nativeSrc":"16555:18:21","nodeType":"YulFunctionCall","src":"16555:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"16502:43:21","nodeType":"YulIdentifier","src":"16502:43:21"},"nativeSrc":"16502:72:21","nodeType":"YulFunctionCall","src":"16502:72:21"},"nativeSrc":"16502:72:21","nodeType":"YulExpressionStatement","src":"16502:72:21"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"16628:6:21","nodeType":"YulIdentifier","src":"16628:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"16641:9:21","nodeType":"YulIdentifier","src":"16641:9:21"},{"kind":"number","nativeSrc":"16652:3:21","nodeType":"YulLiteral","src":"16652:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16637:3:21","nodeType":"YulIdentifier","src":"16637:3:21"},"nativeSrc":"16637:19:21","nodeType":"YulFunctionCall","src":"16637:19:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"16584:43:21","nodeType":"YulIdentifier","src":"16584:43:21"},"nativeSrc":"16584:73:21","nodeType":"YulFunctionCall","src":"16584:73:21"},"nativeSrc":"16584:73:21","nodeType":"YulExpressionStatement","src":"16584:73:21"},{"expression":{"arguments":[{"name":"value5","nativeSrc":"16711:6:21","nodeType":"YulIdentifier","src":"16711:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"16724:9:21","nodeType":"YulIdentifier","src":"16724:9:21"},{"kind":"number","nativeSrc":"16735:3:21","nodeType":"YulLiteral","src":"16735:3:21","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16720:3:21","nodeType":"YulIdentifier","src":"16720:3:21"},"nativeSrc":"16720:19:21","nodeType":"YulFunctionCall","src":"16720:19:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"16667:43:21","nodeType":"YulIdentifier","src":"16667:43:21"},"nativeSrc":"16667:73:21","nodeType":"YulFunctionCall","src":"16667:73:21"},"nativeSrc":"16667:73:21","nodeType":"YulExpressionStatement","src":"16667:73:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16761:9:21","nodeType":"YulIdentifier","src":"16761:9:21"},{"kind":"number","nativeSrc":"16772:3:21","nodeType":"YulLiteral","src":"16772:3:21","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"16757:3:21","nodeType":"YulIdentifier","src":"16757:3:21"},"nativeSrc":"16757:19:21","nodeType":"YulFunctionCall","src":"16757:19:21"},{"arguments":[{"name":"tail","nativeSrc":"16782:4:21","nodeType":"YulIdentifier","src":"16782:4:21"},{"name":"headStart","nativeSrc":"16788:9:21","nodeType":"YulIdentifier","src":"16788:9:21"}],"functionName":{"name":"sub","nativeSrc":"16778:3:21","nodeType":"YulIdentifier","src":"16778:3:21"},"nativeSrc":"16778:20:21","nodeType":"YulFunctionCall","src":"16778:20:21"}],"functionName":{"name":"mstore","nativeSrc":"16750:6:21","nodeType":"YulIdentifier","src":"16750:6:21"},"nativeSrc":"16750:49:21","nodeType":"YulFunctionCall","src":"16750:49:21"},"nativeSrc":"16750:49:21","nodeType":"YulExpressionStatement","src":"16750:49:21"},{"nativeSrc":"16808:116:21","nodeType":"YulAssignment","src":"16808:116:21","value":{"arguments":[{"name":"value6","nativeSrc":"16910:6:21","nodeType":"YulIdentifier","src":"16910:6:21"},{"name":"tail","nativeSrc":"16919:4:21","nodeType":"YulIdentifier","src":"16919:4:21"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nativeSrc":"16816:93:21","nodeType":"YulIdentifier","src":"16816:93:21"},"nativeSrc":"16816:108:21","nodeType":"YulFunctionCall","src":"16816:108:21"},"variableNames":[{"name":"tail","nativeSrc":"16808:4:21","nodeType":"YulIdentifier","src":"16808:4:21"}]}]},"name":"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"15716:1215:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15994:9:21","nodeType":"YulTypedName","src":"15994:9:21","type":""},{"name":"value6","nativeSrc":"16006:6:21","nodeType":"YulTypedName","src":"16006:6:21","type":""},{"name":"value5","nativeSrc":"16014:6:21","nodeType":"YulTypedName","src":"16014:6:21","type":""},{"name":"value4","nativeSrc":"16022:6:21","nodeType":"YulTypedName","src":"16022:6:21","type":""},{"name":"value3","nativeSrc":"16030:6:21","nodeType":"YulTypedName","src":"16030:6:21","type":""},{"name":"value2","nativeSrc":"16038:6:21","nodeType":"YulTypedName","src":"16038:6:21","type":""},{"name":"value1","nativeSrc":"16046:6:21","nodeType":"YulTypedName","src":"16046:6:21","type":""},{"name":"value0","nativeSrc":"16054:6:21","nodeType":"YulTypedName","src":"16054:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16065:4:21","nodeType":"YulTypedName","src":"16065:4:21","type":""}],"src":"15716:1215:21"},{"body":{"nativeSrc":"17035:124:21","nodeType":"YulBlock","src":"17035:124:21","statements":[{"nativeSrc":"17045:26:21","nodeType":"YulAssignment","src":"17045:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"17057:9:21","nodeType":"YulIdentifier","src":"17057:9:21"},{"kind":"number","nativeSrc":"17068:2:21","nodeType":"YulLiteral","src":"17068:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17053:3:21","nodeType":"YulIdentifier","src":"17053:3:21"},"nativeSrc":"17053:18:21","nodeType":"YulFunctionCall","src":"17053:18:21"},"variableNames":[{"name":"tail","nativeSrc":"17045:4:21","nodeType":"YulIdentifier","src":"17045:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"17125:6:21","nodeType":"YulIdentifier","src":"17125:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"17138:9:21","nodeType":"YulIdentifier","src":"17138:9:21"},{"kind":"number","nativeSrc":"17149:1:21","nodeType":"YulLiteral","src":"17149:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17134:3:21","nodeType":"YulIdentifier","src":"17134:3:21"},"nativeSrc":"17134:17:21","nodeType":"YulFunctionCall","src":"17134:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"17081:43:21","nodeType":"YulIdentifier","src":"17081:43:21"},"nativeSrc":"17081:71:21","nodeType":"YulFunctionCall","src":"17081:71:21"},"nativeSrc":"17081:71:21","nodeType":"YulExpressionStatement","src":"17081:71:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"16937:222:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17007:9:21","nodeType":"YulTypedName","src":"17007:9:21","type":""},{"name":"value0","nativeSrc":"17019:6:21","nodeType":"YulTypedName","src":"17019:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17030:4:21","nodeType":"YulTypedName","src":"17030:4:21","type":""}],"src":"16937:222:21"},{"body":{"nativeSrc":"17272:478:21","nodeType":"YulBlock","src":"17272:478:21","statements":[{"body":{"nativeSrc":"17321:83:21","nodeType":"YulBlock","src":"17321:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"17323:77:21","nodeType":"YulIdentifier","src":"17323:77:21"},"nativeSrc":"17323:79:21","nodeType":"YulFunctionCall","src":"17323:79:21"},"nativeSrc":"17323:79:21","nodeType":"YulExpressionStatement","src":"17323:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"17300:6:21","nodeType":"YulIdentifier","src":"17300:6:21"},{"kind":"number","nativeSrc":"17308:4:21","nodeType":"YulLiteral","src":"17308:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"17296:3:21","nodeType":"YulIdentifier","src":"17296:3:21"},"nativeSrc":"17296:17:21","nodeType":"YulFunctionCall","src":"17296:17:21"},{"name":"end","nativeSrc":"17315:3:21","nodeType":"YulIdentifier","src":"17315:3:21"}],"functionName":{"name":"slt","nativeSrc":"17292:3:21","nodeType":"YulIdentifier","src":"17292:3:21"},"nativeSrc":"17292:27:21","nodeType":"YulFunctionCall","src":"17292:27:21"}],"functionName":{"name":"iszero","nativeSrc":"17285:6:21","nodeType":"YulIdentifier","src":"17285:6:21"},"nativeSrc":"17285:35:21","nodeType":"YulFunctionCall","src":"17285:35:21"},"nativeSrc":"17282:122:21","nodeType":"YulIf","src":"17282:122:21"},{"nativeSrc":"17413:30:21","nodeType":"YulAssignment","src":"17413:30:21","value":{"arguments":[{"name":"offset","nativeSrc":"17436:6:21","nodeType":"YulIdentifier","src":"17436:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"17423:12:21","nodeType":"YulIdentifier","src":"17423:12:21"},"nativeSrc":"17423:20:21","nodeType":"YulFunctionCall","src":"17423:20:21"},"variableNames":[{"name":"length","nativeSrc":"17413:6:21","nodeType":"YulIdentifier","src":"17413:6:21"}]},{"body":{"nativeSrc":"17486:83:21","nodeType":"YulBlock","src":"17486:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"17488:77:21","nodeType":"YulIdentifier","src":"17488:77:21"},"nativeSrc":"17488:79:21","nodeType":"YulFunctionCall","src":"17488:79:21"},"nativeSrc":"17488:79:21","nodeType":"YulExpressionStatement","src":"17488:79:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"17458:6:21","nodeType":"YulIdentifier","src":"17458:6:21"},{"kind":"number","nativeSrc":"17466:18:21","nodeType":"YulLiteral","src":"17466:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"17455:2:21","nodeType":"YulIdentifier","src":"17455:2:21"},"nativeSrc":"17455:30:21","nodeType":"YulFunctionCall","src":"17455:30:21"},"nativeSrc":"17452:117:21","nodeType":"YulIf","src":"17452:117:21"},{"nativeSrc":"17578:29:21","nodeType":"YulAssignment","src":"17578:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"17594:6:21","nodeType":"YulIdentifier","src":"17594:6:21"},{"kind":"number","nativeSrc":"17602:4:21","nodeType":"YulLiteral","src":"17602:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"17590:3:21","nodeType":"YulIdentifier","src":"17590:3:21"},"nativeSrc":"17590:17:21","nodeType":"YulFunctionCall","src":"17590:17:21"},"variableNames":[{"name":"arrayPos","nativeSrc":"17578:8:21","nodeType":"YulIdentifier","src":"17578:8:21"}]},{"body":{"nativeSrc":"17661:83:21","nodeType":"YulBlock","src":"17661:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"17663:77:21","nodeType":"YulIdentifier","src":"17663:77:21"},"nativeSrc":"17663:79:21","nodeType":"YulFunctionCall","src":"17663:79:21"},"nativeSrc":"17663:79:21","nodeType":"YulExpressionStatement","src":"17663:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nativeSrc":"17626:8:21","nodeType":"YulIdentifier","src":"17626:8:21"},{"arguments":[{"name":"length","nativeSrc":"17640:6:21","nodeType":"YulIdentifier","src":"17640:6:21"},{"kind":"number","nativeSrc":"17648:4:21","nodeType":"YulLiteral","src":"17648:4:21","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"17636:3:21","nodeType":"YulIdentifier","src":"17636:3:21"},"nativeSrc":"17636:17:21","nodeType":"YulFunctionCall","src":"17636:17:21"}],"functionName":{"name":"add","nativeSrc":"17622:3:21","nodeType":"YulIdentifier","src":"17622:3:21"},"nativeSrc":"17622:32:21","nodeType":"YulFunctionCall","src":"17622:32:21"},{"name":"end","nativeSrc":"17656:3:21","nodeType":"YulIdentifier","src":"17656:3:21"}],"functionName":{"name":"gt","nativeSrc":"17619:2:21","nodeType":"YulIdentifier","src":"17619:2:21"},"nativeSrc":"17619:41:21","nodeType":"YulFunctionCall","src":"17619:41:21"},"nativeSrc":"17616:128:21","nodeType":"YulIf","src":"17616:128:21"}]},"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"17182:568:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"17239:6:21","nodeType":"YulTypedName","src":"17239:6:21","type":""},{"name":"end","nativeSrc":"17247:3:21","nodeType":"YulTypedName","src":"17247:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"17255:8:21","nodeType":"YulTypedName","src":"17255:8:21","type":""},{"name":"length","nativeSrc":"17265:6:21","nodeType":"YulTypedName","src":"17265:6:21","type":""}],"src":"17182:568:21"},{"body":{"nativeSrc":"17979:1346:21","nodeType":"YulBlock","src":"17979:1346:21","statements":[{"body":{"nativeSrc":"18026:83:21","nodeType":"YulBlock","src":"18026:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"18028:77:21","nodeType":"YulIdentifier","src":"18028:77:21"},"nativeSrc":"18028:79:21","nodeType":"YulFunctionCall","src":"18028:79:21"},"nativeSrc":"18028:79:21","nodeType":"YulExpressionStatement","src":"18028:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"18000:7:21","nodeType":"YulIdentifier","src":"18000:7:21"},{"name":"headStart","nativeSrc":"18009:9:21","nodeType":"YulIdentifier","src":"18009:9:21"}],"functionName":{"name":"sub","nativeSrc":"17996:3:21","nodeType":"YulIdentifier","src":"17996:3:21"},"nativeSrc":"17996:23:21","nodeType":"YulFunctionCall","src":"17996:23:21"},{"kind":"number","nativeSrc":"18021:3:21","nodeType":"YulLiteral","src":"18021:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"17992:3:21","nodeType":"YulIdentifier","src":"17992:3:21"},"nativeSrc":"17992:33:21","nodeType":"YulFunctionCall","src":"17992:33:21"},"nativeSrc":"17989:120:21","nodeType":"YulIf","src":"17989:120:21"},{"nativeSrc":"18119:117:21","nodeType":"YulBlock","src":"18119:117:21","statements":[{"nativeSrc":"18134:15:21","nodeType":"YulVariableDeclaration","src":"18134:15:21","value":{"kind":"number","nativeSrc":"18148:1:21","nodeType":"YulLiteral","src":"18148:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"18138:6:21","nodeType":"YulTypedName","src":"18138:6:21","type":""}]},{"nativeSrc":"18163:63:21","nodeType":"YulAssignment","src":"18163:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18198:9:21","nodeType":"YulIdentifier","src":"18198:9:21"},{"name":"offset","nativeSrc":"18209:6:21","nodeType":"YulIdentifier","src":"18209:6:21"}],"functionName":{"name":"add","nativeSrc":"18194:3:21","nodeType":"YulIdentifier","src":"18194:3:21"},"nativeSrc":"18194:22:21","nodeType":"YulFunctionCall","src":"18194:22:21"},{"name":"dataEnd","nativeSrc":"18218:7:21","nodeType":"YulIdentifier","src":"18218:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"18173:20:21","nodeType":"YulIdentifier","src":"18173:20:21"},"nativeSrc":"18173:53:21","nodeType":"YulFunctionCall","src":"18173:53:21"},"variableNames":[{"name":"value0","nativeSrc":"18163:6:21","nodeType":"YulIdentifier","src":"18163:6:21"}]}]},{"nativeSrc":"18246:118:21","nodeType":"YulBlock","src":"18246:118:21","statements":[{"nativeSrc":"18261:16:21","nodeType":"YulVariableDeclaration","src":"18261:16:21","value":{"kind":"number","nativeSrc":"18275:2:21","nodeType":"YulLiteral","src":"18275:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"18265:6:21","nodeType":"YulTypedName","src":"18265:6:21","type":""}]},{"nativeSrc":"18291:63:21","nodeType":"YulAssignment","src":"18291:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18326:9:21","nodeType":"YulIdentifier","src":"18326:9:21"},{"name":"offset","nativeSrc":"18337:6:21","nodeType":"YulIdentifier","src":"18337:6:21"}],"functionName":{"name":"add","nativeSrc":"18322:3:21","nodeType":"YulIdentifier","src":"18322:3:21"},"nativeSrc":"18322:22:21","nodeType":"YulFunctionCall","src":"18322:22:21"},{"name":"dataEnd","nativeSrc":"18346:7:21","nodeType":"YulIdentifier","src":"18346:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"18301:20:21","nodeType":"YulIdentifier","src":"18301:20:21"},"nativeSrc":"18301:53:21","nodeType":"YulFunctionCall","src":"18301:53:21"},"variableNames":[{"name":"value1","nativeSrc":"18291:6:21","nodeType":"YulIdentifier","src":"18291:6:21"}]}]},{"nativeSrc":"18374:313:21","nodeType":"YulBlock","src":"18374:313:21","statements":[{"nativeSrc":"18389:46:21","nodeType":"YulVariableDeclaration","src":"18389:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18420:9:21","nodeType":"YulIdentifier","src":"18420:9:21"},{"kind":"number","nativeSrc":"18431:2:21","nodeType":"YulLiteral","src":"18431:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18416:3:21","nodeType":"YulIdentifier","src":"18416:3:21"},"nativeSrc":"18416:18:21","nodeType":"YulFunctionCall","src":"18416:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"18403:12:21","nodeType":"YulIdentifier","src":"18403:12:21"},"nativeSrc":"18403:32:21","nodeType":"YulFunctionCall","src":"18403:32:21"},"variables":[{"name":"offset","nativeSrc":"18393:6:21","nodeType":"YulTypedName","src":"18393:6:21","type":""}]},{"body":{"nativeSrc":"18482:83:21","nodeType":"YulBlock","src":"18482:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"18484:77:21","nodeType":"YulIdentifier","src":"18484:77:21"},"nativeSrc":"18484:79:21","nodeType":"YulFunctionCall","src":"18484:79:21"},"nativeSrc":"18484:79:21","nodeType":"YulExpressionStatement","src":"18484:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"18454:6:21","nodeType":"YulIdentifier","src":"18454:6:21"},{"kind":"number","nativeSrc":"18462:18:21","nodeType":"YulLiteral","src":"18462:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"18451:2:21","nodeType":"YulIdentifier","src":"18451:2:21"},"nativeSrc":"18451:30:21","nodeType":"YulFunctionCall","src":"18451:30:21"},"nativeSrc":"18448:117:21","nodeType":"YulIf","src":"18448:117:21"},{"nativeSrc":"18579:98:21","nodeType":"YulAssignment","src":"18579:98:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18649:9:21","nodeType":"YulIdentifier","src":"18649:9:21"},{"name":"offset","nativeSrc":"18660:6:21","nodeType":"YulIdentifier","src":"18660:6:21"}],"functionName":{"name":"add","nativeSrc":"18645:3:21","nodeType":"YulIdentifier","src":"18645:3:21"},"nativeSrc":"18645:22:21","nodeType":"YulFunctionCall","src":"18645:22:21"},{"name":"dataEnd","nativeSrc":"18669:7:21","nodeType":"YulIdentifier","src":"18669:7:21"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"18597:47:21","nodeType":"YulIdentifier","src":"18597:47:21"},"nativeSrc":"18597:80:21","nodeType":"YulFunctionCall","src":"18597:80:21"},"variableNames":[{"name":"value2","nativeSrc":"18579:6:21","nodeType":"YulIdentifier","src":"18579:6:21"},{"name":"value3","nativeSrc":"18587:6:21","nodeType":"YulIdentifier","src":"18587:6:21"}]}]},{"nativeSrc":"18697:313:21","nodeType":"YulBlock","src":"18697:313:21","statements":[{"nativeSrc":"18712:46:21","nodeType":"YulVariableDeclaration","src":"18712:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18743:9:21","nodeType":"YulIdentifier","src":"18743:9:21"},{"kind":"number","nativeSrc":"18754:2:21","nodeType":"YulLiteral","src":"18754:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18739:3:21","nodeType":"YulIdentifier","src":"18739:3:21"},"nativeSrc":"18739:18:21","nodeType":"YulFunctionCall","src":"18739:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"18726:12:21","nodeType":"YulIdentifier","src":"18726:12:21"},"nativeSrc":"18726:32:21","nodeType":"YulFunctionCall","src":"18726:32:21"},"variables":[{"name":"offset","nativeSrc":"18716:6:21","nodeType":"YulTypedName","src":"18716:6:21","type":""}]},{"body":{"nativeSrc":"18805:83:21","nodeType":"YulBlock","src":"18805:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"18807:77:21","nodeType":"YulIdentifier","src":"18807:77:21"},"nativeSrc":"18807:79:21","nodeType":"YulFunctionCall","src":"18807:79:21"},"nativeSrc":"18807:79:21","nodeType":"YulExpressionStatement","src":"18807:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"18777:6:21","nodeType":"YulIdentifier","src":"18777:6:21"},{"kind":"number","nativeSrc":"18785:18:21","nodeType":"YulLiteral","src":"18785:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"18774:2:21","nodeType":"YulIdentifier","src":"18774:2:21"},"nativeSrc":"18774:30:21","nodeType":"YulFunctionCall","src":"18774:30:21"},"nativeSrc":"18771:117:21","nodeType":"YulIf","src":"18771:117:21"},{"nativeSrc":"18902:98:21","nodeType":"YulAssignment","src":"18902:98:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18972:9:21","nodeType":"YulIdentifier","src":"18972:9:21"},{"name":"offset","nativeSrc":"18983:6:21","nodeType":"YulIdentifier","src":"18983:6:21"}],"functionName":{"name":"add","nativeSrc":"18968:3:21","nodeType":"YulIdentifier","src":"18968:3:21"},"nativeSrc":"18968:22:21","nodeType":"YulFunctionCall","src":"18968:22:21"},{"name":"dataEnd","nativeSrc":"18992:7:21","nodeType":"YulIdentifier","src":"18992:7:21"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"18920:47:21","nodeType":"YulIdentifier","src":"18920:47:21"},"nativeSrc":"18920:80:21","nodeType":"YulFunctionCall","src":"18920:80:21"},"variableNames":[{"name":"value4","nativeSrc":"18902:6:21","nodeType":"YulIdentifier","src":"18902:6:21"},{"name":"value5","nativeSrc":"18910:6:21","nodeType":"YulIdentifier","src":"18910:6:21"}]}]},{"nativeSrc":"19020:298:21","nodeType":"YulBlock","src":"19020:298:21","statements":[{"nativeSrc":"19035:47:21","nodeType":"YulVariableDeclaration","src":"19035:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19066:9:21","nodeType":"YulIdentifier","src":"19066:9:21"},{"kind":"number","nativeSrc":"19077:3:21","nodeType":"YulLiteral","src":"19077:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19062:3:21","nodeType":"YulIdentifier","src":"19062:3:21"},"nativeSrc":"19062:19:21","nodeType":"YulFunctionCall","src":"19062:19:21"}],"functionName":{"name":"calldataload","nativeSrc":"19049:12:21","nodeType":"YulIdentifier","src":"19049:12:21"},"nativeSrc":"19049:33:21","nodeType":"YulFunctionCall","src":"19049:33:21"},"variables":[{"name":"offset","nativeSrc":"19039:6:21","nodeType":"YulTypedName","src":"19039:6:21","type":""}]},{"body":{"nativeSrc":"19129:83:21","nodeType":"YulBlock","src":"19129:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"19131:77:21","nodeType":"YulIdentifier","src":"19131:77:21"},"nativeSrc":"19131:79:21","nodeType":"YulFunctionCall","src":"19131:79:21"},"nativeSrc":"19131:79:21","nodeType":"YulExpressionStatement","src":"19131:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"19101:6:21","nodeType":"YulIdentifier","src":"19101:6:21"},{"kind":"number","nativeSrc":"19109:18:21","nodeType":"YulLiteral","src":"19109:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"19098:2:21","nodeType":"YulIdentifier","src":"19098:2:21"},"nativeSrc":"19098:30:21","nodeType":"YulFunctionCall","src":"19098:30:21"},"nativeSrc":"19095:117:21","nodeType":"YulIf","src":"19095:117:21"},{"nativeSrc":"19226:82:21","nodeType":"YulAssignment","src":"19226:82:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19280:9:21","nodeType":"YulIdentifier","src":"19280:9:21"},{"name":"offset","nativeSrc":"19291:6:21","nodeType":"YulIdentifier","src":"19291:6:21"}],"functionName":{"name":"add","nativeSrc":"19276:3:21","nodeType":"YulIdentifier","src":"19276:3:21"},"nativeSrc":"19276:22:21","nodeType":"YulFunctionCall","src":"19276:22:21"},{"name":"dataEnd","nativeSrc":"19300:7:21","nodeType":"YulIdentifier","src":"19300:7:21"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"19244:31:21","nodeType":"YulIdentifier","src":"19244:31:21"},"nativeSrc":"19244:64:21","nodeType":"YulFunctionCall","src":"19244:64:21"},"variableNames":[{"name":"value6","nativeSrc":"19226:6:21","nodeType":"YulIdentifier","src":"19226:6:21"},{"name":"value7","nativeSrc":"19234:6:21","nodeType":"YulIdentifier","src":"19234:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"17756:1569:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17893:9:21","nodeType":"YulTypedName","src":"17893:9:21","type":""},{"name":"dataEnd","nativeSrc":"17904:7:21","nodeType":"YulTypedName","src":"17904:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17916:6:21","nodeType":"YulTypedName","src":"17916:6:21","type":""},{"name":"value1","nativeSrc":"17924:6:21","nodeType":"YulTypedName","src":"17924:6:21","type":""},{"name":"value2","nativeSrc":"17932:6:21","nodeType":"YulTypedName","src":"17932:6:21","type":""},{"name":"value3","nativeSrc":"17940:6:21","nodeType":"YulTypedName","src":"17940:6:21","type":""},{"name":"value4","nativeSrc":"17948:6:21","nodeType":"YulTypedName","src":"17948:6:21","type":""},{"name":"value5","nativeSrc":"17956:6:21","nodeType":"YulTypedName","src":"17956:6:21","type":""},{"name":"value6","nativeSrc":"17964:6:21","nodeType":"YulTypedName","src":"17964:6:21","type":""},{"name":"value7","nativeSrc":"17972:6:21","nodeType":"YulTypedName","src":"17972:6:21","type":""}],"src":"17756:1569:21"},{"body":{"nativeSrc":"19407:433:21","nodeType":"YulBlock","src":"19407:433:21","statements":[{"body":{"nativeSrc":"19453:83:21","nodeType":"YulBlock","src":"19453:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"19455:77:21","nodeType":"YulIdentifier","src":"19455:77:21"},"nativeSrc":"19455:79:21","nodeType":"YulFunctionCall","src":"19455:79:21"},"nativeSrc":"19455:79:21","nodeType":"YulExpressionStatement","src":"19455:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"19428:7:21","nodeType":"YulIdentifier","src":"19428:7:21"},{"name":"headStart","nativeSrc":"19437:9:21","nodeType":"YulIdentifier","src":"19437:9:21"}],"functionName":{"name":"sub","nativeSrc":"19424:3:21","nodeType":"YulIdentifier","src":"19424:3:21"},"nativeSrc":"19424:23:21","nodeType":"YulFunctionCall","src":"19424:23:21"},{"kind":"number","nativeSrc":"19449:2:21","nodeType":"YulLiteral","src":"19449:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"19420:3:21","nodeType":"YulIdentifier","src":"19420:3:21"},"nativeSrc":"19420:32:21","nodeType":"YulFunctionCall","src":"19420:32:21"},"nativeSrc":"19417:119:21","nodeType":"YulIf","src":"19417:119:21"},{"nativeSrc":"19546:287:21","nodeType":"YulBlock","src":"19546:287:21","statements":[{"nativeSrc":"19561:45:21","nodeType":"YulVariableDeclaration","src":"19561:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19592:9:21","nodeType":"YulIdentifier","src":"19592:9:21"},{"kind":"number","nativeSrc":"19603:1:21","nodeType":"YulLiteral","src":"19603:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19588:3:21","nodeType":"YulIdentifier","src":"19588:3:21"},"nativeSrc":"19588:17:21","nodeType":"YulFunctionCall","src":"19588:17:21"}],"functionName":{"name":"calldataload","nativeSrc":"19575:12:21","nodeType":"YulIdentifier","src":"19575:12:21"},"nativeSrc":"19575:31:21","nodeType":"YulFunctionCall","src":"19575:31:21"},"variables":[{"name":"offset","nativeSrc":"19565:6:21","nodeType":"YulTypedName","src":"19565:6:21","type":""}]},{"body":{"nativeSrc":"19653:83:21","nodeType":"YulBlock","src":"19653:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"19655:77:21","nodeType":"YulIdentifier","src":"19655:77:21"},"nativeSrc":"19655:79:21","nodeType":"YulFunctionCall","src":"19655:79:21"},"nativeSrc":"19655:79:21","nodeType":"YulExpressionStatement","src":"19655:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"19625:6:21","nodeType":"YulIdentifier","src":"19625:6:21"},{"kind":"number","nativeSrc":"19633:18:21","nodeType":"YulLiteral","src":"19633:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"19622:2:21","nodeType":"YulIdentifier","src":"19622:2:21"},"nativeSrc":"19622:30:21","nodeType":"YulFunctionCall","src":"19622:30:21"},"nativeSrc":"19619:117:21","nodeType":"YulIf","src":"19619:117:21"},{"nativeSrc":"19750:73:21","nodeType":"YulAssignment","src":"19750:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19795:9:21","nodeType":"YulIdentifier","src":"19795:9:21"},{"name":"offset","nativeSrc":"19806:6:21","nodeType":"YulIdentifier","src":"19806:6:21"}],"functionName":{"name":"add","nativeSrc":"19791:3:21","nodeType":"YulIdentifier","src":"19791:3:21"},"nativeSrc":"19791:22:21","nodeType":"YulFunctionCall","src":"19791:22:21"},{"name":"dataEnd","nativeSrc":"19815:7:21","nodeType":"YulIdentifier","src":"19815:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"19760:30:21","nodeType":"YulIdentifier","src":"19760:30:21"},"nativeSrc":"19760:63:21","nodeType":"YulFunctionCall","src":"19760:63:21"},"variableNames":[{"name":"value0","nativeSrc":"19750:6:21","nodeType":"YulIdentifier","src":"19750:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nativeSrc":"19331:509:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19377:9:21","nodeType":"YulTypedName","src":"19377:9:21","type":""},{"name":"dataEnd","nativeSrc":"19388:7:21","nodeType":"YulTypedName","src":"19388:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"19400:6:21","nodeType":"YulTypedName","src":"19400:6:21","type":""}],"src":"19331:509:21"},{"body":{"nativeSrc":"19999:956:21","nodeType":"YulBlock","src":"19999:956:21","statements":[{"body":{"nativeSrc":"20046:83:21","nodeType":"YulBlock","src":"20046:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"20048:77:21","nodeType":"YulIdentifier","src":"20048:77:21"},"nativeSrc":"20048:79:21","nodeType":"YulFunctionCall","src":"20048:79:21"},"nativeSrc":"20048:79:21","nodeType":"YulExpressionStatement","src":"20048:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"20020:7:21","nodeType":"YulIdentifier","src":"20020:7:21"},{"name":"headStart","nativeSrc":"20029:9:21","nodeType":"YulIdentifier","src":"20029:9:21"}],"functionName":{"name":"sub","nativeSrc":"20016:3:21","nodeType":"YulIdentifier","src":"20016:3:21"},"nativeSrc":"20016:23:21","nodeType":"YulFunctionCall","src":"20016:23:21"},{"kind":"number","nativeSrc":"20041:3:21","nodeType":"YulLiteral","src":"20041:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"20012:3:21","nodeType":"YulIdentifier","src":"20012:3:21"},"nativeSrc":"20012:33:21","nodeType":"YulFunctionCall","src":"20012:33:21"},"nativeSrc":"20009:120:21","nodeType":"YulIf","src":"20009:120:21"},{"nativeSrc":"20139:117:21","nodeType":"YulBlock","src":"20139:117:21","statements":[{"nativeSrc":"20154:15:21","nodeType":"YulVariableDeclaration","src":"20154:15:21","value":{"kind":"number","nativeSrc":"20168:1:21","nodeType":"YulLiteral","src":"20168:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"20158:6:21","nodeType":"YulTypedName","src":"20158:6:21","type":""}]},{"nativeSrc":"20183:63:21","nodeType":"YulAssignment","src":"20183:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20218:9:21","nodeType":"YulIdentifier","src":"20218:9:21"},{"name":"offset","nativeSrc":"20229:6:21","nodeType":"YulIdentifier","src":"20229:6:21"}],"functionName":{"name":"add","nativeSrc":"20214:3:21","nodeType":"YulIdentifier","src":"20214:3:21"},"nativeSrc":"20214:22:21","nodeType":"YulFunctionCall","src":"20214:22:21"},{"name":"dataEnd","nativeSrc":"20238:7:21","nodeType":"YulIdentifier","src":"20238:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"20193:20:21","nodeType":"YulIdentifier","src":"20193:20:21"},"nativeSrc":"20193:53:21","nodeType":"YulFunctionCall","src":"20193:53:21"},"variableNames":[{"name":"value0","nativeSrc":"20183:6:21","nodeType":"YulIdentifier","src":"20183:6:21"}]}]},{"nativeSrc":"20266:118:21","nodeType":"YulBlock","src":"20266:118:21","statements":[{"nativeSrc":"20281:16:21","nodeType":"YulVariableDeclaration","src":"20281:16:21","value":{"kind":"number","nativeSrc":"20295:2:21","nodeType":"YulLiteral","src":"20295:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"20285:6:21","nodeType":"YulTypedName","src":"20285:6:21","type":""}]},{"nativeSrc":"20311:63:21","nodeType":"YulAssignment","src":"20311:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20346:9:21","nodeType":"YulIdentifier","src":"20346:9:21"},{"name":"offset","nativeSrc":"20357:6:21","nodeType":"YulIdentifier","src":"20357:6:21"}],"functionName":{"name":"add","nativeSrc":"20342:3:21","nodeType":"YulIdentifier","src":"20342:3:21"},"nativeSrc":"20342:22:21","nodeType":"YulFunctionCall","src":"20342:22:21"},{"name":"dataEnd","nativeSrc":"20366:7:21","nodeType":"YulIdentifier","src":"20366:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"20321:20:21","nodeType":"YulIdentifier","src":"20321:20:21"},"nativeSrc":"20321:53:21","nodeType":"YulFunctionCall","src":"20321:53:21"},"variableNames":[{"name":"value1","nativeSrc":"20311:6:21","nodeType":"YulIdentifier","src":"20311:6:21"}]}]},{"nativeSrc":"20394:118:21","nodeType":"YulBlock","src":"20394:118:21","statements":[{"nativeSrc":"20409:16:21","nodeType":"YulVariableDeclaration","src":"20409:16:21","value":{"kind":"number","nativeSrc":"20423:2:21","nodeType":"YulLiteral","src":"20423:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"20413:6:21","nodeType":"YulTypedName","src":"20413:6:21","type":""}]},{"nativeSrc":"20439:63:21","nodeType":"YulAssignment","src":"20439:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20474:9:21","nodeType":"YulIdentifier","src":"20474:9:21"},{"name":"offset","nativeSrc":"20485:6:21","nodeType":"YulIdentifier","src":"20485:6:21"}],"functionName":{"name":"add","nativeSrc":"20470:3:21","nodeType":"YulIdentifier","src":"20470:3:21"},"nativeSrc":"20470:22:21","nodeType":"YulFunctionCall","src":"20470:22:21"},{"name":"dataEnd","nativeSrc":"20494:7:21","nodeType":"YulIdentifier","src":"20494:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"20449:20:21","nodeType":"YulIdentifier","src":"20449:20:21"},"nativeSrc":"20449:53:21","nodeType":"YulFunctionCall","src":"20449:53:21"},"variableNames":[{"name":"value2","nativeSrc":"20439:6:21","nodeType":"YulIdentifier","src":"20439:6:21"}]}]},{"nativeSrc":"20522:118:21","nodeType":"YulBlock","src":"20522:118:21","statements":[{"nativeSrc":"20537:16:21","nodeType":"YulVariableDeclaration","src":"20537:16:21","value":{"kind":"number","nativeSrc":"20551:2:21","nodeType":"YulLiteral","src":"20551:2:21","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"20541:6:21","nodeType":"YulTypedName","src":"20541:6:21","type":""}]},{"nativeSrc":"20567:63:21","nodeType":"YulAssignment","src":"20567:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20602:9:21","nodeType":"YulIdentifier","src":"20602:9:21"},{"name":"offset","nativeSrc":"20613:6:21","nodeType":"YulIdentifier","src":"20613:6:21"}],"functionName":{"name":"add","nativeSrc":"20598:3:21","nodeType":"YulIdentifier","src":"20598:3:21"},"nativeSrc":"20598:22:21","nodeType":"YulFunctionCall","src":"20598:22:21"},{"name":"dataEnd","nativeSrc":"20622:7:21","nodeType":"YulIdentifier","src":"20622:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"20577:20:21","nodeType":"YulIdentifier","src":"20577:20:21"},"nativeSrc":"20577:53:21","nodeType":"YulFunctionCall","src":"20577:53:21"},"variableNames":[{"name":"value3","nativeSrc":"20567:6:21","nodeType":"YulIdentifier","src":"20567:6:21"}]}]},{"nativeSrc":"20650:298:21","nodeType":"YulBlock","src":"20650:298:21","statements":[{"nativeSrc":"20665:47:21","nodeType":"YulVariableDeclaration","src":"20665:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20696:9:21","nodeType":"YulIdentifier","src":"20696:9:21"},{"kind":"number","nativeSrc":"20707:3:21","nodeType":"YulLiteral","src":"20707:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20692:3:21","nodeType":"YulIdentifier","src":"20692:3:21"},"nativeSrc":"20692:19:21","nodeType":"YulFunctionCall","src":"20692:19:21"}],"functionName":{"name":"calldataload","nativeSrc":"20679:12:21","nodeType":"YulIdentifier","src":"20679:12:21"},"nativeSrc":"20679:33:21","nodeType":"YulFunctionCall","src":"20679:33:21"},"variables":[{"name":"offset","nativeSrc":"20669:6:21","nodeType":"YulTypedName","src":"20669:6:21","type":""}]},{"body":{"nativeSrc":"20759:83:21","nodeType":"YulBlock","src":"20759:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"20761:77:21","nodeType":"YulIdentifier","src":"20761:77:21"},"nativeSrc":"20761:79:21","nodeType":"YulFunctionCall","src":"20761:79:21"},"nativeSrc":"20761:79:21","nodeType":"YulExpressionStatement","src":"20761:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"20731:6:21","nodeType":"YulIdentifier","src":"20731:6:21"},{"kind":"number","nativeSrc":"20739:18:21","nodeType":"YulLiteral","src":"20739:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"20728:2:21","nodeType":"YulIdentifier","src":"20728:2:21"},"nativeSrc":"20728:30:21","nodeType":"YulFunctionCall","src":"20728:30:21"},"nativeSrc":"20725:117:21","nodeType":"YulIf","src":"20725:117:21"},{"nativeSrc":"20856:82:21","nodeType":"YulAssignment","src":"20856:82:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20910:9:21","nodeType":"YulIdentifier","src":"20910:9:21"},{"name":"offset","nativeSrc":"20921:6:21","nodeType":"YulIdentifier","src":"20921:6:21"}],"functionName":{"name":"add","nativeSrc":"20906:3:21","nodeType":"YulIdentifier","src":"20906:3:21"},"nativeSrc":"20906:22:21","nodeType":"YulFunctionCall","src":"20906:22:21"},{"name":"dataEnd","nativeSrc":"20930:7:21","nodeType":"YulIdentifier","src":"20930:7:21"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"20874:31:21","nodeType":"YulIdentifier","src":"20874:31:21"},"nativeSrc":"20874:64:21","nodeType":"YulFunctionCall","src":"20874:64:21"},"variableNames":[{"name":"value4","nativeSrc":"20856:6:21","nodeType":"YulIdentifier","src":"20856:6:21"},{"name":"value5","nativeSrc":"20864:6:21","nodeType":"YulIdentifier","src":"20864:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"19846:1109:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19929:9:21","nodeType":"YulTypedName","src":"19929:9:21","type":""},{"name":"dataEnd","nativeSrc":"19940:7:21","nodeType":"YulTypedName","src":"19940:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"19952:6:21","nodeType":"YulTypedName","src":"19952:6:21","type":""},{"name":"value1","nativeSrc":"19960:6:21","nodeType":"YulTypedName","src":"19960:6:21","type":""},{"name":"value2","nativeSrc":"19968:6:21","nodeType":"YulTypedName","src":"19968:6:21","type":""},{"name":"value3","nativeSrc":"19976:6:21","nodeType":"YulTypedName","src":"19976:6:21","type":""},{"name":"value4","nativeSrc":"19984:6:21","nodeType":"YulTypedName","src":"19984:6:21","type":""},{"name":"value5","nativeSrc":"19992:6:21","nodeType":"YulTypedName","src":"19992:6:21","type":""}],"src":"19846:1109:21"},{"body":{"nativeSrc":"21088:818:21","nodeType":"YulBlock","src":"21088:818:21","statements":[{"body":{"nativeSrc":"21135:83:21","nodeType":"YulBlock","src":"21135:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"21137:77:21","nodeType":"YulIdentifier","src":"21137:77:21"},"nativeSrc":"21137:79:21","nodeType":"YulFunctionCall","src":"21137:79:21"},"nativeSrc":"21137:79:21","nodeType":"YulExpressionStatement","src":"21137:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"21109:7:21","nodeType":"YulIdentifier","src":"21109:7:21"},{"name":"headStart","nativeSrc":"21118:9:21","nodeType":"YulIdentifier","src":"21118:9:21"}],"functionName":{"name":"sub","nativeSrc":"21105:3:21","nodeType":"YulIdentifier","src":"21105:3:21"},"nativeSrc":"21105:23:21","nodeType":"YulFunctionCall","src":"21105:23:21"},{"kind":"number","nativeSrc":"21130:3:21","nodeType":"YulLiteral","src":"21130:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"21101:3:21","nodeType":"YulIdentifier","src":"21101:3:21"},"nativeSrc":"21101:33:21","nodeType":"YulFunctionCall","src":"21101:33:21"},"nativeSrc":"21098:120:21","nodeType":"YulIf","src":"21098:120:21"},{"nativeSrc":"21228:117:21","nodeType":"YulBlock","src":"21228:117:21","statements":[{"nativeSrc":"21243:15:21","nodeType":"YulVariableDeclaration","src":"21243:15:21","value":{"kind":"number","nativeSrc":"21257:1:21","nodeType":"YulLiteral","src":"21257:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"21247:6:21","nodeType":"YulTypedName","src":"21247:6:21","type":""}]},{"nativeSrc":"21272:63:21","nodeType":"YulAssignment","src":"21272:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21307:9:21","nodeType":"YulIdentifier","src":"21307:9:21"},{"name":"offset","nativeSrc":"21318:6:21","nodeType":"YulIdentifier","src":"21318:6:21"}],"functionName":{"name":"add","nativeSrc":"21303:3:21","nodeType":"YulIdentifier","src":"21303:3:21"},"nativeSrc":"21303:22:21","nodeType":"YulFunctionCall","src":"21303:22:21"},{"name":"dataEnd","nativeSrc":"21327:7:21","nodeType":"YulIdentifier","src":"21327:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"21282:20:21","nodeType":"YulIdentifier","src":"21282:20:21"},"nativeSrc":"21282:53:21","nodeType":"YulFunctionCall","src":"21282:53:21"},"variableNames":[{"name":"value0","nativeSrc":"21272:6:21","nodeType":"YulIdentifier","src":"21272:6:21"}]}]},{"nativeSrc":"21355:288:21","nodeType":"YulBlock","src":"21355:288:21","statements":[{"nativeSrc":"21370:46:21","nodeType":"YulVariableDeclaration","src":"21370:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21401:9:21","nodeType":"YulIdentifier","src":"21401:9:21"},{"kind":"number","nativeSrc":"21412:2:21","nodeType":"YulLiteral","src":"21412:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21397:3:21","nodeType":"YulIdentifier","src":"21397:3:21"},"nativeSrc":"21397:18:21","nodeType":"YulFunctionCall","src":"21397:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"21384:12:21","nodeType":"YulIdentifier","src":"21384:12:21"},"nativeSrc":"21384:32:21","nodeType":"YulFunctionCall","src":"21384:32:21"},"variables":[{"name":"offset","nativeSrc":"21374:6:21","nodeType":"YulTypedName","src":"21374:6:21","type":""}]},{"body":{"nativeSrc":"21463:83:21","nodeType":"YulBlock","src":"21463:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"21465:77:21","nodeType":"YulIdentifier","src":"21465:77:21"},"nativeSrc":"21465:79:21","nodeType":"YulFunctionCall","src":"21465:79:21"},"nativeSrc":"21465:79:21","nodeType":"YulExpressionStatement","src":"21465:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"21435:6:21","nodeType":"YulIdentifier","src":"21435:6:21"},{"kind":"number","nativeSrc":"21443:18:21","nodeType":"YulLiteral","src":"21443:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"21432:2:21","nodeType":"YulIdentifier","src":"21432:2:21"},"nativeSrc":"21432:30:21","nodeType":"YulFunctionCall","src":"21432:30:21"},"nativeSrc":"21429:117:21","nodeType":"YulIf","src":"21429:117:21"},{"nativeSrc":"21560:73:21","nodeType":"YulAssignment","src":"21560:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21605:9:21","nodeType":"YulIdentifier","src":"21605:9:21"},{"name":"offset","nativeSrc":"21616:6:21","nodeType":"YulIdentifier","src":"21616:6:21"}],"functionName":{"name":"add","nativeSrc":"21601:3:21","nodeType":"YulIdentifier","src":"21601:3:21"},"nativeSrc":"21601:22:21","nodeType":"YulFunctionCall","src":"21601:22:21"},{"name":"dataEnd","nativeSrc":"21625:7:21","nodeType":"YulIdentifier","src":"21625:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"21570:30:21","nodeType":"YulIdentifier","src":"21570:30:21"},"nativeSrc":"21570:63:21","nodeType":"YulFunctionCall","src":"21570:63:21"},"variableNames":[{"name":"value1","nativeSrc":"21560:6:21","nodeType":"YulIdentifier","src":"21560:6:21"}]}]},{"nativeSrc":"21653:118:21","nodeType":"YulBlock","src":"21653:118:21","statements":[{"nativeSrc":"21668:16:21","nodeType":"YulVariableDeclaration","src":"21668:16:21","value":{"kind":"number","nativeSrc":"21682:2:21","nodeType":"YulLiteral","src":"21682:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"21672:6:21","nodeType":"YulTypedName","src":"21672:6:21","type":""}]},{"nativeSrc":"21698:63:21","nodeType":"YulAssignment","src":"21698:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21733:9:21","nodeType":"YulIdentifier","src":"21733:9:21"},{"name":"offset","nativeSrc":"21744:6:21","nodeType":"YulIdentifier","src":"21744:6:21"}],"functionName":{"name":"add","nativeSrc":"21729:3:21","nodeType":"YulIdentifier","src":"21729:3:21"},"nativeSrc":"21729:22:21","nodeType":"YulFunctionCall","src":"21729:22:21"},{"name":"dataEnd","nativeSrc":"21753:7:21","nodeType":"YulIdentifier","src":"21753:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"21708:20:21","nodeType":"YulIdentifier","src":"21708:20:21"},"nativeSrc":"21708:53:21","nodeType":"YulFunctionCall","src":"21708:53:21"},"variableNames":[{"name":"value2","nativeSrc":"21698:6:21","nodeType":"YulIdentifier","src":"21698:6:21"}]}]},{"nativeSrc":"21781:118:21","nodeType":"YulBlock","src":"21781:118:21","statements":[{"nativeSrc":"21796:16:21","nodeType":"YulVariableDeclaration","src":"21796:16:21","value":{"kind":"number","nativeSrc":"21810:2:21","nodeType":"YulLiteral","src":"21810:2:21","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"21800:6:21","nodeType":"YulTypedName","src":"21800:6:21","type":""}]},{"nativeSrc":"21826:63:21","nodeType":"YulAssignment","src":"21826:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21861:9:21","nodeType":"YulIdentifier","src":"21861:9:21"},{"name":"offset","nativeSrc":"21872:6:21","nodeType":"YulIdentifier","src":"21872:6:21"}],"functionName":{"name":"add","nativeSrc":"21857:3:21","nodeType":"YulIdentifier","src":"21857:3:21"},"nativeSrc":"21857:22:21","nodeType":"YulFunctionCall","src":"21857:22:21"},{"name":"dataEnd","nativeSrc":"21881:7:21","nodeType":"YulIdentifier","src":"21881:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"21836:20:21","nodeType":"YulIdentifier","src":"21836:20:21"},"nativeSrc":"21836:53:21","nodeType":"YulFunctionCall","src":"21836:53:21"},"variableNames":[{"name":"value3","nativeSrc":"21826:6:21","nodeType":"YulIdentifier","src":"21826:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptrt_addresst_uint256","nativeSrc":"20961:945:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21034:9:21","nodeType":"YulTypedName","src":"21034:9:21","type":""},{"name":"dataEnd","nativeSrc":"21045:7:21","nodeType":"YulTypedName","src":"21045:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"21057:6:21","nodeType":"YulTypedName","src":"21057:6:21","type":""},{"name":"value1","nativeSrc":"21065:6:21","nodeType":"YulTypedName","src":"21065:6:21","type":""},{"name":"value2","nativeSrc":"21073:6:21","nodeType":"YulTypedName","src":"21073:6:21","type":""},{"name":"value3","nativeSrc":"21081:6:21","nodeType":"YulTypedName","src":"21081:6:21","type":""}],"src":"20961:945:21"},{"body":{"nativeSrc":"22026:34:21","nodeType":"YulBlock","src":"22026:34:21","statements":[{"nativeSrc":"22036:18:21","nodeType":"YulAssignment","src":"22036:18:21","value":{"name":"pos","nativeSrc":"22051:3:21","nodeType":"YulIdentifier","src":"22051:3:21"},"variableNames":[{"name":"updated_pos","nativeSrc":"22036:11:21","nodeType":"YulIdentifier","src":"22036:11:21"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"21912:148:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21998:3:21","nodeType":"YulTypedName","src":"21998:3:21","type":""},{"name":"length","nativeSrc":"22003:6:21","nodeType":"YulTypedName","src":"22003:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"22014:11:21","nodeType":"YulTypedName","src":"22014:11:21","type":""}],"src":"21912:148:21"},{"body":{"nativeSrc":"22176:280:21","nodeType":"YulBlock","src":"22176:280:21","statements":[{"nativeSrc":"22186:53:21","nodeType":"YulVariableDeclaration","src":"22186:53:21","value":{"arguments":[{"name":"value","nativeSrc":"22233:5:21","nodeType":"YulIdentifier","src":"22233:5:21"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"22200:32:21","nodeType":"YulIdentifier","src":"22200:32:21"},"nativeSrc":"22200:39:21","nodeType":"YulFunctionCall","src":"22200:39:21"},"variables":[{"name":"length","nativeSrc":"22190:6:21","nodeType":"YulTypedName","src":"22190:6:21","type":""}]},{"nativeSrc":"22248:96:21","nodeType":"YulAssignment","src":"22248:96:21","value":{"arguments":[{"name":"pos","nativeSrc":"22332:3:21","nodeType":"YulIdentifier","src":"22332:3:21"},{"name":"length","nativeSrc":"22337:6:21","nodeType":"YulIdentifier","src":"22337:6:21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"22255:76:21","nodeType":"YulIdentifier","src":"22255:76:21"},"nativeSrc":"22255:89:21","nodeType":"YulFunctionCall","src":"22255:89:21"},"variableNames":[{"name":"pos","nativeSrc":"22248:3:21","nodeType":"YulIdentifier","src":"22248:3:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"22392:5:21","nodeType":"YulIdentifier","src":"22392:5:21"},{"kind":"number","nativeSrc":"22399:4:21","nodeType":"YulLiteral","src":"22399:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"22388:3:21","nodeType":"YulIdentifier","src":"22388:3:21"},"nativeSrc":"22388:16:21","nodeType":"YulFunctionCall","src":"22388:16:21"},{"name":"pos","nativeSrc":"22406:3:21","nodeType":"YulIdentifier","src":"22406:3:21"},{"name":"length","nativeSrc":"22411:6:21","nodeType":"YulIdentifier","src":"22411:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"22353:34:21","nodeType":"YulIdentifier","src":"22353:34:21"},"nativeSrc":"22353:65:21","nodeType":"YulFunctionCall","src":"22353:65:21"},"nativeSrc":"22353:65:21","nodeType":"YulExpressionStatement","src":"22353:65:21"},{"nativeSrc":"22427:23:21","nodeType":"YulAssignment","src":"22427:23:21","value":{"arguments":[{"name":"pos","nativeSrc":"22438:3:21","nodeType":"YulIdentifier","src":"22438:3:21"},{"name":"length","nativeSrc":"22443:6:21","nodeType":"YulIdentifier","src":"22443:6:21"}],"functionName":{"name":"add","nativeSrc":"22434:3:21","nodeType":"YulIdentifier","src":"22434:3:21"},"nativeSrc":"22434:16:21","nodeType":"YulFunctionCall","src":"22434:16:21"},"variableNames":[{"name":"end","nativeSrc":"22427:3:21","nodeType":"YulIdentifier","src":"22427:3:21"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"22066:390:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"22157:5:21","nodeType":"YulTypedName","src":"22157:5:21","type":""},{"name":"pos","nativeSrc":"22164:3:21","nodeType":"YulTypedName","src":"22164:3:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"22172:3:21","nodeType":"YulTypedName","src":"22172:3:21","type":""}],"src":"22066:390:21"},{"body":{"nativeSrc":"22598:139:21","nodeType":"YulBlock","src":"22598:139:21","statements":[{"nativeSrc":"22609:102:21","nodeType":"YulAssignment","src":"22609:102:21","value":{"arguments":[{"name":"value0","nativeSrc":"22698:6:21","nodeType":"YulIdentifier","src":"22698:6:21"},{"name":"pos","nativeSrc":"22707:3:21","nodeType":"YulIdentifier","src":"22707:3:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"22616:81:21","nodeType":"YulIdentifier","src":"22616:81:21"},"nativeSrc":"22616:95:21","nodeType":"YulFunctionCall","src":"22616:95:21"},"variableNames":[{"name":"pos","nativeSrc":"22609:3:21","nodeType":"YulIdentifier","src":"22609:3:21"}]},{"nativeSrc":"22721:10:21","nodeType":"YulAssignment","src":"22721:10:21","value":{"name":"pos","nativeSrc":"22728:3:21","nodeType":"YulIdentifier","src":"22728:3:21"},"variableNames":[{"name":"end","nativeSrc":"22721:3:21","nodeType":"YulIdentifier","src":"22721:3:21"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"22462:275:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"22577:3:21","nodeType":"YulTypedName","src":"22577:3:21","type":""},{"name":"value0","nativeSrc":"22583:6:21","nodeType":"YulTypedName","src":"22583:6:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"22594:3:21","nodeType":"YulTypedName","src":"22594:3:21","type":""}],"src":"22462:275:21"},{"body":{"nativeSrc":"22897:288:21","nodeType":"YulBlock","src":"22897:288:21","statements":[{"nativeSrc":"22907:26:21","nodeType":"YulAssignment","src":"22907:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"22919:9:21","nodeType":"YulIdentifier","src":"22919:9:21"},{"kind":"number","nativeSrc":"22930:2:21","nodeType":"YulLiteral","src":"22930:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22915:3:21","nodeType":"YulIdentifier","src":"22915:3:21"},"nativeSrc":"22915:18:21","nodeType":"YulFunctionCall","src":"22915:18:21"},"variableNames":[{"name":"tail","nativeSrc":"22907:4:21","nodeType":"YulIdentifier","src":"22907:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"22987:6:21","nodeType":"YulIdentifier","src":"22987:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"23000:9:21","nodeType":"YulIdentifier","src":"23000:9:21"},{"kind":"number","nativeSrc":"23011:1:21","nodeType":"YulLiteral","src":"23011:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22996:3:21","nodeType":"YulIdentifier","src":"22996:3:21"},"nativeSrc":"22996:17:21","nodeType":"YulFunctionCall","src":"22996:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22943:43:21","nodeType":"YulIdentifier","src":"22943:43:21"},"nativeSrc":"22943:71:21","nodeType":"YulFunctionCall","src":"22943:71:21"},"nativeSrc":"22943:71:21","nodeType":"YulExpressionStatement","src":"22943:71:21"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"23068:6:21","nodeType":"YulIdentifier","src":"23068:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"23081:9:21","nodeType":"YulIdentifier","src":"23081:9:21"},{"kind":"number","nativeSrc":"23092:2:21","nodeType":"YulLiteral","src":"23092:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23077:3:21","nodeType":"YulIdentifier","src":"23077:3:21"},"nativeSrc":"23077:18:21","nodeType":"YulFunctionCall","src":"23077:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"23024:43:21","nodeType":"YulIdentifier","src":"23024:43:21"},"nativeSrc":"23024:72:21","nodeType":"YulFunctionCall","src":"23024:72:21"},"nativeSrc":"23024:72:21","nodeType":"YulExpressionStatement","src":"23024:72:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"23150:6:21","nodeType":"YulIdentifier","src":"23150:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"23163:9:21","nodeType":"YulIdentifier","src":"23163:9:21"},{"kind":"number","nativeSrc":"23174:2:21","nodeType":"YulLiteral","src":"23174:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23159:3:21","nodeType":"YulIdentifier","src":"23159:3:21"},"nativeSrc":"23159:18:21","nodeType":"YulFunctionCall","src":"23159:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"23106:43:21","nodeType":"YulIdentifier","src":"23106:43:21"},"nativeSrc":"23106:72:21","nodeType":"YulFunctionCall","src":"23106:72:21"},"nativeSrc":"23106:72:21","nodeType":"YulExpressionStatement","src":"23106:72:21"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"22743:442:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22853:9:21","nodeType":"YulTypedName","src":"22853:9:21","type":""},{"name":"value2","nativeSrc":"22865:6:21","nodeType":"YulTypedName","src":"22865:6:21","type":""},{"name":"value1","nativeSrc":"22873:6:21","nodeType":"YulTypedName","src":"22873:6:21","type":""},{"name":"value0","nativeSrc":"22881:6:21","nodeType":"YulTypedName","src":"22881:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22892:4:21","nodeType":"YulTypedName","src":"22892:4:21","type":""}],"src":"22743:442:21"},{"body":{"nativeSrc":"23231:76:21","nodeType":"YulBlock","src":"23231:76:21","statements":[{"body":{"nativeSrc":"23285:16:21","nodeType":"YulBlock","src":"23285:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23294:1:21","nodeType":"YulLiteral","src":"23294:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"23297:1:21","nodeType":"YulLiteral","src":"23297:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"23287:6:21","nodeType":"YulIdentifier","src":"23287:6:21"},"nativeSrc":"23287:12:21","nodeType":"YulFunctionCall","src":"23287:12:21"},"nativeSrc":"23287:12:21","nodeType":"YulExpressionStatement","src":"23287:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"23254:5:21","nodeType":"YulIdentifier","src":"23254:5:21"},{"arguments":[{"name":"value","nativeSrc":"23276:5:21","nodeType":"YulIdentifier","src":"23276:5:21"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"23261:14:21","nodeType":"YulIdentifier","src":"23261:14:21"},"nativeSrc":"23261:21:21","nodeType":"YulFunctionCall","src":"23261:21:21"}],"functionName":{"name":"eq","nativeSrc":"23251:2:21","nodeType":"YulIdentifier","src":"23251:2:21"},"nativeSrc":"23251:32:21","nodeType":"YulFunctionCall","src":"23251:32:21"}],"functionName":{"name":"iszero","nativeSrc":"23244:6:21","nodeType":"YulIdentifier","src":"23244:6:21"},"nativeSrc":"23244:40:21","nodeType":"YulFunctionCall","src":"23244:40:21"},"nativeSrc":"23241:60:21","nodeType":"YulIf","src":"23241:60:21"}]},"name":"validator_revert_t_bool","nativeSrc":"23191:116:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"23224:5:21","nodeType":"YulTypedName","src":"23224:5:21","type":""}],"src":"23191:116:21"},{"body":{"nativeSrc":"23373:77:21","nodeType":"YulBlock","src":"23373:77:21","statements":[{"nativeSrc":"23383:22:21","nodeType":"YulAssignment","src":"23383:22:21","value":{"arguments":[{"name":"offset","nativeSrc":"23398:6:21","nodeType":"YulIdentifier","src":"23398:6:21"}],"functionName":{"name":"mload","nativeSrc":"23392:5:21","nodeType":"YulIdentifier","src":"23392:5:21"},"nativeSrc":"23392:13:21","nodeType":"YulFunctionCall","src":"23392:13:21"},"variableNames":[{"name":"value","nativeSrc":"23383:5:21","nodeType":"YulIdentifier","src":"23383:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"23438:5:21","nodeType":"YulIdentifier","src":"23438:5:21"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"23414:23:21","nodeType":"YulIdentifier","src":"23414:23:21"},"nativeSrc":"23414:30:21","nodeType":"YulFunctionCall","src":"23414:30:21"},"nativeSrc":"23414:30:21","nodeType":"YulExpressionStatement","src":"23414:30:21"}]},"name":"abi_decode_t_bool_fromMemory","nativeSrc":"23313:137:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"23351:6:21","nodeType":"YulTypedName","src":"23351:6:21","type":""},{"name":"end","nativeSrc":"23359:3:21","nodeType":"YulTypedName","src":"23359:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"23367:5:21","nodeType":"YulTypedName","src":"23367:5:21","type":""}],"src":"23313:137:21"},{"body":{"nativeSrc":"23530:271:21","nodeType":"YulBlock","src":"23530:271:21","statements":[{"body":{"nativeSrc":"23576:83:21","nodeType":"YulBlock","src":"23576:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"23578:77:21","nodeType":"YulIdentifier","src":"23578:77:21"},"nativeSrc":"23578:79:21","nodeType":"YulFunctionCall","src":"23578:79:21"},"nativeSrc":"23578:79:21","nodeType":"YulExpressionStatement","src":"23578:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"23551:7:21","nodeType":"YulIdentifier","src":"23551:7:21"},{"name":"headStart","nativeSrc":"23560:9:21","nodeType":"YulIdentifier","src":"23560:9:21"}],"functionName":{"name":"sub","nativeSrc":"23547:3:21","nodeType":"YulIdentifier","src":"23547:3:21"},"nativeSrc":"23547:23:21","nodeType":"YulFunctionCall","src":"23547:23:21"},{"kind":"number","nativeSrc":"23572:2:21","nodeType":"YulLiteral","src":"23572:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"23543:3:21","nodeType":"YulIdentifier","src":"23543:3:21"},"nativeSrc":"23543:32:21","nodeType":"YulFunctionCall","src":"23543:32:21"},"nativeSrc":"23540:119:21","nodeType":"YulIf","src":"23540:119:21"},{"nativeSrc":"23669:125:21","nodeType":"YulBlock","src":"23669:125:21","statements":[{"nativeSrc":"23684:15:21","nodeType":"YulVariableDeclaration","src":"23684:15:21","value":{"kind":"number","nativeSrc":"23698:1:21","nodeType":"YulLiteral","src":"23698:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"23688:6:21","nodeType":"YulTypedName","src":"23688:6:21","type":""}]},{"nativeSrc":"23713:71:21","nodeType":"YulAssignment","src":"23713:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23756:9:21","nodeType":"YulIdentifier","src":"23756:9:21"},{"name":"offset","nativeSrc":"23767:6:21","nodeType":"YulIdentifier","src":"23767:6:21"}],"functionName":{"name":"add","nativeSrc":"23752:3:21","nodeType":"YulIdentifier","src":"23752:3:21"},"nativeSrc":"23752:22:21","nodeType":"YulFunctionCall","src":"23752:22:21"},{"name":"dataEnd","nativeSrc":"23776:7:21","nodeType":"YulIdentifier","src":"23776:7:21"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nativeSrc":"23723:28:21","nodeType":"YulIdentifier","src":"23723:28:21"},"nativeSrc":"23723:61:21","nodeType":"YulFunctionCall","src":"23723:61:21"},"variableNames":[{"name":"value0","nativeSrc":"23713:6:21","nodeType":"YulIdentifier","src":"23713:6:21"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"23456:345:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23500:9:21","nodeType":"YulTypedName","src":"23500:9:21","type":""},{"name":"dataEnd","nativeSrc":"23511:7:21","nodeType":"YulTypedName","src":"23511:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"23523:6:21","nodeType":"YulTypedName","src":"23523:6:21","type":""}],"src":"23456:345:21"},{"body":{"nativeSrc":"23920:34:21","nodeType":"YulBlock","src":"23920:34:21","statements":[{"nativeSrc":"23930:18:21","nodeType":"YulAssignment","src":"23930:18:21","value":{"name":"pos","nativeSrc":"23945:3:21","nodeType":"YulIdentifier","src":"23945:3:21"},"variableNames":[{"name":"updated_pos","nativeSrc":"23930:11:21","nodeType":"YulIdentifier","src":"23930:11:21"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"23807:147:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"23892:3:21","nodeType":"YulTypedName","src":"23892:3:21","type":""},{"name":"length","nativeSrc":"23897:6:21","nodeType":"YulTypedName","src":"23897:6:21","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"23908:11:21","nodeType":"YulTypedName","src":"23908:11:21","type":""}],"src":"23807:147:21"},{"body":{"nativeSrc":"24066:8:21","nodeType":"YulBlock","src":"24066:8:21","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nativeSrc":"23960:114:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"24058:6:21","nodeType":"YulTypedName","src":"24058:6:21","type":""}],"src":"23960:114:21"},{"body":{"nativeSrc":"24243:235:21","nodeType":"YulBlock","src":"24243:235:21","statements":[{"nativeSrc":"24253:90:21","nodeType":"YulAssignment","src":"24253:90:21","value":{"arguments":[{"name":"pos","nativeSrc":"24336:3:21","nodeType":"YulIdentifier","src":"24336:3:21"},{"kind":"number","nativeSrc":"24341:1:21","nodeType":"YulLiteral","src":"24341:1:21","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"24260:75:21","nodeType":"YulIdentifier","src":"24260:75:21"},"nativeSrc":"24260:83:21","nodeType":"YulFunctionCall","src":"24260:83:21"},"variableNames":[{"name":"pos","nativeSrc":"24253:3:21","nodeType":"YulIdentifier","src":"24253:3:21"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"24441:3:21","nodeType":"YulIdentifier","src":"24441:3:21"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nativeSrc":"24352:88:21","nodeType":"YulIdentifier","src":"24352:88:21"},"nativeSrc":"24352:93:21","nodeType":"YulFunctionCall","src":"24352:93:21"},"nativeSrc":"24352:93:21","nodeType":"YulExpressionStatement","src":"24352:93:21"},{"nativeSrc":"24454:18:21","nodeType":"YulAssignment","src":"24454:18:21","value":{"arguments":[{"name":"pos","nativeSrc":"24465:3:21","nodeType":"YulIdentifier","src":"24465:3:21"},{"kind":"number","nativeSrc":"24470:1:21","nodeType":"YulLiteral","src":"24470:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"24461:3:21","nodeType":"YulIdentifier","src":"24461:3:21"},"nativeSrc":"24461:11:21","nodeType":"YulFunctionCall","src":"24461:11:21"},"variableNames":[{"name":"end","nativeSrc":"24454:3:21","nodeType":"YulIdentifier","src":"24454:3:21"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"24080:398:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"24231:3:21","nodeType":"YulTypedName","src":"24231:3:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"24239:3:21","nodeType":"YulTypedName","src":"24239:3:21","type":""}],"src":"24080:398:21"},{"body":{"nativeSrc":"24672:191:21","nodeType":"YulBlock","src":"24672:191:21","statements":[{"nativeSrc":"24683:154:21","nodeType":"YulAssignment","src":"24683:154:21","value":{"arguments":[{"name":"pos","nativeSrc":"24833:3:21","nodeType":"YulIdentifier","src":"24833:3:21"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"24690:141:21","nodeType":"YulIdentifier","src":"24690:141:21"},"nativeSrc":"24690:147:21","nodeType":"YulFunctionCall","src":"24690:147:21"},"variableNames":[{"name":"pos","nativeSrc":"24683:3:21","nodeType":"YulIdentifier","src":"24683:3:21"}]},{"nativeSrc":"24847:10:21","nodeType":"YulAssignment","src":"24847:10:21","value":{"name":"pos","nativeSrc":"24854:3:21","nodeType":"YulIdentifier","src":"24854:3:21"},"variableNames":[{"name":"end","nativeSrc":"24847:3:21","nodeType":"YulIdentifier","src":"24847:3:21"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"24484:379:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"24659:3:21","nodeType":"YulTypedName","src":"24659:3:21","type":""}],"returnVariables":[{"name":"end","nativeSrc":"24668:3:21","nodeType":"YulTypedName","src":"24668:3:21","type":""}],"src":"24484:379:21"},{"body":{"nativeSrc":"25107:537:21","nodeType":"YulBlock","src":"25107:537:21","statements":[{"nativeSrc":"25117:27:21","nodeType":"YulAssignment","src":"25117:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"25129:9:21","nodeType":"YulIdentifier","src":"25129:9:21"},{"kind":"number","nativeSrc":"25140:3:21","nodeType":"YulLiteral","src":"25140:3:21","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"25125:3:21","nodeType":"YulIdentifier","src":"25125:3:21"},"nativeSrc":"25125:19:21","nodeType":"YulFunctionCall","src":"25125:19:21"},"variableNames":[{"name":"tail","nativeSrc":"25117:4:21","nodeType":"YulIdentifier","src":"25117:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"25198:6:21","nodeType":"YulIdentifier","src":"25198:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"25211:9:21","nodeType":"YulIdentifier","src":"25211:9:21"},{"kind":"number","nativeSrc":"25222:1:21","nodeType":"YulLiteral","src":"25222:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"25207:3:21","nodeType":"YulIdentifier","src":"25207:3:21"},"nativeSrc":"25207:17:21","nodeType":"YulFunctionCall","src":"25207:17:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"25154:43:21","nodeType":"YulIdentifier","src":"25154:43:21"},"nativeSrc":"25154:71:21","nodeType":"YulFunctionCall","src":"25154:71:21"},"nativeSrc":"25154:71:21","nodeType":"YulExpressionStatement","src":"25154:71:21"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"25279:6:21","nodeType":"YulIdentifier","src":"25279:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"25292:9:21","nodeType":"YulIdentifier","src":"25292:9:21"},{"kind":"number","nativeSrc":"25303:2:21","nodeType":"YulLiteral","src":"25303:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"25288:3:21","nodeType":"YulIdentifier","src":"25288:3:21"},"nativeSrc":"25288:18:21","nodeType":"YulFunctionCall","src":"25288:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"25235:43:21","nodeType":"YulIdentifier","src":"25235:43:21"},"nativeSrc":"25235:72:21","nodeType":"YulFunctionCall","src":"25235:72:21"},"nativeSrc":"25235:72:21","nodeType":"YulExpressionStatement","src":"25235:72:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"25361:6:21","nodeType":"YulIdentifier","src":"25361:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"25374:9:21","nodeType":"YulIdentifier","src":"25374:9:21"},{"kind":"number","nativeSrc":"25385:2:21","nodeType":"YulLiteral","src":"25385:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"25370:3:21","nodeType":"YulIdentifier","src":"25370:3:21"},"nativeSrc":"25370:18:21","nodeType":"YulFunctionCall","src":"25370:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"25317:43:21","nodeType":"YulIdentifier","src":"25317:43:21"},"nativeSrc":"25317:72:21","nodeType":"YulFunctionCall","src":"25317:72:21"},"nativeSrc":"25317:72:21","nodeType":"YulExpressionStatement","src":"25317:72:21"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"25443:6:21","nodeType":"YulIdentifier","src":"25443:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"25456:9:21","nodeType":"YulIdentifier","src":"25456:9:21"},{"kind":"number","nativeSrc":"25467:2:21","nodeType":"YulLiteral","src":"25467:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"25452:3:21","nodeType":"YulIdentifier","src":"25452:3:21"},"nativeSrc":"25452:18:21","nodeType":"YulFunctionCall","src":"25452:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"25399:43:21","nodeType":"YulIdentifier","src":"25399:43:21"},"nativeSrc":"25399:72:21","nodeType":"YulFunctionCall","src":"25399:72:21"},"nativeSrc":"25399:72:21","nodeType":"YulExpressionStatement","src":"25399:72:21"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"25525:6:21","nodeType":"YulIdentifier","src":"25525:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"25538:9:21","nodeType":"YulIdentifier","src":"25538:9:21"},{"kind":"number","nativeSrc":"25549:3:21","nodeType":"YulLiteral","src":"25549:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"25534:3:21","nodeType":"YulIdentifier","src":"25534:3:21"},"nativeSrc":"25534:19:21","nodeType":"YulFunctionCall","src":"25534:19:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"25481:43:21","nodeType":"YulIdentifier","src":"25481:43:21"},"nativeSrc":"25481:73:21","nodeType":"YulFunctionCall","src":"25481:73:21"},"nativeSrc":"25481:73:21","nodeType":"YulExpressionStatement","src":"25481:73:21"},{"expression":{"arguments":[{"name":"value5","nativeSrc":"25608:6:21","nodeType":"YulIdentifier","src":"25608:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"25621:9:21","nodeType":"YulIdentifier","src":"25621:9:21"},{"kind":"number","nativeSrc":"25632:3:21","nodeType":"YulLiteral","src":"25632:3:21","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"25617:3:21","nodeType":"YulIdentifier","src":"25617:3:21"},"nativeSrc":"25617:19:21","nodeType":"YulFunctionCall","src":"25617:19:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"25564:43:21","nodeType":"YulIdentifier","src":"25564:43:21"},"nativeSrc":"25564:73:21","nodeType":"YulFunctionCall","src":"25564:73:21"},"nativeSrc":"25564:73:21","nodeType":"YulExpressionStatement","src":"25564:73:21"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_address_t_address_t_uint256__to_t_bytes32_t_bytes32_t_address_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"24869:775:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"25039:9:21","nodeType":"YulTypedName","src":"25039:9:21","type":""},{"name":"value5","nativeSrc":"25051:6:21","nodeType":"YulTypedName","src":"25051:6:21","type":""},{"name":"value4","nativeSrc":"25059:6:21","nodeType":"YulTypedName","src":"25059:6:21","type":""},{"name":"value3","nativeSrc":"25067:6:21","nodeType":"YulTypedName","src":"25067:6:21","type":""},{"name":"value2","nativeSrc":"25075:6:21","nodeType":"YulTypedName","src":"25075:6:21","type":""},{"name":"value1","nativeSrc":"25083:6:21","nodeType":"YulTypedName","src":"25083:6:21","type":""},{"name":"value0","nativeSrc":"25091:6:21","nodeType":"YulTypedName","src":"25091:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"25102:4:21","nodeType":"YulTypedName","src":"25102:4:21","type":""}],"src":"24869:775:21"},{"body":{"nativeSrc":"25678:152:21","nodeType":"YulBlock","src":"25678:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"25695:1:21","nodeType":"YulLiteral","src":"25695:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"25698:77:21","nodeType":"YulLiteral","src":"25698:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"25688:6:21","nodeType":"YulIdentifier","src":"25688:6:21"},"nativeSrc":"25688:88:21","nodeType":"YulFunctionCall","src":"25688:88:21"},"nativeSrc":"25688:88:21","nodeType":"YulExpressionStatement","src":"25688:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"25792:1:21","nodeType":"YulLiteral","src":"25792:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"25795:4:21","nodeType":"YulLiteral","src":"25795:4:21","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"25785:6:21","nodeType":"YulIdentifier","src":"25785:6:21"},"nativeSrc":"25785:15:21","nodeType":"YulFunctionCall","src":"25785:15:21"},"nativeSrc":"25785:15:21","nodeType":"YulExpressionStatement","src":"25785:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"25816:1:21","nodeType":"YulLiteral","src":"25816:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"25819:4:21","nodeType":"YulLiteral","src":"25819:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"25809:6:21","nodeType":"YulIdentifier","src":"25809:6:21"},"nativeSrc":"25809:15:21","nodeType":"YulFunctionCall","src":"25809:15:21"},"nativeSrc":"25809:15:21","nodeType":"YulExpressionStatement","src":"25809:15:21"}]},"name":"panic_error_0x21","nativeSrc":"25650:180:21","nodeType":"YulFunctionDefinition","src":"25650:180:21"},{"body":{"nativeSrc":"25893:62:21","nodeType":"YulBlock","src":"25893:62:21","statements":[{"body":{"nativeSrc":"25927:22:21","nodeType":"YulBlock","src":"25927:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nativeSrc":"25929:16:21","nodeType":"YulIdentifier","src":"25929:16:21"},"nativeSrc":"25929:18:21","nodeType":"YulFunctionCall","src":"25929:18:21"},"nativeSrc":"25929:18:21","nodeType":"YulExpressionStatement","src":"25929:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"25916:5:21","nodeType":"YulIdentifier","src":"25916:5:21"},{"kind":"number","nativeSrc":"25923:1:21","nodeType":"YulLiteral","src":"25923:1:21","type":"","value":"5"}],"functionName":{"name":"lt","nativeSrc":"25913:2:21","nodeType":"YulIdentifier","src":"25913:2:21"},"nativeSrc":"25913:12:21","nodeType":"YulFunctionCall","src":"25913:12:21"}],"functionName":{"name":"iszero","nativeSrc":"25906:6:21","nodeType":"YulIdentifier","src":"25906:6:21"},"nativeSrc":"25906:20:21","nodeType":"YulFunctionCall","src":"25906:20:21"},"nativeSrc":"25903:46:21","nodeType":"YulIf","src":"25903:46:21"}]},"name":"validator_assert_t_enum$_AssetType_$3578","nativeSrc":"25836:119:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"25886:5:21","nodeType":"YulTypedName","src":"25886:5:21","type":""}],"src":"25836:119:21"},{"body":{"nativeSrc":"26020:80:21","nodeType":"YulBlock","src":"26020:80:21","statements":[{"nativeSrc":"26030:16:21","nodeType":"YulAssignment","src":"26030:16:21","value":{"name":"value","nativeSrc":"26041:5:21","nodeType":"YulIdentifier","src":"26041:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"26030:7:21","nodeType":"YulIdentifier","src":"26030:7:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"26088:5:21","nodeType":"YulIdentifier","src":"26088:5:21"}],"functionName":{"name":"validator_assert_t_enum$_AssetType_$3578","nativeSrc":"26047:40:21","nodeType":"YulIdentifier","src":"26047:40:21"},"nativeSrc":"26047:47:21","nodeType":"YulFunctionCall","src":"26047:47:21"},"nativeSrc":"26047:47:21","nodeType":"YulExpressionStatement","src":"26047:47:21"}]},"name":"cleanup_t_enum$_AssetType_$3578","nativeSrc":"25961:139:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26002:5:21","nodeType":"YulTypedName","src":"26002:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"26012:7:21","nodeType":"YulTypedName","src":"26012:7:21","type":""}],"src":"25961:139:21"},{"body":{"nativeSrc":"26178:67:21","nodeType":"YulBlock","src":"26178:67:21","statements":[{"nativeSrc":"26188:51:21","nodeType":"YulAssignment","src":"26188:51:21","value":{"arguments":[{"name":"value","nativeSrc":"26233:5:21","nodeType":"YulIdentifier","src":"26233:5:21"}],"functionName":{"name":"cleanup_t_enum$_AssetType_$3578","nativeSrc":"26201:31:21","nodeType":"YulIdentifier","src":"26201:31:21"},"nativeSrc":"26201:38:21","nodeType":"YulFunctionCall","src":"26201:38:21"},"variableNames":[{"name":"converted","nativeSrc":"26188:9:21","nodeType":"YulIdentifier","src":"26188:9:21"}]}]},"name":"convert_t_enum$_AssetType_$3578_to_t_uint8","nativeSrc":"26106:139:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26158:5:21","nodeType":"YulTypedName","src":"26158:5:21","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"26168:9:21","nodeType":"YulTypedName","src":"26168:9:21","type":""}],"src":"26106:139:21"},{"body":{"nativeSrc":"26328:78:21","nodeType":"YulBlock","src":"26328:78:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"26345:3:21","nodeType":"YulIdentifier","src":"26345:3:21"},{"arguments":[{"name":"value","nativeSrc":"26393:5:21","nodeType":"YulIdentifier","src":"26393:5:21"}],"functionName":{"name":"convert_t_enum$_AssetType_$3578_to_t_uint8","nativeSrc":"26350:42:21","nodeType":"YulIdentifier","src":"26350:42:21"},"nativeSrc":"26350:49:21","nodeType":"YulFunctionCall","src":"26350:49:21"}],"functionName":{"name":"mstore","nativeSrc":"26338:6:21","nodeType":"YulIdentifier","src":"26338:6:21"},"nativeSrc":"26338:62:21","nodeType":"YulFunctionCall","src":"26338:62:21"},"nativeSrc":"26338:62:21","nodeType":"YulExpressionStatement","src":"26338:62:21"}]},"name":"abi_encode_t_enum$_AssetType_$3578_to_t_uint8_fromStack","nativeSrc":"26251:155:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26316:5:21","nodeType":"YulTypedName","src":"26316:5:21","type":""},{"name":"pos","nativeSrc":"26323:3:21","nodeType":"YulTypedName","src":"26323:3:21","type":""}],"src":"26251:155:21"},{"body":{"nativeSrc":"26465:32:21","nodeType":"YulBlock","src":"26465:32:21","statements":[{"nativeSrc":"26475:16:21","nodeType":"YulAssignment","src":"26475:16:21","value":{"name":"value","nativeSrc":"26486:5:21","nodeType":"YulIdentifier","src":"26486:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"26475:7:21","nodeType":"YulIdentifier","src":"26475:7:21"}]}]},"name":"cleanup_t_rational_0_by_1","nativeSrc":"26412:85:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26447:5:21","nodeType":"YulTypedName","src":"26447:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"26457:7:21","nodeType":"YulTypedName","src":"26457:7:21","type":""}],"src":"26412:85:21"},{"body":{"nativeSrc":"26535:28:21","nodeType":"YulBlock","src":"26535:28:21","statements":[{"nativeSrc":"26545:12:21","nodeType":"YulAssignment","src":"26545:12:21","value":{"name":"value","nativeSrc":"26552:5:21","nodeType":"YulIdentifier","src":"26552:5:21"},"variableNames":[{"name":"ret","nativeSrc":"26545:3:21","nodeType":"YulIdentifier","src":"26545:3:21"}]}]},"name":"identity","nativeSrc":"26503:60:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26521:5:21","nodeType":"YulTypedName","src":"26521:5:21","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"26531:3:21","nodeType":"YulTypedName","src":"26531:3:21","type":""}],"src":"26503:60:21"},{"body":{"nativeSrc":"26637:90:21","nodeType":"YulBlock","src":"26637:90:21","statements":[{"nativeSrc":"26647:74:21","nodeType":"YulAssignment","src":"26647:74:21","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"26713:5:21","nodeType":"YulIdentifier","src":"26713:5:21"}],"functionName":{"name":"cleanup_t_rational_0_by_1","nativeSrc":"26687:25:21","nodeType":"YulIdentifier","src":"26687:25:21"},"nativeSrc":"26687:32:21","nodeType":"YulFunctionCall","src":"26687:32:21"}],"functionName":{"name":"identity","nativeSrc":"26678:8:21","nodeType":"YulIdentifier","src":"26678:8:21"},"nativeSrc":"26678:42:21","nodeType":"YulFunctionCall","src":"26678:42:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"26660:17:21","nodeType":"YulIdentifier","src":"26660:17:21"},"nativeSrc":"26660:61:21","nodeType":"YulFunctionCall","src":"26660:61:21"},"variableNames":[{"name":"converted","nativeSrc":"26647:9:21","nodeType":"YulIdentifier","src":"26647:9:21"}]}]},"name":"convert_t_rational_0_by_1_to_t_uint256","nativeSrc":"26569:158:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26617:5:21","nodeType":"YulTypedName","src":"26617:5:21","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"26627:9:21","nodeType":"YulTypedName","src":"26627:9:21","type":""}],"src":"26569:158:21"},{"body":{"nativeSrc":"26806:74:21","nodeType":"YulBlock","src":"26806:74:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"26823:3:21","nodeType":"YulIdentifier","src":"26823:3:21"},{"arguments":[{"name":"value","nativeSrc":"26867:5:21","nodeType":"YulIdentifier","src":"26867:5:21"}],"functionName":{"name":"convert_t_rational_0_by_1_to_t_uint256","nativeSrc":"26828:38:21","nodeType":"YulIdentifier","src":"26828:38:21"},"nativeSrc":"26828:45:21","nodeType":"YulFunctionCall","src":"26828:45:21"}],"functionName":{"name":"mstore","nativeSrc":"26816:6:21","nodeType":"YulIdentifier","src":"26816:6:21"},"nativeSrc":"26816:58:21","nodeType":"YulFunctionCall","src":"26816:58:21"},"nativeSrc":"26816:58:21","nodeType":"YulExpressionStatement","src":"26816:58:21"}]},"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nativeSrc":"26733:147:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"26794:5:21","nodeType":"YulTypedName","src":"26794:5:21","type":""},{"name":"pos","nativeSrc":"26801:3:21","nodeType":"YulTypedName","src":"26801:3:21","type":""}],"src":"26733:147:21"},{"body":{"nativeSrc":"27136:545:21","nodeType":"YulBlock","src":"27136:545:21","statements":[{"nativeSrc":"27146:27:21","nodeType":"YulAssignment","src":"27146:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"27158:9:21","nodeType":"YulIdentifier","src":"27158:9:21"},{"kind":"number","nativeSrc":"27169:3:21","nodeType":"YulLiteral","src":"27169:3:21","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"27154:3:21","nodeType":"YulIdentifier","src":"27154:3:21"},"nativeSrc":"27154:19:21","nodeType":"YulFunctionCall","src":"27154:19:21"},"variableNames":[{"name":"tail","nativeSrc":"27146:4:21","nodeType":"YulIdentifier","src":"27146:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"27194:9:21","nodeType":"YulIdentifier","src":"27194:9:21"},{"kind":"number","nativeSrc":"27205:1:21","nodeType":"YulLiteral","src":"27205:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"27190:3:21","nodeType":"YulIdentifier","src":"27190:3:21"},"nativeSrc":"27190:17:21","nodeType":"YulFunctionCall","src":"27190:17:21"},{"arguments":[{"name":"tail","nativeSrc":"27213:4:21","nodeType":"YulIdentifier","src":"27213:4:21"},{"name":"headStart","nativeSrc":"27219:9:21","nodeType":"YulIdentifier","src":"27219:9:21"}],"functionName":{"name":"sub","nativeSrc":"27209:3:21","nodeType":"YulIdentifier","src":"27209:3:21"},"nativeSrc":"27209:20:21","nodeType":"YulFunctionCall","src":"27209:20:21"}],"functionName":{"name":"mstore","nativeSrc":"27183:6:21","nodeType":"YulIdentifier","src":"27183:6:21"},"nativeSrc":"27183:47:21","nodeType":"YulFunctionCall","src":"27183:47:21"},"nativeSrc":"27183:47:21","nodeType":"YulExpressionStatement","src":"27183:47:21"},{"nativeSrc":"27239:86:21","nodeType":"YulAssignment","src":"27239:86:21","value":{"arguments":[{"name":"value0","nativeSrc":"27311:6:21","nodeType":"YulIdentifier","src":"27311:6:21"},{"name":"tail","nativeSrc":"27320:4:21","nodeType":"YulIdentifier","src":"27320:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"27247:63:21","nodeType":"YulIdentifier","src":"27247:63:21"},"nativeSrc":"27247:78:21","nodeType":"YulFunctionCall","src":"27247:78:21"},"variableNames":[{"name":"tail","nativeSrc":"27239:4:21","nodeType":"YulIdentifier","src":"27239:4:21"}]},{"expression":{"arguments":[{"name":"value1","nativeSrc":"27391:6:21","nodeType":"YulIdentifier","src":"27391:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"27404:9:21","nodeType":"YulIdentifier","src":"27404:9:21"},{"kind":"number","nativeSrc":"27415:2:21","nodeType":"YulLiteral","src":"27415:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"27400:3:21","nodeType":"YulIdentifier","src":"27400:3:21"},"nativeSrc":"27400:18:21","nodeType":"YulFunctionCall","src":"27400:18:21"}],"functionName":{"name":"abi_encode_t_enum$_AssetType_$3578_to_t_uint8_fromStack","nativeSrc":"27335:55:21","nodeType":"YulIdentifier","src":"27335:55:21"},"nativeSrc":"27335:84:21","nodeType":"YulFunctionCall","src":"27335:84:21"},"nativeSrc":"27335:84:21","nodeType":"YulExpressionStatement","src":"27335:84:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"27473:6:21","nodeType":"YulIdentifier","src":"27473:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"27486:9:21","nodeType":"YulIdentifier","src":"27486:9:21"},{"kind":"number","nativeSrc":"27497:2:21","nodeType":"YulLiteral","src":"27497:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"27482:3:21","nodeType":"YulIdentifier","src":"27482:3:21"},"nativeSrc":"27482:18:21","nodeType":"YulFunctionCall","src":"27482:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"27429:43:21","nodeType":"YulIdentifier","src":"27429:43:21"},"nativeSrc":"27429:72:21","nodeType":"YulFunctionCall","src":"27429:72:21"},"nativeSrc":"27429:72:21","nodeType":"YulExpressionStatement","src":"27429:72:21"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"27563:6:21","nodeType":"YulIdentifier","src":"27563:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"27576:9:21","nodeType":"YulIdentifier","src":"27576:9:21"},{"kind":"number","nativeSrc":"27587:2:21","nodeType":"YulLiteral","src":"27587:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"27572:3:21","nodeType":"YulIdentifier","src":"27572:3:21"},"nativeSrc":"27572:18:21","nodeType":"YulFunctionCall","src":"27572:18:21"}],"functionName":{"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nativeSrc":"27511:51:21","nodeType":"YulIdentifier","src":"27511:51:21"},"nativeSrc":"27511:80:21","nodeType":"YulFunctionCall","src":"27511:80:21"},"nativeSrc":"27511:80:21","nodeType":"YulExpressionStatement","src":"27511:80:21"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"27645:6:21","nodeType":"YulIdentifier","src":"27645:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"27658:9:21","nodeType":"YulIdentifier","src":"27658:9:21"},{"kind":"number","nativeSrc":"27669:3:21","nodeType":"YulLiteral","src":"27669:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"27654:3:21","nodeType":"YulIdentifier","src":"27654:3:21"},"nativeSrc":"27654:19:21","nodeType":"YulFunctionCall","src":"27654:19:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"27601:43:21","nodeType":"YulIdentifier","src":"27601:43:21"},"nativeSrc":"27601:73:21","nodeType":"YulFunctionCall","src":"27601:73:21"},"nativeSrc":"27601:73:21","nodeType":"YulExpressionStatement","src":"27601:73:21"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_enum$_AssetType_$3578_t_address_t_rational_0_by_1_t_uint256__to_t_string_memory_ptr_t_uint8_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"26886:795:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"27076:9:21","nodeType":"YulTypedName","src":"27076:9:21","type":""},{"name":"value4","nativeSrc":"27088:6:21","nodeType":"YulTypedName","src":"27088:6:21","type":""},{"name":"value3","nativeSrc":"27096:6:21","nodeType":"YulTypedName","src":"27096:6:21","type":""},{"name":"value2","nativeSrc":"27104:6:21","nodeType":"YulTypedName","src":"27104:6:21","type":""},{"name":"value1","nativeSrc":"27112:6:21","nodeType":"YulTypedName","src":"27112:6:21","type":""},{"name":"value0","nativeSrc":"27120:6:21","nodeType":"YulTypedName","src":"27120:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"27131:4:21","nodeType":"YulTypedName","src":"27131:4:21","type":""}],"src":"26886:795:21"},{"body":{"nativeSrc":"27715:152:21","nodeType":"YulBlock","src":"27715:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"27732:1:21","nodeType":"YulLiteral","src":"27732:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"27735:77:21","nodeType":"YulLiteral","src":"27735:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"27725:6:21","nodeType":"YulIdentifier","src":"27725:6:21"},"nativeSrc":"27725:88:21","nodeType":"YulFunctionCall","src":"27725:88:21"},"nativeSrc":"27725:88:21","nodeType":"YulExpressionStatement","src":"27725:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"27829:1:21","nodeType":"YulLiteral","src":"27829:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"27832:4:21","nodeType":"YulLiteral","src":"27832:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"27822:6:21","nodeType":"YulIdentifier","src":"27822:6:21"},"nativeSrc":"27822:15:21","nodeType":"YulFunctionCall","src":"27822:15:21"},"nativeSrc":"27822:15:21","nodeType":"YulExpressionStatement","src":"27822:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"27853:1:21","nodeType":"YulLiteral","src":"27853:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"27856:4:21","nodeType":"YulLiteral","src":"27856:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"27846:6:21","nodeType":"YulIdentifier","src":"27846:6:21"},"nativeSrc":"27846:15:21","nodeType":"YulFunctionCall","src":"27846:15:21"},"nativeSrc":"27846:15:21","nodeType":"YulExpressionStatement","src":"27846:15:21"}]},"name":"panic_error_0x11","nativeSrc":"27687:180:21","nodeType":"YulFunctionDefinition","src":"27687:180:21"},{"body":{"nativeSrc":"27918:149:21","nodeType":"YulBlock","src":"27918:149:21","statements":[{"nativeSrc":"27928:25:21","nodeType":"YulAssignment","src":"27928:25:21","value":{"arguments":[{"name":"x","nativeSrc":"27951:1:21","nodeType":"YulIdentifier","src":"27951:1:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27933:17:21","nodeType":"YulIdentifier","src":"27933:17:21"},"nativeSrc":"27933:20:21","nodeType":"YulFunctionCall","src":"27933:20:21"},"variableNames":[{"name":"x","nativeSrc":"27928:1:21","nodeType":"YulIdentifier","src":"27928:1:21"}]},{"nativeSrc":"27962:25:21","nodeType":"YulAssignment","src":"27962:25:21","value":{"arguments":[{"name":"y","nativeSrc":"27985:1:21","nodeType":"YulIdentifier","src":"27985:1:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"27967:17:21","nodeType":"YulIdentifier","src":"27967:17:21"},"nativeSrc":"27967:20:21","nodeType":"YulFunctionCall","src":"27967:20:21"},"variableNames":[{"name":"y","nativeSrc":"27962:1:21","nodeType":"YulIdentifier","src":"27962:1:21"}]},{"nativeSrc":"27996:17:21","nodeType":"YulAssignment","src":"27996:17:21","value":{"arguments":[{"name":"x","nativeSrc":"28008:1:21","nodeType":"YulIdentifier","src":"28008:1:21"},{"name":"y","nativeSrc":"28011:1:21","nodeType":"YulIdentifier","src":"28011:1:21"}],"functionName":{"name":"sub","nativeSrc":"28004:3:21","nodeType":"YulIdentifier","src":"28004:3:21"},"nativeSrc":"28004:9:21","nodeType":"YulFunctionCall","src":"28004:9:21"},"variableNames":[{"name":"diff","nativeSrc":"27996:4:21","nodeType":"YulIdentifier","src":"27996:4:21"}]},{"body":{"nativeSrc":"28038:22:21","nodeType":"YulBlock","src":"28038:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"28040:16:21","nodeType":"YulIdentifier","src":"28040:16:21"},"nativeSrc":"28040:18:21","nodeType":"YulFunctionCall","src":"28040:18:21"},"nativeSrc":"28040:18:21","nodeType":"YulExpressionStatement","src":"28040:18:21"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"28029:4:21","nodeType":"YulIdentifier","src":"28029:4:21"},{"name":"x","nativeSrc":"28035:1:21","nodeType":"YulIdentifier","src":"28035:1:21"}],"functionName":{"name":"gt","nativeSrc":"28026:2:21","nodeType":"YulIdentifier","src":"28026:2:21"},"nativeSrc":"28026:11:21","nodeType":"YulFunctionCall","src":"28026:11:21"},"nativeSrc":"28023:37:21","nodeType":"YulIf","src":"28023:37:21"}]},"name":"checked_sub_t_uint256","nativeSrc":"27873:194:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"27904:1:21","nodeType":"YulTypedName","src":"27904:1:21","type":""},{"name":"y","nativeSrc":"27907:1:21","nodeType":"YulTypedName","src":"27907:1:21","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"27913:4:21","nodeType":"YulTypedName","src":"27913:4:21","type":""}],"src":"27873:194:21"},{"body":{"nativeSrc":"28199:206:21","nodeType":"YulBlock","src":"28199:206:21","statements":[{"nativeSrc":"28209:26:21","nodeType":"YulAssignment","src":"28209:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"28221:9:21","nodeType":"YulIdentifier","src":"28221:9:21"},{"kind":"number","nativeSrc":"28232:2:21","nodeType":"YulLiteral","src":"28232:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"28217:3:21","nodeType":"YulIdentifier","src":"28217:3:21"},"nativeSrc":"28217:18:21","nodeType":"YulFunctionCall","src":"28217:18:21"},"variableNames":[{"name":"tail","nativeSrc":"28209:4:21","nodeType":"YulIdentifier","src":"28209:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"28289:6:21","nodeType":"YulIdentifier","src":"28289:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"28302:9:21","nodeType":"YulIdentifier","src":"28302:9:21"},{"kind":"number","nativeSrc":"28313:1:21","nodeType":"YulLiteral","src":"28313:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"28298:3:21","nodeType":"YulIdentifier","src":"28298:3:21"},"nativeSrc":"28298:17:21","nodeType":"YulFunctionCall","src":"28298:17:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"28245:43:21","nodeType":"YulIdentifier","src":"28245:43:21"},"nativeSrc":"28245:71:21","nodeType":"YulFunctionCall","src":"28245:71:21"},"nativeSrc":"28245:71:21","nodeType":"YulExpressionStatement","src":"28245:71:21"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"28370:6:21","nodeType":"YulIdentifier","src":"28370:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"28383:9:21","nodeType":"YulIdentifier","src":"28383:9:21"},{"kind":"number","nativeSrc":"28394:2:21","nodeType":"YulLiteral","src":"28394:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"28379:3:21","nodeType":"YulIdentifier","src":"28379:3:21"},"nativeSrc":"28379:18:21","nodeType":"YulFunctionCall","src":"28379:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"28326:43:21","nodeType":"YulIdentifier","src":"28326:43:21"},"nativeSrc":"28326:72:21","nodeType":"YulFunctionCall","src":"28326:72:21"},"nativeSrc":"28326:72:21","nodeType":"YulExpressionStatement","src":"28326:72:21"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"28073:332:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28163:9:21","nodeType":"YulTypedName","src":"28163:9:21","type":""},{"name":"value1","nativeSrc":"28175:6:21","nodeType":"YulTypedName","src":"28175:6:21","type":""},{"name":"value0","nativeSrc":"28183:6:21","nodeType":"YulTypedName","src":"28183:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28194:4:21","nodeType":"YulTypedName","src":"28194:4:21","type":""}],"src":"28073:332:21"},{"body":{"nativeSrc":"28455:147:21","nodeType":"YulBlock","src":"28455:147:21","statements":[{"nativeSrc":"28465:25:21","nodeType":"YulAssignment","src":"28465:25:21","value":{"arguments":[{"name":"x","nativeSrc":"28488:1:21","nodeType":"YulIdentifier","src":"28488:1:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"28470:17:21","nodeType":"YulIdentifier","src":"28470:17:21"},"nativeSrc":"28470:20:21","nodeType":"YulFunctionCall","src":"28470:20:21"},"variableNames":[{"name":"x","nativeSrc":"28465:1:21","nodeType":"YulIdentifier","src":"28465:1:21"}]},{"nativeSrc":"28499:25:21","nodeType":"YulAssignment","src":"28499:25:21","value":{"arguments":[{"name":"y","nativeSrc":"28522:1:21","nodeType":"YulIdentifier","src":"28522:1:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"28504:17:21","nodeType":"YulIdentifier","src":"28504:17:21"},"nativeSrc":"28504:20:21","nodeType":"YulFunctionCall","src":"28504:20:21"},"variableNames":[{"name":"y","nativeSrc":"28499:1:21","nodeType":"YulIdentifier","src":"28499:1:21"}]},{"nativeSrc":"28533:16:21","nodeType":"YulAssignment","src":"28533:16:21","value":{"arguments":[{"name":"x","nativeSrc":"28544:1:21","nodeType":"YulIdentifier","src":"28544:1:21"},{"name":"y","nativeSrc":"28547:1:21","nodeType":"YulIdentifier","src":"28547:1:21"}],"functionName":{"name":"add","nativeSrc":"28540:3:21","nodeType":"YulIdentifier","src":"28540:3:21"},"nativeSrc":"28540:9:21","nodeType":"YulFunctionCall","src":"28540:9:21"},"variableNames":[{"name":"sum","nativeSrc":"28533:3:21","nodeType":"YulIdentifier","src":"28533:3:21"}]},{"body":{"nativeSrc":"28573:22:21","nodeType":"YulBlock","src":"28573:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"28575:16:21","nodeType":"YulIdentifier","src":"28575:16:21"},"nativeSrc":"28575:18:21","nodeType":"YulFunctionCall","src":"28575:18:21"},"nativeSrc":"28575:18:21","nodeType":"YulExpressionStatement","src":"28575:18:21"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"28565:1:21","nodeType":"YulIdentifier","src":"28565:1:21"},{"name":"sum","nativeSrc":"28568:3:21","nodeType":"YulIdentifier","src":"28568:3:21"}],"functionName":{"name":"gt","nativeSrc":"28562:2:21","nodeType":"YulIdentifier","src":"28562:2:21"},"nativeSrc":"28562:10:21","nodeType":"YulFunctionCall","src":"28562:10:21"},"nativeSrc":"28559:36:21","nodeType":"YulIf","src":"28559:36:21"}]},"name":"checked_add_t_uint256","nativeSrc":"28411:191:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"28442:1:21","nodeType":"YulTypedName","src":"28442:1:21","type":""},{"name":"y","nativeSrc":"28445:1:21","nodeType":"YulTypedName","src":"28445:1:21","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"28451:3:21","nodeType":"YulTypedName","src":"28451:3:21","type":""}],"src":"28411:191:21"},{"body":{"nativeSrc":"28810:442:21","nodeType":"YulBlock","src":"28810:442:21","statements":[{"nativeSrc":"28820:27:21","nodeType":"YulAssignment","src":"28820:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"28832:9:21","nodeType":"YulIdentifier","src":"28832:9:21"},{"kind":"number","nativeSrc":"28843:3:21","nodeType":"YulLiteral","src":"28843:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"28828:3:21","nodeType":"YulIdentifier","src":"28828:3:21"},"nativeSrc":"28828:19:21","nodeType":"YulFunctionCall","src":"28828:19:21"},"variableNames":[{"name":"tail","nativeSrc":"28820:4:21","nodeType":"YulIdentifier","src":"28820:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"28868:9:21","nodeType":"YulIdentifier","src":"28868:9:21"},{"kind":"number","nativeSrc":"28879:1:21","nodeType":"YulLiteral","src":"28879:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"28864:3:21","nodeType":"YulIdentifier","src":"28864:3:21"},"nativeSrc":"28864:17:21","nodeType":"YulFunctionCall","src":"28864:17:21"},{"arguments":[{"name":"tail","nativeSrc":"28887:4:21","nodeType":"YulIdentifier","src":"28887:4:21"},{"name":"headStart","nativeSrc":"28893:9:21","nodeType":"YulIdentifier","src":"28893:9:21"}],"functionName":{"name":"sub","nativeSrc":"28883:3:21","nodeType":"YulIdentifier","src":"28883:3:21"},"nativeSrc":"28883:20:21","nodeType":"YulFunctionCall","src":"28883:20:21"}],"functionName":{"name":"mstore","nativeSrc":"28857:6:21","nodeType":"YulIdentifier","src":"28857:6:21"},"nativeSrc":"28857:47:21","nodeType":"YulFunctionCall","src":"28857:47:21"},"nativeSrc":"28857:47:21","nodeType":"YulExpressionStatement","src":"28857:47:21"},{"nativeSrc":"28913:86:21","nodeType":"YulAssignment","src":"28913:86:21","value":{"arguments":[{"name":"value0","nativeSrc":"28985:6:21","nodeType":"YulIdentifier","src":"28985:6:21"},{"name":"tail","nativeSrc":"28994:4:21","nodeType":"YulIdentifier","src":"28994:4:21"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"28921:63:21","nodeType":"YulIdentifier","src":"28921:63:21"},"nativeSrc":"28921:78:21","nodeType":"YulFunctionCall","src":"28921:78:21"},"variableNames":[{"name":"tail","nativeSrc":"28913:4:21","nodeType":"YulIdentifier","src":"28913:4:21"}]},{"expression":{"arguments":[{"name":"value1","nativeSrc":"29053:6:21","nodeType":"YulIdentifier","src":"29053:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"29066:9:21","nodeType":"YulIdentifier","src":"29066:9:21"},{"kind":"number","nativeSrc":"29077:2:21","nodeType":"YulLiteral","src":"29077:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29062:3:21","nodeType":"YulIdentifier","src":"29062:3:21"},"nativeSrc":"29062:18:21","nodeType":"YulFunctionCall","src":"29062:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"29009:43:21","nodeType":"YulIdentifier","src":"29009:43:21"},"nativeSrc":"29009:72:21","nodeType":"YulFunctionCall","src":"29009:72:21"},"nativeSrc":"29009:72:21","nodeType":"YulExpressionStatement","src":"29009:72:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"29135:6:21","nodeType":"YulIdentifier","src":"29135:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"29148:9:21","nodeType":"YulIdentifier","src":"29148:9:21"},{"kind":"number","nativeSrc":"29159:2:21","nodeType":"YulLiteral","src":"29159:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"29144:3:21","nodeType":"YulIdentifier","src":"29144:3:21"},"nativeSrc":"29144:18:21","nodeType":"YulFunctionCall","src":"29144:18:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"29091:43:21","nodeType":"YulIdentifier","src":"29091:43:21"},"nativeSrc":"29091:72:21","nodeType":"YulFunctionCall","src":"29091:72:21"},"nativeSrc":"29091:72:21","nodeType":"YulExpressionStatement","src":"29091:72:21"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"29217:6:21","nodeType":"YulIdentifier","src":"29217:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"29230:9:21","nodeType":"YulIdentifier","src":"29230:9:21"},{"kind":"number","nativeSrc":"29241:2:21","nodeType":"YulLiteral","src":"29241:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"29226:3:21","nodeType":"YulIdentifier","src":"29226:3:21"},"nativeSrc":"29226:18:21","nodeType":"YulFunctionCall","src":"29226:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"29173:43:21","nodeType":"YulIdentifier","src":"29173:43:21"},"nativeSrc":"29173:72:21","nodeType":"YulFunctionCall","src":"29173:72:21"},"nativeSrc":"29173:72:21","nodeType":"YulExpressionStatement","src":"29173:72:21"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_address_t_address_t_uint256__to_t_string_memory_ptr_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"28608:644:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"28758:9:21","nodeType":"YulTypedName","src":"28758:9:21","type":""},{"name":"value3","nativeSrc":"28770:6:21","nodeType":"YulTypedName","src":"28770:6:21","type":""},{"name":"value2","nativeSrc":"28778:6:21","nodeType":"YulTypedName","src":"28778:6:21","type":""},{"name":"value1","nativeSrc":"28786:6:21","nodeType":"YulTypedName","src":"28786:6:21","type":""},{"name":"value0","nativeSrc":"28794:6:21","nodeType":"YulTypedName","src":"28794:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"28805:4:21","nodeType":"YulTypedName","src":"28805:4:21","type":""}],"src":"28608:644:21"},{"body":{"nativeSrc":"29286:152:21","nodeType":"YulBlock","src":"29286:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"29303:1:21","nodeType":"YulLiteral","src":"29303:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"29306:77:21","nodeType":"YulLiteral","src":"29306:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"29296:6:21","nodeType":"YulIdentifier","src":"29296:6:21"},"nativeSrc":"29296:88:21","nodeType":"YulFunctionCall","src":"29296:88:21"},"nativeSrc":"29296:88:21","nodeType":"YulExpressionStatement","src":"29296:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"29400:1:21","nodeType":"YulLiteral","src":"29400:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"29403:4:21","nodeType":"YulLiteral","src":"29403:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"29393:6:21","nodeType":"YulIdentifier","src":"29393:6:21"},"nativeSrc":"29393:15:21","nodeType":"YulFunctionCall","src":"29393:15:21"},"nativeSrc":"29393:15:21","nodeType":"YulExpressionStatement","src":"29393:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"29424:1:21","nodeType":"YulLiteral","src":"29424:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"29427:4:21","nodeType":"YulLiteral","src":"29427:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"29417:6:21","nodeType":"YulIdentifier","src":"29417:6:21"},"nativeSrc":"29417:15:21","nodeType":"YulFunctionCall","src":"29417:15:21"},"nativeSrc":"29417:15:21","nodeType":"YulExpressionStatement","src":"29417:15:21"}]},"name":"panic_error_0x22","nativeSrc":"29258:180:21","nodeType":"YulFunctionDefinition","src":"29258:180:21"},{"body":{"nativeSrc":"29495:269:21","nodeType":"YulBlock","src":"29495:269:21","statements":[{"nativeSrc":"29505:22:21","nodeType":"YulAssignment","src":"29505:22:21","value":{"arguments":[{"name":"data","nativeSrc":"29519:4:21","nodeType":"YulIdentifier","src":"29519:4:21"},{"kind":"number","nativeSrc":"29525:1:21","nodeType":"YulLiteral","src":"29525:1:21","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"29515:3:21","nodeType":"YulIdentifier","src":"29515:3:21"},"nativeSrc":"29515:12:21","nodeType":"YulFunctionCall","src":"29515:12:21"},"variableNames":[{"name":"length","nativeSrc":"29505:6:21","nodeType":"YulIdentifier","src":"29505:6:21"}]},{"nativeSrc":"29536:38:21","nodeType":"YulVariableDeclaration","src":"29536:38:21","value":{"arguments":[{"name":"data","nativeSrc":"29566:4:21","nodeType":"YulIdentifier","src":"29566:4:21"},{"kind":"number","nativeSrc":"29572:1:21","nodeType":"YulLiteral","src":"29572:1:21","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"29562:3:21","nodeType":"YulIdentifier","src":"29562:3:21"},"nativeSrc":"29562:12:21","nodeType":"YulFunctionCall","src":"29562:12:21"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"29540:18:21","nodeType":"YulTypedName","src":"29540:18:21","type":""}]},{"body":{"nativeSrc":"29613:51:21","nodeType":"YulBlock","src":"29613:51:21","statements":[{"nativeSrc":"29627:27:21","nodeType":"YulAssignment","src":"29627:27:21","value":{"arguments":[{"name":"length","nativeSrc":"29641:6:21","nodeType":"YulIdentifier","src":"29641:6:21"},{"kind":"number","nativeSrc":"29649:4:21","nodeType":"YulLiteral","src":"29649:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"29637:3:21","nodeType":"YulIdentifier","src":"29637:3:21"},"nativeSrc":"29637:17:21","nodeType":"YulFunctionCall","src":"29637:17:21"},"variableNames":[{"name":"length","nativeSrc":"29627:6:21","nodeType":"YulIdentifier","src":"29627:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"29593:18:21","nodeType":"YulIdentifier","src":"29593:18:21"}],"functionName":{"name":"iszero","nativeSrc":"29586:6:21","nodeType":"YulIdentifier","src":"29586:6:21"},"nativeSrc":"29586:26:21","nodeType":"YulFunctionCall","src":"29586:26:21"},"nativeSrc":"29583:81:21","nodeType":"YulIf","src":"29583:81:21"},{"body":{"nativeSrc":"29716:42:21","nodeType":"YulBlock","src":"29716:42:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"29730:16:21","nodeType":"YulIdentifier","src":"29730:16:21"},"nativeSrc":"29730:18:21","nodeType":"YulFunctionCall","src":"29730:18:21"},"nativeSrc":"29730:18:21","nodeType":"YulExpressionStatement","src":"29730:18:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"29680:18:21","nodeType":"YulIdentifier","src":"29680:18:21"},{"arguments":[{"name":"length","nativeSrc":"29703:6:21","nodeType":"YulIdentifier","src":"29703:6:21"},{"kind":"number","nativeSrc":"29711:2:21","nodeType":"YulLiteral","src":"29711:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"29700:2:21","nodeType":"YulIdentifier","src":"29700:2:21"},"nativeSrc":"29700:14:21","nodeType":"YulFunctionCall","src":"29700:14:21"}],"functionName":{"name":"eq","nativeSrc":"29677:2:21","nodeType":"YulIdentifier","src":"29677:2:21"},"nativeSrc":"29677:38:21","nodeType":"YulFunctionCall","src":"29677:38:21"},"nativeSrc":"29674:84:21","nodeType":"YulIf","src":"29674:84:21"}]},"name":"extract_byte_array_length","nativeSrc":"29444:320:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"29479:4:21","nodeType":"YulTypedName","src":"29479:4:21","type":""}],"returnVariables":[{"name":"length","nativeSrc":"29488:6:21","nodeType":"YulTypedName","src":"29488:6:21","type":""}],"src":"29444:320:21"},{"body":{"nativeSrc":"29868:124:21","nodeType":"YulBlock","src":"29868:124:21","statements":[{"nativeSrc":"29878:26:21","nodeType":"YulAssignment","src":"29878:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"29890:9:21","nodeType":"YulIdentifier","src":"29890:9:21"},{"kind":"number","nativeSrc":"29901:2:21","nodeType":"YulLiteral","src":"29901:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"29886:3:21","nodeType":"YulIdentifier","src":"29886:3:21"},"nativeSrc":"29886:18:21","nodeType":"YulFunctionCall","src":"29886:18:21"},"variableNames":[{"name":"tail","nativeSrc":"29878:4:21","nodeType":"YulIdentifier","src":"29878:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"29958:6:21","nodeType":"YulIdentifier","src":"29958:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"29971:9:21","nodeType":"YulIdentifier","src":"29971:9:21"},{"kind":"number","nativeSrc":"29982:1:21","nodeType":"YulLiteral","src":"29982:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"29967:3:21","nodeType":"YulIdentifier","src":"29967:3:21"},"nativeSrc":"29967:17:21","nodeType":"YulFunctionCall","src":"29967:17:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"29914:43:21","nodeType":"YulIdentifier","src":"29914:43:21"},"nativeSrc":"29914:71:21","nodeType":"YulFunctionCall","src":"29914:71:21"},"nativeSrc":"29914:71:21","nodeType":"YulExpressionStatement","src":"29914:71:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"29770:222:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"29840:9:21","nodeType":"YulTypedName","src":"29840:9:21","type":""},{"name":"value0","nativeSrc":"29852:6:21","nodeType":"YulTypedName","src":"29852:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"29863:4:21","nodeType":"YulTypedName","src":"29863:4:21","type":""}],"src":"29770:222:21"},{"body":{"nativeSrc":"30208:454:21","nodeType":"YulBlock","src":"30208:454:21","statements":[{"nativeSrc":"30218:27:21","nodeType":"YulAssignment","src":"30218:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"30230:9:21","nodeType":"YulIdentifier","src":"30230:9:21"},{"kind":"number","nativeSrc":"30241:3:21","nodeType":"YulLiteral","src":"30241:3:21","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"30226:3:21","nodeType":"YulIdentifier","src":"30226:3:21"},"nativeSrc":"30226:19:21","nodeType":"YulFunctionCall","src":"30226:19:21"},"variableNames":[{"name":"tail","nativeSrc":"30218:4:21","nodeType":"YulIdentifier","src":"30218:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"30299:6:21","nodeType":"YulIdentifier","src":"30299:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"30312:9:21","nodeType":"YulIdentifier","src":"30312:9:21"},{"kind":"number","nativeSrc":"30323:1:21","nodeType":"YulLiteral","src":"30323:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"30308:3:21","nodeType":"YulIdentifier","src":"30308:3:21"},"nativeSrc":"30308:17:21","nodeType":"YulFunctionCall","src":"30308:17:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"30255:43:21","nodeType":"YulIdentifier","src":"30255:43:21"},"nativeSrc":"30255:71:21","nodeType":"YulFunctionCall","src":"30255:71:21"},"nativeSrc":"30255:71:21","nodeType":"YulExpressionStatement","src":"30255:71:21"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"30380:6:21","nodeType":"YulIdentifier","src":"30380:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"30393:9:21","nodeType":"YulIdentifier","src":"30393:9:21"},{"kind":"number","nativeSrc":"30404:2:21","nodeType":"YulLiteral","src":"30404:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"30389:3:21","nodeType":"YulIdentifier","src":"30389:3:21"},"nativeSrc":"30389:18:21","nodeType":"YulFunctionCall","src":"30389:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"30336:43:21","nodeType":"YulIdentifier","src":"30336:43:21"},"nativeSrc":"30336:72:21","nodeType":"YulFunctionCall","src":"30336:72:21"},"nativeSrc":"30336:72:21","nodeType":"YulExpressionStatement","src":"30336:72:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"30462:6:21","nodeType":"YulIdentifier","src":"30462:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"30475:9:21","nodeType":"YulIdentifier","src":"30475:9:21"},{"kind":"number","nativeSrc":"30486:2:21","nodeType":"YulLiteral","src":"30486:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"30471:3:21","nodeType":"YulIdentifier","src":"30471:3:21"},"nativeSrc":"30471:18:21","nodeType":"YulFunctionCall","src":"30471:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"30418:43:21","nodeType":"YulIdentifier","src":"30418:43:21"},"nativeSrc":"30418:72:21","nodeType":"YulFunctionCall","src":"30418:72:21"},"nativeSrc":"30418:72:21","nodeType":"YulExpressionStatement","src":"30418:72:21"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"30544:6:21","nodeType":"YulIdentifier","src":"30544:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"30557:9:21","nodeType":"YulIdentifier","src":"30557:9:21"},{"kind":"number","nativeSrc":"30568:2:21","nodeType":"YulLiteral","src":"30568:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"30553:3:21","nodeType":"YulIdentifier","src":"30553:3:21"},"nativeSrc":"30553:18:21","nodeType":"YulFunctionCall","src":"30553:18:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"30500:43:21","nodeType":"YulIdentifier","src":"30500:43:21"},"nativeSrc":"30500:72:21","nodeType":"YulFunctionCall","src":"30500:72:21"},"nativeSrc":"30500:72:21","nodeType":"YulExpressionStatement","src":"30500:72:21"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"30626:6:21","nodeType":"YulIdentifier","src":"30626:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"30639:9:21","nodeType":"YulIdentifier","src":"30639:9:21"},{"kind":"number","nativeSrc":"30650:3:21","nodeType":"YulLiteral","src":"30650:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"30635:3:21","nodeType":"YulIdentifier","src":"30635:3:21"},"nativeSrc":"30635:19:21","nodeType":"YulFunctionCall","src":"30635:19:21"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"30582:43:21","nodeType":"YulIdentifier","src":"30582:43:21"},"nativeSrc":"30582:73:21","nodeType":"YulFunctionCall","src":"30582:73:21"},"nativeSrc":"30582:73:21","nodeType":"YulExpressionStatement","src":"30582:73:21"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"29998:664:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"30148:9:21","nodeType":"YulTypedName","src":"30148:9:21","type":""},{"name":"value4","nativeSrc":"30160:6:21","nodeType":"YulTypedName","src":"30160:6:21","type":""},{"name":"value3","nativeSrc":"30168:6:21","nodeType":"YulTypedName","src":"30168:6:21","type":""},{"name":"value2","nativeSrc":"30176:6:21","nodeType":"YulTypedName","src":"30176:6:21","type":""},{"name":"value1","nativeSrc":"30184:6:21","nodeType":"YulTypedName","src":"30184:6:21","type":""},{"name":"value0","nativeSrc":"30192:6:21","nodeType":"YulTypedName","src":"30192:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"30203:4:21","nodeType":"YulTypedName","src":"30203:4:21","type":""}],"src":"29998:664:21"},{"body":{"nativeSrc":"30711:43:21","nodeType":"YulBlock","src":"30711:43:21","statements":[{"nativeSrc":"30721:27:21","nodeType":"YulAssignment","src":"30721:27:21","value":{"arguments":[{"name":"value","nativeSrc":"30736:5:21","nodeType":"YulIdentifier","src":"30736:5:21"},{"kind":"number","nativeSrc":"30743:4:21","nodeType":"YulLiteral","src":"30743:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"30732:3:21","nodeType":"YulIdentifier","src":"30732:3:21"},"nativeSrc":"30732:16:21","nodeType":"YulFunctionCall","src":"30732:16:21"},"variableNames":[{"name":"cleaned","nativeSrc":"30721:7:21","nodeType":"YulIdentifier","src":"30721:7:21"}]}]},"name":"cleanup_t_uint8","nativeSrc":"30668:86:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30693:5:21","nodeType":"YulTypedName","src":"30693:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"30703:7:21","nodeType":"YulTypedName","src":"30703:7:21","type":""}],"src":"30668:86:21"},{"body":{"nativeSrc":"30821:51:21","nodeType":"YulBlock","src":"30821:51:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"30838:3:21","nodeType":"YulIdentifier","src":"30838:3:21"},{"arguments":[{"name":"value","nativeSrc":"30859:5:21","nodeType":"YulIdentifier","src":"30859:5:21"}],"functionName":{"name":"cleanup_t_uint8","nativeSrc":"30843:15:21","nodeType":"YulIdentifier","src":"30843:15:21"},"nativeSrc":"30843:22:21","nodeType":"YulFunctionCall","src":"30843:22:21"}],"functionName":{"name":"mstore","nativeSrc":"30831:6:21","nodeType":"YulIdentifier","src":"30831:6:21"},"nativeSrc":"30831:35:21","nodeType":"YulFunctionCall","src":"30831:35:21"},"nativeSrc":"30831:35:21","nodeType":"YulExpressionStatement","src":"30831:35:21"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nativeSrc":"30760:112:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"30809:5:21","nodeType":"YulTypedName","src":"30809:5:21","type":""},{"name":"pos","nativeSrc":"30816:3:21","nodeType":"YulTypedName","src":"30816:3:21","type":""}],"src":"30760:112:21"},{"body":{"nativeSrc":"31056:367:21","nodeType":"YulBlock","src":"31056:367:21","statements":[{"nativeSrc":"31066:27:21","nodeType":"YulAssignment","src":"31066:27:21","value":{"arguments":[{"name":"headStart","nativeSrc":"31078:9:21","nodeType":"YulIdentifier","src":"31078:9:21"},{"kind":"number","nativeSrc":"31089:3:21","nodeType":"YulLiteral","src":"31089:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"31074:3:21","nodeType":"YulIdentifier","src":"31074:3:21"},"nativeSrc":"31074:19:21","nodeType":"YulFunctionCall","src":"31074:19:21"},"variableNames":[{"name":"tail","nativeSrc":"31066:4:21","nodeType":"YulIdentifier","src":"31066:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"31147:6:21","nodeType":"YulIdentifier","src":"31147:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"31160:9:21","nodeType":"YulIdentifier","src":"31160:9:21"},{"kind":"number","nativeSrc":"31171:1:21","nodeType":"YulLiteral","src":"31171:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"31156:3:21","nodeType":"YulIdentifier","src":"31156:3:21"},"nativeSrc":"31156:17:21","nodeType":"YulFunctionCall","src":"31156:17:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"31103:43:21","nodeType":"YulIdentifier","src":"31103:43:21"},"nativeSrc":"31103:71:21","nodeType":"YulFunctionCall","src":"31103:71:21"},"nativeSrc":"31103:71:21","nodeType":"YulExpressionStatement","src":"31103:71:21"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"31224:6:21","nodeType":"YulIdentifier","src":"31224:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"31237:9:21","nodeType":"YulIdentifier","src":"31237:9:21"},{"kind":"number","nativeSrc":"31248:2:21","nodeType":"YulLiteral","src":"31248:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"31233:3:21","nodeType":"YulIdentifier","src":"31233:3:21"},"nativeSrc":"31233:18:21","nodeType":"YulFunctionCall","src":"31233:18:21"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nativeSrc":"31184:39:21","nodeType":"YulIdentifier","src":"31184:39:21"},"nativeSrc":"31184:68:21","nodeType":"YulFunctionCall","src":"31184:68:21"},"nativeSrc":"31184:68:21","nodeType":"YulExpressionStatement","src":"31184:68:21"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"31306:6:21","nodeType":"YulIdentifier","src":"31306:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"31319:9:21","nodeType":"YulIdentifier","src":"31319:9:21"},{"kind":"number","nativeSrc":"31330:2:21","nodeType":"YulLiteral","src":"31330:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"31315:3:21","nodeType":"YulIdentifier","src":"31315:3:21"},"nativeSrc":"31315:18:21","nodeType":"YulFunctionCall","src":"31315:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"31262:43:21","nodeType":"YulIdentifier","src":"31262:43:21"},"nativeSrc":"31262:72:21","nodeType":"YulFunctionCall","src":"31262:72:21"},"nativeSrc":"31262:72:21","nodeType":"YulExpressionStatement","src":"31262:72:21"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"31388:6:21","nodeType":"YulIdentifier","src":"31388:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"31401:9:21","nodeType":"YulIdentifier","src":"31401:9:21"},{"kind":"number","nativeSrc":"31412:2:21","nodeType":"YulLiteral","src":"31412:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"31397:3:21","nodeType":"YulIdentifier","src":"31397:3:21"},"nativeSrc":"31397:18:21","nodeType":"YulFunctionCall","src":"31397:18:21"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"31344:43:21","nodeType":"YulIdentifier","src":"31344:43:21"},"nativeSrc":"31344:72:21","nodeType":"YulFunctionCall","src":"31344:72:21"},"nativeSrc":"31344:72:21","nodeType":"YulExpressionStatement","src":"31344:72:21"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"30878:545:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"31004:9:21","nodeType":"YulTypedName","src":"31004:9:21","type":""},{"name":"value3","nativeSrc":"31016:6:21","nodeType":"YulTypedName","src":"31016:6:21","type":""},{"name":"value2","nativeSrc":"31024:6:21","nodeType":"YulTypedName","src":"31024:6:21","type":""},{"name":"value1","nativeSrc":"31032:6:21","nodeType":"YulTypedName","src":"31032:6:21","type":""},{"name":"value0","nativeSrc":"31040:6:21","nodeType":"YulTypedName","src":"31040:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"31051:4:21","nodeType":"YulTypedName","src":"31051:4:21","type":""}],"src":"30878:545:21"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    // struct Payfluence.AirdropMessage\n    function abi_decode_t_struct$_AirdropMessage_$3185_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0xa0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0xa0)\n\n        {\n            // airdropId\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x00), abi_decode_t_string_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // token\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // owner\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // recipient\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // amountClaimable\n\n            let offset := 128\n\n            mstore(add(value, 0x80), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptrt_struct$_AirdropMessage_$3185_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_struct$_AirdropMessage_$3185_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes1(value) -> cleaned {\n        cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes1_to_t_bytes1_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes1(value))\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_bytes1_to_t_bytes1_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value6, value7 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_address_t_address_t_address_t_uint256__to_t_bytes32_t_bytes32_t_address_t_address_t_address_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_address_to_t_address_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_AssetType_$3578(value) {\n        if iszero(lt(value, 5)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_AssetType_$3578(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_AssetType_$3578(value)\n    }\n\n    function convert_t_enum$_AssetType_$3578_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_AssetType_$3578(value)\n    }\n\n    function abi_encode_t_enum$_AssetType_$3578_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_AssetType_$3578_to_t_uint8(value))\n    }\n\n    function cleanup_t_rational_0_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))\n    }\n\n    function abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_0_by_1_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_enum$_AssetType_$3578_t_address_t_rational_0_by_1_t_uint256__to_t_string_memory_ptr_t_uint8_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_enum$_AssetType_$3578_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_address_t_address_t_uint256__to_t_string_memory_ptr_t_address_t_address_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1686":[{"length":32,"start":6386}],"1688":[{"length":32,"start":6345}],"1690":[{"length":32,"start":6259}],"1692":[{"length":32,"start":7104}],"1694":[{"length":32,"start":7137}],"1697":[{"length":32,"start":5520}],"1700":[{"length":32,"start":5579}]},"linkReferences":{},"object":"60806040526004361061014f5760003560e01c80638da5cb5b116100b6578063ea13689f1161006f578063ea13689f1461046c578063eb47e011146104a9578063f23a6e61146104e6578063f2fde38b14610523578063fe1fddaa1461054c578063ffb1500e1461057557610156565b80638da5cb5b1461037d578063bc197c81146103a8578063c4385d76146103e5578063c8b5773d1461040e578063c9c61eab14610437578063e30c39781461044157610156565b80634f18868a116101085780634f18868a1461028f578063715018a6146102b857806379ba5097146102cf57806380c4020c146102e657806384b0196e1461030f57806389f4b3171461034057610156565b806301ffc9a71461015b5780631090bafa14610198578063150b7a02146101d55780632394c348146102125780632c1e816d1461023b5780633408e4701461026457610156565b3661015657005b600080fd5b34801561016757600080fd5b50610182600480360381019061017d9190611de1565b6105b2565b60405161018f9190611e29565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba9190612171565b6106ec565b6040516101cc9190611e29565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190612249565b610702565b60405161020991906122e0565b60405180910390f35b34801561021e57600080fd5b50610239600480360381019061023491906122fb565b610717565b005b34801561024757600080fd5b50610262600480360381019061025d9190612357565b610780565b005b34801561027057600080fd5b506102796107cc565b6040516102869190612393565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b191906123ae565b6107d4565b005b3480156102c457600080fd5b506102cd610914565b005b3480156102db57600080fd5b506102e4610928565b005b3480156102f257600080fd5b5061030d60048036038101906103089190612171565b6109b7565b005b34801561031b57600080fd5b50610324610afd565b60405161033797969594939291906125d1565b60405180910390f35b34801561034c57600080fd5b50610367600480360381019061036291906122fb565b610ba7565b6040516103749190612393565b60405180910390f35b34801561038957600080fd5b50610392610c10565b60405161039f9190612655565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca91906126c6565b610c39565b6040516103dc91906122e0565b60405180910390f35b3480156103f157600080fd5b5061040c600480360381019061040791906123ae565b610c51565b005b34801561041a57600080fd5b5061043560048036038101906104309190612357565b610f49565b005b61043f610ffe565b005b34801561044d57600080fd5b50610456611000565b6040516104639190612655565b60405180910390f35b34801561047857600080fd5b50610493600480360381019061048e91906127a2565b61102a565b6040516104a09190612655565b60405180910390f35b3480156104b557600080fd5b506104d060048036038101906104cb91906122fb565b611073565b6040516104dd9190612393565b60405180910390f35b3480156104f257600080fd5b5061050d600480360381019061050891906127eb565b6110ae565b60405161051a91906122e0565b60405180910390f35b34801561052f57600080fd5b5061054a60048036038101906105459190612357565b6110c4565b005b34801561055857600080fd5b50610573600480360381019061056e9190612885565b611171565b005b34801561058157600080fd5b5061059c600480360381019061059791906127a2565b61118b565b6040516105a99190612393565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067d57507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106e557507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60006106f883836111bf565b6001905092915050565b600063150b7a0260e01b905095945050505050565b61071f6112d2565b806009836040516107309190612944565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6107886112d2565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600046905090565b6107dc611359565b83600073ffffffffffffffffffffffffffffffffffffffff166009826040516108059190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156108c257506009816040516108639190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156108f9576040517f08062d7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109058585858561139d565b5061090e611544565b50505050565b61091c6112d2565b610926600061154e565b565b600061093261157f565b90508073ffffffffffffffffffffffffffffffffffffffff16610953611000565b73ffffffffffffffffffffffffffffffffffffffff16146109ab57806040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016109a29190612655565b60405180910390fd5b6109b48161154e565b50565b6109bf611359565b6109c982826111bf565b8060800151600a82600001516040516109e29190612944565b90815260200160405180910390206000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610a69576040517fe4ca4c0b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060800151600a8260000151604051610a829190612944565b90815260200160405180910390206000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610af1816000015182606001518360200151846080015161139d565b610af9611544565b5050565b600060608060008060006060610b11611587565b610b196115c2565b46306000801b600067ffffffffffffffff811115610b3a57610b39611e5f565b5b604051908082528060200260200182016040528015610b685781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b6000600683604051610bb99190612944565b908152602001604051809103902060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600063bc197c8160e01b905098975050505050505050565b610c59611359565b83600073ffffffffffffffffffffffffffffffffffffffff16600982604051610c829190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610d3f5750600981604051610ce09190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610d76576040517f08062d7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ddc576040517fcdf1f8f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600987604051610e049190612944565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610eac5784600987604051610e5f9190612944565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd8630866040518463ffffffff1660e01b8152600401610ee99392919061295b565b6020604051808303816000875af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906129be565b50610f39868686866115fd565b5050610f43611544565b50505050565b610f516112d2565b600047905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610f7c90612a1c565b60006040518083038185875af1925050503d8060008114610fb9576040519150601f19603f3d011682016040523d82523d6000602084013e610fbe565b606091505b5050905080610ff9576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6009818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a82805160208101820180518482526020830160208501208183528095505050505050602052806000526040600020600091509150505481565b600063f23a6e6160e01b90509695505050505050565b6110cc6112d2565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1661112c610c10565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6111796112d2565b6111858385848461139d565b50505050565b6006818051602081018201805184825260208301602085012081835280955050505050506000915090508060000154905081565b60006112357fa3b140137dde1ec8f85da0fadac4c5d6c5410186ca811cbe1e3d5fb737dfb2f6836000015180519060200120846020015185604001518660600151876080015160405160200161121a96959493929190612a31565b604051602081830303815290604052805190602001206116b5565b9050600061124382856116cf565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112cc576040517f815e1d6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6112da61157f565b73ffffffffffffffffffffffffffffffffffffffff166112f8610c10565b73ffffffffffffffffffffffffffffffffffffffff16146113575761131b61157f565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161134e9190612655565b60405180910390fd5b565b6002805403611394576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028081905550565b806006856040516113ae9190612944565b908152602001604051809103902060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561144a57836002836000846040517f3ff3e6f2000000000000000000000000000000000000000000000000000000008152600401611441959493929190612b4e565b60405180910390fd5b8060068560405161145b9190612944565b908152602001604051809103902060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b89190612bd7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016114fa929190612c0b565b6020604051808303816000875af1158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d91906129be565b5050505050565b6001600281905550565b600160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561157c816116fb565b50565b600033905090565b60606115bd60037f00000000000000000000000000000000000000000000000000000000000000006117bf90919063ffffffff16565b905090565b60606115f860047f00000000000000000000000000000000000000000000000000000000000000006117bf90919063ffffffff16565b905090565b8060068560405161160e9190612944565b908152602001604051809103902060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461166b9190612c34565b925050819055507f80b0529195f12df0318651d4b36ffc81b7b3cb429033916c20d71e8d2e219ae3848484846040516116a79493929190612c68565b60405180910390a150505050565b60006116c86116c261186f565b83611926565b9050919050565b6000806000806116df8686611967565b9250925092506116ef82826119c3565b82935050505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060ff60001b83146117dc576117d583611b27565b9050611869565b8180546117e890612ce3565b80601f016020809104026020016040519081016040528092919081815260200182805461181490612ce3565b80156118615780601f1061183657610100808354040283529160200191611861565b820191906000526020600020905b81548152906001019060200180831161184457829003601f168201915b505050505090505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480156118eb57507f000000000000000000000000000000000000000000000000000000000000000046145b15611918577f00000000000000000000000000000000000000000000000000000000000000009050611923565b611920611b9b565b90505b90565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b600080600060418451036119ac5760008060006020870151925060408701519150606087015160001a905061199e88828585611c31565b9550955095505050506119bc565b60006002855160001b9250925092505b9250925092565b600060038111156119d7576119d6612a92565b5b8260038111156119ea576119e9612a92565b5b0315611b235760016003811115611a0457611a03612a92565b5b826003811115611a1757611a16612a92565b5b03611a4e576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115611a6257611a61612a92565b5b826003811115611a7557611a74612a92565b5b03611aba578060001c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611ab19190612393565b60405180910390fd5b600380811115611acd57611acc612a92565b5b826003811115611ae057611adf612a92565b5b03611b2257806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611b199190612d14565b60405180910390fd5b5b5050565b60606000611b3483611d25565b90506000602067ffffffffffffffff811115611b5357611b52611e5f565b5b6040519080825280601f01601f191660200182016040528015611b855781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001611c16959493929190612d2f565b60405160208183030381529060405280519060200120905090565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c1115611c71576000600385925092509250611d1b565b600060018888888860405160008152602001604052604051611c969493929190612d9e565b6020604051602081039080840390855afa158015611cb8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d0c57600060016000801b93509350935050611d1b565b8060008060001b935093509350505b9450945094915050565b60008060ff8360001c169050601f811115611d6c576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dbe81611d89565b8114611dc957600080fd5b50565b600081359050611ddb81611db5565b92915050565b600060208284031215611df757611df6611d7f565b5b6000611e0584828501611dcc565b91505092915050565b60008115159050919050565b611e2381611e0e565b82525050565b6000602082019050611e3e6000830184611e1a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e9782611e4e565b810181811067ffffffffffffffff82111715611eb657611eb5611e5f565b5b80604052505050565b6000611ec9611d75565b9050611ed58282611e8e565b919050565b600067ffffffffffffffff821115611ef557611ef4611e5f565b5b611efe82611e4e565b9050602081019050919050565b82818337600083830152505050565b6000611f2d611f2884611eda565b611ebf565b905082815260208101848484011115611f4957611f48611e49565b5b611f54848285611f0b565b509392505050565b600082601f830112611f7157611f70611e44565b5b8135611f81848260208601611f1a565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115611faf57611fae611e5f565b5b611fb882611e4e565b9050602081019050919050565b6000611fd8611fd384611f94565b611ebf565b905082815260208101848484011115611ff457611ff3611e49565b5b611fff848285611f0b565b509392505050565b600082601f83011261201c5761201b611e44565b5b813561202c848260208601611fc5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061206082612035565b9050919050565b61207081612055565b811461207b57600080fd5b50565b60008135905061208d81612067565b92915050565b6000819050919050565b6120a681612093565b81146120b157600080fd5b50565b6000813590506120c38161209d565b92915050565b600060a082840312156120df576120de611f8a565b5b6120e960a0611ebf565b9050600082013567ffffffffffffffff81111561210957612108611f8f565b5b61211584828501612007565b60008301525060206121298482850161207e565b602083015250604061213d8482850161207e565b60408301525060606121518482850161207e565b6060830152506080612165848285016120b4565b60808301525092915050565b6000806040838503121561218857612187611d7f565b5b600083013567ffffffffffffffff8111156121a6576121a5611d84565b5b6121b285828601611f5c565b925050602083013567ffffffffffffffff8111156121d3576121d2611d84565b5b6121df858286016120c9565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261220957612208611e44565b5b8235905067ffffffffffffffff811115612226576122256121e9565b5b602083019150836001820283011115612242576122416121ee565b5b9250929050565b60008060008060006080868803121561226557612264611d7f565b5b60006122738882890161207e565b95505060206122848882890161207e565b9450506040612295888289016120b4565b935050606086013567ffffffffffffffff8111156122b6576122b5611d84565b5b6122c2888289016121f3565b92509250509295509295909350565b6122da81611d89565b82525050565b60006020820190506122f560008301846122d1565b92915050565b6000806040838503121561231257612311611d7f565b5b600083013567ffffffffffffffff8111156123305761232f611d84565b5b61233c85828601612007565b925050602061234d8582860161207e565b9150509250929050565b60006020828403121561236d5761236c611d7f565b5b600061237b8482850161207e565b91505092915050565b61238d81612093565b82525050565b60006020820190506123a86000830184612384565b92915050565b600080600080608085870312156123c8576123c7611d7f565b5b600085013567ffffffffffffffff8111156123e6576123e5611d84565b5b6123f287828801612007565b94505060206124038782880161207e565b93505060406124148782880161207e565b9250506060612425878288016120b4565b91505092959194509250565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61246681612431565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124a657808201518184015260208101905061248b565b60008484015250505050565b60006124bd8261246c565b6124c78185612477565b93506124d7818560208601612488565b6124e081611e4e565b840191505092915050565b6124f481612055565b82525050565b6000819050919050565b61250d816124fa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61254881612093565b82525050565b600061255a838361253f565b60208301905092915050565b6000602082019050919050565b600061257e82612513565b612588818561251e565b93506125938361252f565b8060005b838110156125c45781516125ab888261254e565b97506125b683612566565b925050600181019050612597565b5085935050505092915050565b600060e0820190506125e6600083018a61245d565b81810360208301526125f881896124b2565b9050818103604083015261260c81886124b2565b905061261b6060830187612384565b61262860808301866124eb565b61263560a0830185612504565b81810360c08301526126478184612573565b905098975050505050505050565b600060208201905061266a60008301846124eb565b92915050565b60008083601f84011261268657612685611e44565b5b8235905067ffffffffffffffff8111156126a3576126a26121e9565b5b6020830191508360208202830111156126bf576126be6121ee565b5b9250929050565b60008060008060008060008060a0898b0312156126e6576126e5611d7f565b5b60006126f48b828c0161207e565b98505060206127058b828c0161207e565b975050604089013567ffffffffffffffff81111561272657612725611d84565b5b6127328b828c01612670565b9650965050606089013567ffffffffffffffff81111561275557612754611d84565b5b6127618b828c01612670565b9450945050608089013567ffffffffffffffff81111561278457612783611d84565b5b6127908b828c016121f3565b92509250509295985092959890939650565b6000602082840312156127b8576127b7611d7f565b5b600082013567ffffffffffffffff8111156127d6576127d5611d84565b5b6127e284828501612007565b91505092915050565b60008060008060008060a0878903121561280857612807611d7f565b5b600061281689828a0161207e565b965050602061282789828a0161207e565b955050604061283889828a016120b4565b945050606061284989828a016120b4565b935050608087013567ffffffffffffffff81111561286a57612869611d84565b5b61287689828a016121f3565b92509250509295509295509295565b6000806000806080858703121561289f5761289e611d7f565b5b60006128ad8782880161207e565b945050602085013567ffffffffffffffff8111156128ce576128cd611d84565b5b6128da87828801612007565b93505060406128eb8782880161207e565b92505060606128fc878288016120b4565b91505092959194509250565b600081905092915050565b600061291e8261246c565b6129288185612908565b9350612938818560208601612488565b80840191505092915050565b60006129508284612913565b915081905092915050565b600060608201905061297060008301866124eb565b61297d60208301856124eb565b61298a6040830184612384565b949350505050565b61299b81611e0e565b81146129a657600080fd5b50565b6000815190506129b881612992565b92915050565b6000602082840312156129d4576129d3611d7f565b5b60006129e2848285016129a9565b91505092915050565b600081905092915050565b50565b6000612a066000836129eb565b9150612a11826129f6565b600082019050919050565b6000612a27826129f9565b9150819050919050565b600060c082019050612a466000830189612504565b612a536020830188612504565b612a6060408301876124eb565b612a6d60608301866124eb565b612a7a60808301856124eb565b612a8760a0830184612384565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110612ad257612ad1612a92565b5b50565b6000819050612ae382612ac1565b919050565b6000612af382612ad5565b9050919050565b612b0381612ae8565b82525050565b6000819050919050565b6000819050919050565b6000612b38612b33612b2e84612b09565b612b13565b612093565b9050919050565b612b4881612b1d565b82525050565b600060a0820190508181036000830152612b6881886124b2565b9050612b776020830187612afa565b612b8460408301866124eb565b612b916060830185612b3f565b612b9e6080830184612384565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612be282612093565b9150612bed83612093565b9250828203905081811115612c0557612c04612ba8565b5b92915050565b6000604082019050612c2060008301856124eb565b612c2d6020830184612384565b9392505050565b6000612c3f82612093565b9150612c4a83612093565b9250828201905080821115612c6257612c61612ba8565b5b92915050565b60006080820190508181036000830152612c8281876124b2565b9050612c9160208301866124eb565b612c9e60408301856124eb565b612cab6060830184612384565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612cfb57607f821691505b602082108103612d0e57612d0d612cb4565b5b50919050565b6000602082019050612d296000830184612504565b92915050565b600060a082019050612d446000830188612504565b612d516020830187612504565b612d5e6040830186612504565b612d6b6060830185612384565b612d7860808301846124eb565b9695505050505050565b600060ff82169050919050565b612d9881612d82565b82525050565b6000608082019050612db36000830187612504565b612dc06020830186612d8f565b612dcd6040830185612504565b612dda6060830184612504565b9594505050505056fea264697066735822122006a78e87c396c9486ef43fd0da495c3c4ed4ca9b8e2c03db9501f17f1d94a53a64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xEA13689F GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xEA13689F EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0xEB47E011 EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x523 JUMPI DUP1 PUSH4 0xFE1FDDAA EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0xFFB1500E EQ PUSH2 0x575 JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3A8 JUMPI DUP1 PUSH4 0xC4385D76 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xC8B5773D EQ PUSH2 0x40E JUMPI DUP1 PUSH4 0xC9C61EAB EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x441 JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x4F18868A GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x4F18868A EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x80C4020C EQ PUSH2 0x2E6 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x89F4B317 EQ PUSH2 0x340 JUMPI PUSH2 0x156 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15B JUMPI DUP1 PUSH4 0x1090BAFA EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x2394C348 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x2C1E816D EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x3408E470 EQ PUSH2 0x264 JUMPI PUSH2 0x156 JUMP JUMPDEST CALLDATASIZE PUSH2 0x156 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x167 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0x1DE1 JUMP JUMPDEST PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x2171 JUMP JUMPDEST PUSH2 0x6EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CC SWAP2 SWAP1 PUSH2 0x1E29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x2249 JUMP JUMPDEST PUSH2 0x702 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x209 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x239 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x234 SWAP2 SWAP1 PUSH2 0x22FB JUMP JUMPDEST PUSH2 0x717 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x262 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25D SWAP2 SWAP1 PUSH2 0x2357 JUMP JUMPDEST PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x279 PUSH2 0x7CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B1 SWAP2 SWAP1 PUSH2 0x23AE JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0x914 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E4 PUSH2 0x928 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x308 SWAP2 SWAP1 PUSH2 0x2171 JUMP JUMPDEST PUSH2 0x9B7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x324 PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x337 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x22FB JUMP JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x374 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x392 PUSH2 0xC10 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CA SWAP2 SWAP1 PUSH2 0x26C6 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DC SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x23AE JUMP JUMPDEST PUSH2 0xC51 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x435 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x430 SWAP2 SWAP1 PUSH2 0x2357 JUMP JUMPDEST PUSH2 0xF49 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x43F PUSH2 0xFFE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x456 PUSH2 0x1000 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x493 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x48E SWAP2 SWAP1 PUSH2 0x27A2 JUMP JUMPDEST PUSH2 0x102A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4CB SWAP2 SWAP1 PUSH2 0x22FB JUMP JUMPDEST PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4DD SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x508 SWAP2 SWAP1 PUSH2 0x27EB JUMP JUMPDEST PUSH2 0x10AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x51A SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x545 SWAP2 SWAP1 PUSH2 0x2357 JUMP JUMPDEST PUSH2 0x10C4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x558 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x573 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x56E SWAP2 SWAP1 PUSH2 0x2885 JUMP JUMPDEST PUSH2 0x1171 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x597 SWAP2 SWAP1 PUSH2 0x27A2 JUMP JUMPDEST PUSH2 0x118B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A9 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x67D JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x6E5 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6F8 DUP4 DUP4 PUSH2 0x11BF JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x71F PUSH2 0x12D2 JUMP JUMPDEST DUP1 PUSH1 0x9 DUP4 PUSH1 0x40 MLOAD PUSH2 0x730 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x788 PUSH2 0x12D2 JUMP JUMPDEST DUP1 PUSH1 0x8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7DC PUSH2 0x1359 JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 DUP3 PUSH1 0x40 MLOAD PUSH2 0x805 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x8C2 JUMPI POP PUSH1 0x9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x863 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x8F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8062D7400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x905 DUP6 DUP6 DUP6 DUP6 PUSH2 0x139D JUMP JUMPDEST POP PUSH2 0x90E PUSH2 0x1544 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x91C PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x926 PUSH1 0x0 PUSH2 0x154E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x932 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x953 PUSH2 0x1000 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9AB JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A2 SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B4 DUP2 PUSH2 0x154E JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x9BF PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x9C9 DUP3 DUP3 PUSH2 0x11BF JUMP JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD PUSH1 0xA DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x9E2 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0xA69 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE4CA4C0B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x80 ADD MLOAD PUSH1 0xA DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xA82 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xAF1 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x139D JUMP JUMPDEST PUSH2 0xAF9 PUSH2 0x1544 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0xB11 PUSH2 0x1587 JUMP JUMPDEST PUSH2 0xB19 PUSH2 0x15C2 JUMP JUMPDEST CHAINID ADDRESS PUSH1 0x0 DUP1 SHL PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB3A JUMPI PUSH2 0xB39 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB68 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 DUP4 PUSH1 0x40 MLOAD PUSH2 0xBB9 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC59 PUSH2 0x1359 JUMP JUMPDEST DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 DUP3 PUSH1 0x40 MLOAD PUSH2 0xC82 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xD3F JUMPI POP PUSH1 0x9 DUP2 PUSH1 0x40 MLOAD PUSH2 0xCE0 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xD76 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8062D7400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDDC JUMPI PUSH1 0x40 MLOAD PUSH32 0xCDF1F8F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE04 SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEAC JUMPI DUP5 PUSH1 0x9 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE5F SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 ADDRESS DUP7 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEE9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x295B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF2C SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST POP PUSH2 0xF39 DUP7 DUP7 DUP7 DUP7 PUSH2 0x15FD JUMP JUMPDEST POP POP PUSH2 0xF43 PUSH2 0x1544 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xF51 PUSH2 0x12D2 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xF7C SWAP1 PUSH2 0x2A1C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xFB9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xFF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x90B8EC1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xA DUP3 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x10CC PUSH2 0x12D2 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x112C PUSH2 0xC10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0x1179 PUSH2 0x12D2 JUMP JUMPDEST PUSH2 0x1185 DUP4 DUP6 DUP5 DUP5 PUSH2 0x139D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1235 PUSH32 0xA3B140137DDE1EC8F85DA0FADAC4C5D6C5410186CA811CBE1E3D5FB737DFB2F6 DUP4 PUSH1 0x0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x121A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x16B5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1243 DUP3 DUP6 PUSH2 0x16CF JUMP JUMPDEST SWAP1 POP PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x815E1D6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x12DA PUSH2 0x157F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12F8 PUSH2 0xC10 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1357 JUMPI PUSH2 0x131B PUSH2 0x157F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x134E SWAP2 SWAP1 PUSH2 0x2655 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD SUB PUSH2 0x1394 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST DUP1 PUSH1 0x6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x13AE SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x144A JUMPI DUP4 PUSH1 0x2 DUP4 PUSH1 0x0 DUP5 PUSH1 0x40 MLOAD PUSH32 0x3FF3E6F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1441 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x145B SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x14B8 SWAP2 SWAP1 PUSH2 0x2BD7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP5 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14FA SWAP3 SWAP2 SWAP1 PUSH2 0x2C0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1519 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x153D SWAP2 SWAP1 PUSH2 0x29BE JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH2 0x157C DUP2 PUSH2 0x16FB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15BD PUSH1 0x3 PUSH32 0x0 PUSH2 0x17BF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15F8 PUSH1 0x4 PUSH32 0x0 PUSH2 0x17BF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x160E SWAP2 SWAP1 PUSH2 0x2944 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x166B SWAP2 SWAP1 PUSH2 0x2C34 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 0x80B0529195F12DF0318651D4B36FFC81B7B3CB429033916C20D71E8D2E219AE3 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x16A7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16C8 PUSH2 0x16C2 PUSH2 0x186F JUMP JUMPDEST DUP4 PUSH2 0x1926 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x16DF DUP7 DUP7 PUSH2 0x1967 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x16EF DUP3 DUP3 PUSH2 0x19C3 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH1 0x0 SHL DUP4 EQ PUSH2 0x17DC JUMPI PUSH2 0x17D5 DUP4 PUSH2 0x1B27 JUMP JUMPDEST SWAP1 POP PUSH2 0x1869 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x17E8 SWAP1 PUSH2 0x2CE3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1814 SWAP1 PUSH2 0x2CE3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1861 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1836 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1861 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1844 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x18EB JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x1918 JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0x1923 JUMP JUMPDEST PUSH2 0x1920 PUSH2 0x1B9B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x41 DUP5 MLOAD SUB PUSH2 0x19AC JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP8 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0x199E DUP9 DUP3 DUP6 DUP6 PUSH2 0x1C31 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP PUSH2 0x19BC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP6 MLOAD PUSH1 0x0 SHL SWAP3 POP SWAP3 POP SWAP3 POP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x19D7 JUMPI PUSH2 0x19D6 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1B23 JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A04 JUMPI PUSH2 0x1A03 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A17 JUMPI PUSH2 0x1A16 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1A4E JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A62 JUMPI PUSH2 0x1A61 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1A75 JUMPI PUSH2 0x1A74 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1ABA JUMPI DUP1 PUSH1 0x0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AB1 SWAP2 SWAP1 PUSH2 0x2393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x1ACD JUMPI PUSH2 0x1ACC PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1AE0 JUMPI PUSH2 0x1ADF PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1B22 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B19 SWAP2 SWAP1 PUSH2 0x2D14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B34 DUP4 PUSH2 0x1D25 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B53 JUMPI PUSH2 0x1B52 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B85 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C16 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH1 0x0 SHR GT ISZERO PUSH2 0x1C71 JUMPI PUSH1 0x0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1C96 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CB8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1D0C JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x1D1B JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xFF DUP4 PUSH1 0x0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1D6C JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DBE DUP2 PUSH2 0x1D89 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1DDB DUP2 PUSH2 0x1DB5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DF7 JUMPI PUSH2 0x1DF6 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E05 DUP5 DUP3 DUP6 ADD PUSH2 0x1DCC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E23 DUP2 PUSH2 0x1E0E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1E3E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1E1A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E97 DUP3 PUSH2 0x1E4E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1EB6 JUMPI PUSH2 0x1EB5 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EC9 PUSH2 0x1D75 JUMP JUMPDEST SWAP1 POP PUSH2 0x1ED5 DUP3 DUP3 PUSH2 0x1E8E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1EF5 JUMPI PUSH2 0x1EF4 PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH2 0x1EFE DUP3 PUSH2 0x1E4E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2D PUSH2 0x1F28 DUP5 PUSH2 0x1EDA JUMP JUMPDEST PUSH2 0x1EBF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1F49 JUMPI PUSH2 0x1F48 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH2 0x1F54 DUP5 DUP3 DUP6 PUSH2 0x1F0B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F71 JUMPI PUSH2 0x1F70 PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F81 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1F1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FAF JUMPI PUSH2 0x1FAE PUSH2 0x1E5F JUMP JUMPDEST JUMPDEST PUSH2 0x1FB8 DUP3 PUSH2 0x1E4E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FD8 PUSH2 0x1FD3 DUP5 PUSH2 0x1F94 JUMP JUMPDEST PUSH2 0x1EBF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1FF4 JUMPI PUSH2 0x1FF3 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH2 0x1FFF DUP5 DUP3 DUP6 PUSH2 0x1F0B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x201C JUMPI PUSH2 0x201B PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x202C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1FC5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2060 DUP3 PUSH2 0x2035 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2070 DUP2 PUSH2 0x2055 JUMP JUMPDEST DUP2 EQ PUSH2 0x207B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x208D DUP2 PUSH2 0x2067 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20A6 DUP2 PUSH2 0x2093 JUMP JUMPDEST DUP2 EQ PUSH2 0x20B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20C3 DUP2 PUSH2 0x209D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20DF JUMPI PUSH2 0x20DE PUSH2 0x1F8A JUMP JUMPDEST JUMPDEST PUSH2 0x20E9 PUSH1 0xA0 PUSH2 0x1EBF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2109 JUMPI PUSH2 0x2108 PUSH2 0x1F8F JUMP JUMPDEST JUMPDEST PUSH2 0x2115 DUP5 DUP3 DUP6 ADD PUSH2 0x2007 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2129 DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x213D DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x2151 DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x2165 DUP5 DUP3 DUP6 ADD PUSH2 0x20B4 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2188 JUMPI PUSH2 0x2187 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21A6 JUMPI PUSH2 0x21A5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x21B2 DUP6 DUP3 DUP7 ADD PUSH2 0x1F5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21D3 JUMPI PUSH2 0x21D2 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x21DF DUP6 DUP3 DUP7 ADD PUSH2 0x20C9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2209 JUMPI PUSH2 0x2208 PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2226 JUMPI PUSH2 0x2225 PUSH2 0x21E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2242 JUMPI PUSH2 0x2241 PUSH2 0x21EE JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2265 JUMPI PUSH2 0x2264 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2273 DUP9 DUP3 DUP10 ADD PUSH2 0x207E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2284 DUP9 DUP3 DUP10 ADD PUSH2 0x207E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2295 DUP9 DUP3 DUP10 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22B6 JUMPI PUSH2 0x22B5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x22C2 DUP9 DUP3 DUP10 ADD PUSH2 0x21F3 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x22DA DUP2 PUSH2 0x1D89 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x22F5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22D1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2312 JUMPI PUSH2 0x2311 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2330 JUMPI PUSH2 0x232F PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x233C DUP6 DUP3 DUP7 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x234D DUP6 DUP3 DUP7 ADD PUSH2 0x207E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x236D JUMPI PUSH2 0x236C PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x237B DUP5 DUP3 DUP6 ADD PUSH2 0x207E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x238D DUP2 PUSH2 0x2093 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x23A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x23C8 JUMPI PUSH2 0x23C7 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23E6 JUMPI PUSH2 0x23E5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x23F2 DUP8 DUP3 DUP9 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2403 DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2414 DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x2425 DUP8 DUP3 DUP9 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2466 DUP2 PUSH2 0x2431 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x24A6 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x248B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24BD DUP3 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x24C7 DUP2 DUP6 PUSH2 0x2477 JUMP JUMPDEST SWAP4 POP PUSH2 0x24D7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2488 JUMP JUMPDEST PUSH2 0x24E0 DUP2 PUSH2 0x1E4E JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x24F4 DUP2 PUSH2 0x2055 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x250D DUP2 PUSH2 0x24FA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2548 DUP2 PUSH2 0x2093 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x255A DUP4 DUP4 PUSH2 0x253F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x257E DUP3 PUSH2 0x2513 JUMP JUMPDEST PUSH2 0x2588 DUP2 DUP6 PUSH2 0x251E JUMP JUMPDEST SWAP4 POP PUSH2 0x2593 DUP4 PUSH2 0x252F JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25C4 JUMPI DUP2 MLOAD PUSH2 0x25AB DUP9 DUP3 PUSH2 0x254E JUMP JUMPDEST SWAP8 POP PUSH2 0x25B6 DUP4 PUSH2 0x2566 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2597 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x25E6 PUSH1 0x0 DUP4 ADD DUP11 PUSH2 0x245D JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x25F8 DUP2 DUP10 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x260C DUP2 DUP9 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x261B PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x2628 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2635 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2504 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x2647 DUP2 DUP5 PUSH2 0x2573 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x266A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x24EB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2686 JUMPI PUSH2 0x2685 PUSH2 0x1E44 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A3 JUMPI PUSH2 0x26A2 PUSH2 0x21E9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x26BF JUMPI PUSH2 0x26BE PUSH2 0x21EE JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x26E6 JUMPI PUSH2 0x26E5 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26F4 DUP12 DUP3 DUP13 ADD PUSH2 0x207E JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x2705 DUP12 DUP3 DUP13 ADD PUSH2 0x207E JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2726 JUMPI PUSH2 0x2725 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2732 DUP12 DUP3 DUP13 ADD PUSH2 0x2670 JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2755 JUMPI PUSH2 0x2754 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2761 DUP12 DUP3 DUP13 ADD PUSH2 0x2670 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2784 JUMPI PUSH2 0x2783 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2790 DUP12 DUP3 DUP13 ADD PUSH2 0x21F3 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27B8 JUMPI PUSH2 0x27B7 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27D6 JUMPI PUSH2 0x27D5 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x27E2 DUP5 DUP3 DUP6 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2808 JUMPI PUSH2 0x2807 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2816 DUP10 DUP3 DUP11 ADD PUSH2 0x207E JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x2827 DUP10 DUP3 DUP11 ADD PUSH2 0x207E JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x2838 DUP10 DUP3 DUP11 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x2849 DUP10 DUP3 DUP11 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x286A JUMPI PUSH2 0x2869 PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x2876 DUP10 DUP3 DUP11 ADD PUSH2 0x21F3 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x289F JUMPI PUSH2 0x289E PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28AD DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28CE JUMPI PUSH2 0x28CD PUSH2 0x1D84 JUMP JUMPDEST JUMPDEST PUSH2 0x28DA DUP8 DUP3 DUP9 ADD PUSH2 0x2007 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x28EB DUP8 DUP3 DUP9 ADD PUSH2 0x207E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x28FC DUP8 DUP3 DUP9 ADD PUSH2 0x20B4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x291E DUP3 PUSH2 0x246C JUMP JUMPDEST PUSH2 0x2928 DUP2 DUP6 PUSH2 0x2908 JUMP JUMPDEST SWAP4 POP PUSH2 0x2938 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2488 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2950 DUP3 DUP5 PUSH2 0x2913 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2970 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x297D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x298A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x299B DUP2 PUSH2 0x1E0E JUMP JUMPDEST DUP2 EQ PUSH2 0x29A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x29B8 DUP2 PUSH2 0x2992 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29D4 JUMPI PUSH2 0x29D3 PUSH2 0x1D7F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29E2 DUP5 DUP3 DUP6 ADD PUSH2 0x29A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A06 PUSH1 0x0 DUP4 PUSH2 0x29EB JUMP JUMPDEST SWAP2 POP PUSH2 0x2A11 DUP3 PUSH2 0x29F6 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A27 DUP3 PUSH2 0x29F9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x2A46 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2A53 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2A60 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2A6D PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2A7A PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2A87 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x2AD2 JUMPI PUSH2 0x2AD1 PUSH2 0x2A92 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x2AE3 DUP3 PUSH2 0x2AC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AF3 DUP3 PUSH2 0x2AD5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B03 DUP2 PUSH2 0x2AE8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B38 PUSH2 0x2B33 PUSH2 0x2B2E DUP5 PUSH2 0x2B09 JUMP JUMPDEST PUSH2 0x2B13 JUMP JUMPDEST PUSH2 0x2093 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B48 DUP2 PUSH2 0x2B1D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B68 DUP2 DUP9 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B77 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2AFA JUMP JUMPDEST PUSH2 0x2B84 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2B91 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2B3F JUMP JUMPDEST PUSH2 0x2B9E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2BE2 DUP3 PUSH2 0x2093 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BED DUP4 PUSH2 0x2093 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2C05 JUMPI PUSH2 0x2C04 PUSH2 0x2BA8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2C20 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2C2D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C3F DUP3 PUSH2 0x2093 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C4A DUP4 PUSH2 0x2093 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2C62 JUMPI PUSH2 0x2C61 PUSH2 0x2BA8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C82 DUP2 DUP8 PUSH2 0x24B2 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C91 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2C9E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x24EB JUMP JUMPDEST PUSH2 0x2CAB PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2384 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2CFB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2D0E JUMPI PUSH2 0x2D0D PUSH2 0x2CB4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D29 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2504 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2D44 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2D51 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2D5E PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2D6B PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2384 JUMP JUMPDEST PUSH2 0x2D78 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x24EB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D98 DUP2 PUSH2 0x2D82 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DB3 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2DC0 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2D8F JUMP JUMPDEST PUSH2 0x2DCD PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2504 JUMP JUMPDEST PUSH2 0x2DDA PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2504 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xA7 DUP15 DUP8 0xC3 SWAP7 0xC9 BASEFEE PUSH15 0xF43FD0DA495C3C4ED4CA9B8E2C03DB SWAP6 ADD CALL PUSH32 0x1D94A53A64736F6C634300081800330000000000000000000000000000000000 ","sourceMap":"334:4219:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8040:298:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2320:184:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7269:226:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3994:149:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1573:104;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1682:85;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3755:223;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2293:101:0;;;;;;;;;;;;;:::i;:::-;;1761:229:1;;;;;;;;;;;;;:::i;:::-;;2508:565:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5144:557:14;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;3160:135:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1638:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7756:278:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:452:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4147:204;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3093:63;;;:::i;:::-;;874:99:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;594:63:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;661:109;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7501:249:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1166:178:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4355:196:19;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;848:57:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8040:298;8127:4;8177:34;8162:49;;;:11;:49;;;;:113;;;;8242:33;8227:48;;;:11;:48;;;;8162:113;:169;;;;8306:25;8291:40;;;:11;:40;;;;8162:169;8143:188;;8040:298;;;:::o;2320:184:19:-;2435:4;2447:34;2455:9;2466:14;2447:7;:34::i;:::-;2495:4;2488:11;;2320:184;;;;:::o;7269:226:20:-;7453:6;7478:10;7471:17;;;;7269:226;;;;;;;:::o;3994:149:19:-;1531:13:0;:11;:13::i;:::-;4129:9:19::1;4101:13;4115:10;4101:25;;;;;;:::i;:::-;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;3994:149:::0;;:::o;1573:104::-;1531:13:0;:11;:13::i;:::-;1659::19::1;1644:12;;:28;;;;;;;;;;;;;;;;;;1573:104:::0;:::o;1682:85::-;1727:7;1749:13;1742:20;;1682:85;:::o;3755:223::-;2356:21:9;:19;:21::i;:::-;3907:10:19::1;1215:1;1179:38;;:13;1193:9;1179:24;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:38;;;;:80;;;;;1235:13;1249:9;1235:24;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1221:38;;:10;:38;;;;1179:80;1175:126;;;1276:18;;;;;;;;;;;;;;1175:126;3925:48:::2;3940:10;3952:3;3957:6;3965:7;3925:14;:48::i;:::-;2387:1:9::1;2398:20:::0;:18;:20::i;:::-;3755:223:19;;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1761:229:1:-;1813:14;1830:12;:10;:12::i;:::-;1813:29;;1874:6;1856:24;;:14;:12;:14::i;:::-;:24;;;1852:96;;1930:6;1903:34;;;;;;;;;;;:::i;:::-;;;;;;;;1852:96;1957:26;1976:6;1957:18;:26::i;:::-;1803:187;1761:229::o;2508:565:19:-;2356:21:9;:19;:21::i;:::-;2630:34:19::1;2638:9;2649:14;2630:7;:34::i;:::-;2752:14;:30;;;2675:21;2697:14;:24;;;2675:47;;;;;;:::i;:::-;;;;;;;;;;;;;:73;2723:14;:24;;;2675:73;;;;;;;;;;;;;;;;:107;2671:158;;2799:23;;;;;;;;;;;;;;2671:158;2911:14;:30;;;2835:21;2857:14;:24;;;2835:47;;;;;;:::i;:::-;;;;;;;;;;;;;:73;2883:14;:24;;;2835:73;;;;;;;;;;;;;;;:106;;;;2948:120;2963:14;:24;;;2989:14;:24;;;3015:14;:20;;;3037:14;:30;;;2948:14;:120::i;:::-;2398:20:9::0;:18;:20::i;:::-;2508:565:19;;:::o;5144:557:14:-;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5590:13;5625:4;5652:1;5644:10;;5682:1;5668:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5482:212;;;;;;;;;;;;;;;;;;;;;5144:557;;;;;;;:::o;3160:135:19:-;3234:7;3258:15;3274:2;3258:19;;;;;;:::i;:::-;;;;;;;;;;;;;:25;;:32;3284:5;3258:32;;;;;;;;;;;;;;;;3251:39;;3160:135;;;;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;7756:278:20:-;7992:6;8017:10;8010:17;;;;7756:278;;;;;;;;;;:::o;3299:452:19:-;2356:21:9;:19;:21::i;:::-;3450:10:19::1;1215:1;1179:38;;:13;1193:9;1179:24;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:38;;;;:80;;;;;1235:13;1249:9;1235:24;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1221:38;;:10;:38;;;;1179:80;1175:126;;;1276:18;;;;;;;;;;;;;;1175:126;3477:6:::2;1379:5;1365:19;;:10;:19;;;1361:63;;1401:16;;;;;;;;;;;;;;1361:63;3575:1:::3;3538:39;;:13;3552:10;3538:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:39;;::::0;3534:94:::3;;3615:6;3587:13;3601:10;3587:25;;;;;;:::i;:::-;;;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;3534:94;3641:6;3634:27;;;3662:6;3678:4;3685:7;3634:59;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3699:47;3710:10;3722:6;3730;3738:7;3699:10;:47::i;:::-;1306:1:::2;2387::9::1;2398:20:::0;:18;:20::i;:::-;3299:452:19;;;;:::o;4147:204::-;1531:13:0;:11;:13::i;:::-;4212:14:19::1;4229:21;4212:38;;4258:12;4276:3;:8;;4292:6;4276:27;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4257:46;;;4314:7;4309:37;;4330:16;;;;;;;;;;;;;;4309:37;4206:145;;4147:204:::0;:::o;3093:63::-;:::o;874:99:1:-;927:7;953:13;;;;;;;;;;;946:20;;874:99;:::o;594:63:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;661:109::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7501:249:20:-;7708:6;7733:10;7726:17;;;;7501:249;;;;;;;;:::o;1166:178:1:-;1531:13:0;:11;:13::i;:::-;1271:8:1::1;1255:13;;:24;;;;;;;;;;;;;;;;;;1328:8;1294:43;;1319:7;:5;:7::i;:::-;1294:43;;;;;;;;;;;;1166:178:::0;:::o;4355:196:19:-;1531:13:0;:11;:13::i;:::-;4498:48:19::1;4513:10;4525:3;4530:6;4538:7;4498:14;:48::i;:::-;4355:196:::0;;;;:::o;848:57:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1785:531:19:-;1896:14;1913:249;998:115;2002:14;:24;;;1986:42;;;;;;2036:14;:20;;;2064:14;:20;;;2092:14;:24;;;2124:14;:30;;;1940:220;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1930:231;;;;;;1913:16;:249::i;:::-;1896:266;;2173:23;2199:32;2213:6;2221:9;2199:13;:32::i;:::-;2173:58;;2261:12;;;;;;;;;;;2242:31;;:15;:31;;;2238:74;;2290:15;;;;;;;;;;;;;;2238:74;1890:426;;1785:531;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2431:307:9:-;1755:1;2558:7;;:18;2554:86;;2599:30;;;;;;;;;;;;;;2554:86;1755:1;2714:7;:17;;;;2431:307::o;5130:366:20:-;5311:6;5276:15;5292:2;5276:19;;;;;;:::i;:::-;;;;;;;;;;;;;:25;;:32;5302:5;5276:32;;;;;;;;;;;;;;;;:41;5272:119;;;5353:2;5357:15;5374:5;5381:1;5384:6;5338:53;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;5272:119;5438:6;5402:15;5418:2;5402:19;;;;;;:::i;:::-;;;;;;;;;;;;;:25;;:32;5428:5;5402:32;;;;;;;;;;;;;;;;:42;;;;;;;:::i;:::-;;;;;;;;5462:5;5455:22;;;5478:2;5482:6;5455:34;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5130:366;;;;:::o;2744:208:9:-;1713:1;2924:7;:21;;;;2744:208::o;1528:153:1:-;1617:13;;1610:20;;;;;;;;;;;1640:34;1665:8;1640:24;:34::i;:::-;1528:153;:::o;656:96:8:-;709:7;735:10;728:17;;656:96;:::o;6021:126:14:-;6067:13;6099:41;6126:13;6099:5;:26;;:41;;;;:::i;:::-;6092:48;;6021:126;:::o;6473:135::-;6522:13;6554:47;6584:16;6554:8;:29;;:47;;;;:::i;:::-;6547:54;;6473:135;:::o;3054:251:20:-;3230:6;3194:15;3210:2;3194:19;;;;;;:::i;:::-;;;;;;;;;;;;;:25;;:32;3220:5;3194:32;;;;;;;;;;;;;;;;:42;;;;;;;:::i;:::-;;;;;;;;3260:38;3274:2;3278:4;3284:5;3291:6;3260:38;;;;;;;;;:::i;:::-;;;;;;;;3054:251;;;;:::o;4917:176:14:-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;5020:32;:66::i;:::-;5013:73;;4917:176;;;:::o;3702:255:13:-;3780:7;3800:17;3819:18;3839:16;3859:27;3870:4;3876:9;3859:10;:27::i;:::-;3799:87;;;;;;3896:28;3908:5;3915:8;3896:11;:28::i;:::-;3941:9;3934:16;;;;;3702:255;;;;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;3385:267:10:-;3479:13;1390:66;3537:17;;3527:5;3508:46;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:267;;;;;:::o;3845:262:14:-;3898:7;3938:11;3921:28;;3929:4;3921:28;;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;4007:22;4000:29;;;;3917:184;4067:23;:21;:23::i;:::-;4060:30;;3845:262;;:::o;3353:401:15:-;3446:14;3555:4;3549:11;3585:10;3580:3;3573:23;3632:15;3625:4;3620:3;3616:14;3609:39;3684:10;3677:4;3672:3;3668:14;3661:34;3733:4;3728:3;3718:20;3708:30;;3524:224;3353:401;;;;:::o;2129:766:13:-;2210:7;2219:12;2233:7;2276:2;2256:9;:16;:22;2252:637;;2294:9;2317;2340:7;2592:4;2581:9;2577:20;2571:27;2566:32;;2641:4;2630:9;2626:20;2620:27;2615:32;;2698:4;2687:9;2683:20;2677:27;2674:1;2669:36;2664:41;;2739:25;2750:4;2756:1;2759;2762;2739:10;:25::i;:::-;2732:32;;;;;;;;;;;2252:637;2811:1;2815:35;2860:9;:16;2852:25;;2795:83;;;;;;2129:766;;;;;;:::o;7196:532::-;7291:20;7282:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;7278:444;7327:7;7278:444;7387:29;7378:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;7374:348;;7439:23;;;;;;;;;;;;;;7374:348;7492:35;7483:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;7479:243;;7586:8;7578:17;;7550:46;;;;;;;;;;;:::i;:::-;;;;;;;;7479:243;7626:30;7617:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;7613:109;;7702:8;7679:32;;;;;;;;;;;:::i;:::-;;;;;;;;7613:109;7196:532;;;:::o;2078:405:10:-;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2162:30;;2280:17;2311:2;2300:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2280:34;;2402:3;2397;2390:16;2442:4;2435;2430:3;2426:14;2419:28;2473:3;2466:10;;;;2078:405;;;:::o;4113:179:14:-;4168:7;2079:95;4226:11;4239:14;4255:13;4278:4;4204:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;:::o;5140:1530:13:-;5266:7;5275:12;5289:7;6199:66;6194:1;6186:10;;:79;6182:164;;;6297:1;6301:30;6333:1;6281:54;;;;;;;;6182:164;6440:14;6457:24;6467:4;6473:1;6476;6479;6457:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6440:41;;6513:1;6495:20;;:6;:20;;;6491:113;;6547:1;6551:29;6590:1;6582:10;;6531:62;;;;;;;;;6491:113;6622:6;6630:20;6660:1;6652:10;;6614:49;;;;;;;5140:1530;;;;;;;;;:::o;2555:245:10:-;2616:7;2635:14;2688:4;2679;2652:33;;:40;2635:57;;2715:2;2706:6;:11;2702:69;;;2740:20;;;;;;;;;;;;;;2702:69;2787:6;2780:13;;;2555:245;;;:::o;7:75:21:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:117::-;1627:1;1624;1617:12;1641:117;1750:1;1747;1740:12;1764:102;1805:6;1856:2;1852:7;1847:2;1840:5;1836:14;1832:28;1822:38;;1764:102;;;:::o;1872:180::-;1920:77;1917:1;1910:88;2017:4;2014:1;2007:15;2041:4;2038:1;2031:15;2058:281;2141:27;2163:4;2141:27;:::i;:::-;2133:6;2129:40;2271:6;2259:10;2256:22;2235:18;2223:10;2220:34;2217:62;2214:88;;;2282:18;;:::i;:::-;2214:88;2322:10;2318:2;2311:22;2101:238;2058:281;;:::o;2345:129::-;2379:6;2406:20;;:::i;:::-;2396:30;;2435:33;2463:4;2455:6;2435:33;:::i;:::-;2345:129;;;:::o;2480:307::-;2541:4;2631:18;2623:6;2620:30;2617:56;;;2653:18;;:::i;:::-;2617:56;2691:29;2713:6;2691:29;:::i;:::-;2683:37;;2775:4;2769;2765:15;2757:23;;2480:307;;;:::o;2793:146::-;2890:6;2885:3;2880;2867:30;2931:1;2922:6;2917:3;2913:16;2906:27;2793:146;;;:::o;2945:423::-;3022:5;3047:65;3063:48;3104:6;3063:48;:::i;:::-;3047:65;:::i;:::-;3038:74;;3135:6;3128:5;3121:21;3173:4;3166:5;3162:16;3211:3;3202:6;3197:3;3193:16;3190:25;3187:112;;;3218:79;;:::i;:::-;3187:112;3308:54;3355:6;3350:3;3345;3308:54;:::i;:::-;3028:340;2945:423;;;;;:::o;3387:338::-;3442:5;3491:3;3484:4;3476:6;3472:17;3468:27;3458:122;;3499:79;;:::i;:::-;3458:122;3616:6;3603:20;3641:78;3715:3;3707:6;3700:4;3692:6;3688:17;3641:78;:::i;:::-;3632:87;;3448:277;3387:338;;;;:::o;3731:117::-;3840:1;3837;3830:12;3854:117;3963:1;3960;3953:12;3977:308;4039:4;4129:18;4121:6;4118:30;4115:56;;;4151:18;;:::i;:::-;4115:56;4189:29;4211:6;4189:29;:::i;:::-;4181:37;;4273:4;4267;4263:15;4255:23;;3977:308;;;:::o;4291:425::-;4369:5;4394:66;4410:49;4452:6;4410:49;:::i;:::-;4394:66;:::i;:::-;4385:75;;4483:6;4476:5;4469:21;4521:4;4514:5;4510:16;4559:3;4550:6;4545:3;4541:16;4538:25;4535:112;;;4566:79;;:::i;:::-;4535:112;4656:54;4703:6;4698:3;4693;4656:54;:::i;:::-;4375:341;4291:425;;;;;:::o;4736:340::-;4792:5;4841:3;4834:4;4826:6;4822:17;4818:27;4808:122;;4849:79;;:::i;:::-;4808:122;4966:6;4953:20;4991:79;5066:3;5058:6;5051:4;5043:6;5039:17;4991:79;:::i;:::-;4982:88;;4798:278;4736:340;;;;:::o;5082:126::-;5119:7;5159:42;5152:5;5148:54;5137:65;;5082:126;;;:::o;5214:96::-;5251:7;5280:24;5298:5;5280:24;:::i;:::-;5269:35;;5214:96;;;:::o;5316:122::-;5389:24;5407:5;5389:24;:::i;:::-;5382:5;5379:35;5369:63;;5428:1;5425;5418:12;5369:63;5316:122;:::o;5444:139::-;5490:5;5528:6;5515:20;5506:29;;5544:33;5571:5;5544:33;:::i;:::-;5444:139;;;;:::o;5589:77::-;5626:7;5655:5;5644:16;;5589:77;;;:::o;5672:122::-;5745:24;5763:5;5745:24;:::i;:::-;5738:5;5735:35;5725:63;;5784:1;5781;5774:12;5725:63;5672:122;:::o;5800:139::-;5846:5;5884:6;5871:20;5862:29;;5900:33;5927:5;5900:33;:::i;:::-;5800:139;;;;:::o;5985:1258::-;6066:5;6110:4;6098:9;6093:3;6089:19;6085:30;6082:117;;;6118:79;;:::i;:::-;6082:117;6217:21;6233:4;6217:21;:::i;:::-;6208:30;;6330:1;6319:9;6315:17;6302:31;6360:18;6352:6;6349:30;6346:117;;;6382:79;;:::i;:::-;6346:117;6502:59;6557:3;6548:6;6537:9;6533:22;6502:59;:::i;:::-;6495:4;6488:5;6484:16;6477:85;6248:325;6633:2;6674:49;6719:3;6710:6;6699:9;6695:22;6674:49;:::i;:::-;6667:4;6660:5;6656:16;6649:75;6583:152;6795:2;6836:49;6881:3;6872:6;6861:9;6857:22;6836:49;:::i;:::-;6829:4;6822:5;6818:16;6811:75;6745:152;6961:2;7002:49;7047:3;7038:6;7027:9;7023:22;7002:49;:::i;:::-;6995:4;6988:5;6984:16;6977:75;6907:156;7133:3;7175:49;7220:3;7211:6;7200:9;7196:22;7175:49;:::i;:::-;7168:4;7161:5;7157:16;7150:75;7073:163;5985:1258;;;;:::o;7249:876::-;7358:6;7366;7415:2;7403:9;7394:7;7390:23;7386:32;7383:119;;;7421:79;;:::i;:::-;7383:119;7569:1;7558:9;7554:17;7541:31;7599:18;7591:6;7588:30;7585:117;;;7621:79;;:::i;:::-;7585:117;7726:62;7780:7;7771:6;7760:9;7756:22;7726:62;:::i;:::-;7716:72;;7512:286;7865:2;7854:9;7850:18;7837:32;7896:18;7888:6;7885:30;7882:117;;;7918:79;;:::i;:::-;7882:117;8023:85;8100:7;8091:6;8080:9;8076:22;8023:85;:::i;:::-;8013:95;;7808:310;7249:876;;;;;:::o;8131:117::-;8240:1;8237;8230:12;8254:117;8363:1;8360;8353:12;8390:552;8447:8;8457:6;8507:3;8500:4;8492:6;8488:17;8484:27;8474:122;;8515:79;;:::i;:::-;8474:122;8628:6;8615:20;8605:30;;8658:18;8650:6;8647:30;8644:117;;;8680:79;;:::i;:::-;8644:117;8794:4;8786:6;8782:17;8770:29;;8848:3;8840:4;8832:6;8828:17;8818:8;8814:32;8811:41;8808:128;;;8855:79;;:::i;:::-;8808:128;8390:552;;;;;:::o;8948:963::-;9045:6;9053;9061;9069;9077;9126:3;9114:9;9105:7;9101:23;9097:33;9094:120;;;9133:79;;:::i;:::-;9094:120;9253:1;9278:53;9323:7;9314:6;9303:9;9299:22;9278:53;:::i;:::-;9268:63;;9224:117;9380:2;9406:53;9451:7;9442:6;9431:9;9427:22;9406:53;:::i;:::-;9396:63;;9351:118;9508:2;9534:53;9579:7;9570:6;9559:9;9555:22;9534:53;:::i;:::-;9524:63;;9479:118;9664:2;9653:9;9649:18;9636:32;9695:18;9687:6;9684:30;9681:117;;;9717:79;;:::i;:::-;9681:117;9830:64;9886:7;9877:6;9866:9;9862:22;9830:64;:::i;:::-;9812:82;;;;9607:297;8948:963;;;;;;;;:::o;9917:115::-;10002:23;10019:5;10002:23;:::i;:::-;9997:3;9990:36;9917:115;;:::o;10038:218::-;10129:4;10167:2;10156:9;10152:18;10144:26;;10180:69;10246:1;10235:9;10231:17;10222:6;10180:69;:::i;:::-;10038:218;;;;:::o;10262:654::-;10340:6;10348;10397:2;10385:9;10376:7;10372:23;10368:32;10365:119;;;10403:79;;:::i;:::-;10365:119;10551:1;10540:9;10536:17;10523:31;10581:18;10573:6;10570:30;10567:117;;;10603:79;;:::i;:::-;10567:117;10708:63;10763:7;10754:6;10743:9;10739:22;10708:63;:::i;:::-;10698:73;;10494:287;10820:2;10846:53;10891:7;10882:6;10871:9;10867:22;10846:53;:::i;:::-;10836:63;;10791:118;10262:654;;;;;:::o;10922:329::-;10981:6;11030:2;11018:9;11009:7;11005:23;11001:32;10998:119;;;11036:79;;:::i;:::-;10998:119;11156:1;11181:53;11226:7;11217:6;11206:9;11202:22;11181:53;:::i;:::-;11171:63;;11127:117;10922:329;;;;:::o;11257:118::-;11344:24;11362:5;11344:24;:::i;:::-;11339:3;11332:37;11257:118;;:::o;11381:222::-;11474:4;11512:2;11501:9;11497:18;11489:26;;11525:71;11593:1;11582:9;11578:17;11569:6;11525:71;:::i;:::-;11381:222;;;;:::o;11609:945::-;11705:6;11713;11721;11729;11778:3;11766:9;11757:7;11753:23;11749:33;11746:120;;;11785:79;;:::i;:::-;11746:120;11933:1;11922:9;11918:17;11905:31;11963:18;11955:6;11952:30;11949:117;;;11985:79;;:::i;:::-;11949:117;12090:63;12145:7;12136:6;12125:9;12121:22;12090:63;:::i;:::-;12080:73;;11876:287;12202:2;12228:53;12273:7;12264:6;12253:9;12249:22;12228:53;:::i;:::-;12218:63;;12173:118;12330:2;12356:53;12401:7;12392:6;12381:9;12377:22;12356:53;:::i;:::-;12346:63;;12301:118;12458:2;12484:53;12529:7;12520:6;12509:9;12505:22;12484:53;:::i;:::-;12474:63;;12429:118;11609:945;;;;;;;:::o;12560:149::-;12596:7;12636:66;12629:5;12625:78;12614:89;;12560:149;;;:::o;12715:115::-;12800:23;12817:5;12800:23;:::i;:::-;12795:3;12788:36;12715:115;;:::o;12836:99::-;12888:6;12922:5;12916:12;12906:22;;12836:99;;;:::o;12941:169::-;13025:11;13059:6;13054:3;13047:19;13099:4;13094:3;13090:14;13075:29;;12941:169;;;;:::o;13116:246::-;13197:1;13207:113;13221:6;13218:1;13215:13;13207:113;;;13306:1;13301:3;13297:11;13291:18;13287:1;13282:3;13278:11;13271:39;13243:2;13240:1;13236:10;13231:15;;13207:113;;;13354:1;13345:6;13340:3;13336:16;13329:27;13178:184;13116:246;;;:::o;13368:377::-;13456:3;13484:39;13517:5;13484:39;:::i;:::-;13539:71;13603:6;13598:3;13539:71;:::i;:::-;13532:78;;13619:65;13677:6;13672:3;13665:4;13658:5;13654:16;13619:65;:::i;:::-;13709:29;13731:6;13709:29;:::i;:::-;13704:3;13700:39;13693:46;;13460:285;13368:377;;;;:::o;13751:118::-;13838:24;13856:5;13838:24;:::i;:::-;13833:3;13826:37;13751:118;;:::o;13875:77::-;13912:7;13941:5;13930:16;;13875:77;;;:::o;13958:118::-;14045:24;14063:5;14045:24;:::i;:::-;14040:3;14033:37;13958:118;;:::o;14082:114::-;14149:6;14183:5;14177:12;14167:22;;14082:114;;;:::o;14202:184::-;14301:11;14335:6;14330:3;14323:19;14375:4;14370:3;14366:14;14351:29;;14202:184;;;;:::o;14392:132::-;14459:4;14482:3;14474:11;;14512:4;14507:3;14503:14;14495:22;;14392:132;;;:::o;14530:108::-;14607:24;14625:5;14607:24;:::i;:::-;14602:3;14595:37;14530:108;;:::o;14644:179::-;14713:10;14734:46;14776:3;14768:6;14734:46;:::i;:::-;14812:4;14807:3;14803:14;14789:28;;14644:179;;;;:::o;14829:113::-;14899:4;14931;14926:3;14922:14;14914:22;;14829:113;;;:::o;14978:732::-;15097:3;15126:54;15174:5;15126:54;:::i;:::-;15196:86;15275:6;15270:3;15196:86;:::i;:::-;15189:93;;15306:56;15356:5;15306:56;:::i;:::-;15385:7;15416:1;15401:284;15426:6;15423:1;15420:13;15401:284;;;15502:6;15496:13;15529:63;15588:3;15573:13;15529:63;:::i;:::-;15522:70;;15615:60;15668:6;15615:60;:::i;:::-;15605:70;;15461:224;15448:1;15445;15441:9;15436:14;;15401:284;;;15405:14;15701:3;15694:10;;15102:608;;;14978:732;;;;:::o;15716:1215::-;16065:4;16103:3;16092:9;16088:19;16080:27;;16117:69;16183:1;16172:9;16168:17;16159:6;16117:69;:::i;:::-;16233:9;16227:4;16223:20;16218:2;16207:9;16203:18;16196:48;16261:78;16334:4;16325:6;16261:78;:::i;:::-;16253:86;;16386:9;16380:4;16376:20;16371:2;16360:9;16356:18;16349:48;16414:78;16487:4;16478:6;16414:78;:::i;:::-;16406:86;;16502:72;16570:2;16559:9;16555:18;16546:6;16502:72;:::i;:::-;16584:73;16652:3;16641:9;16637:19;16628:6;16584:73;:::i;:::-;16667;16735:3;16724:9;16720:19;16711:6;16667:73;:::i;:::-;16788:9;16782:4;16778:20;16772:3;16761:9;16757:19;16750:49;16816:108;16919:4;16910:6;16816:108;:::i;:::-;16808:116;;15716:1215;;;;;;;;;;:::o;16937:222::-;17030:4;17068:2;17057:9;17053:18;17045:26;;17081:71;17149:1;17138:9;17134:17;17125:6;17081:71;:::i;:::-;16937:222;;;;:::o;17182:568::-;17255:8;17265:6;17315:3;17308:4;17300:6;17296:17;17292:27;17282:122;;17323:79;;:::i;:::-;17282:122;17436:6;17423:20;17413:30;;17466:18;17458:6;17455:30;17452:117;;;17488:79;;:::i;:::-;17452:117;17602:4;17594:6;17590:17;17578:29;;17656:3;17648:4;17640:6;17636:17;17626:8;17622:32;17619:41;17616:128;;;17663:79;;:::i;:::-;17616:128;17182:568;;;;;:::o;17756:1569::-;17916:6;17924;17932;17940;17948;17956;17964;17972;18021:3;18009:9;18000:7;17996:23;17992:33;17989:120;;;18028:79;;:::i;:::-;17989:120;18148:1;18173:53;18218:7;18209:6;18198:9;18194:22;18173:53;:::i;:::-;18163:63;;18119:117;18275:2;18301:53;18346:7;18337:6;18326:9;18322:22;18301:53;:::i;:::-;18291:63;;18246:118;18431:2;18420:9;18416:18;18403:32;18462:18;18454:6;18451:30;18448:117;;;18484:79;;:::i;:::-;18448:117;18597:80;18669:7;18660:6;18649:9;18645:22;18597:80;:::i;:::-;18579:98;;;;18374:313;18754:2;18743:9;18739:18;18726:32;18785:18;18777:6;18774:30;18771:117;;;18807:79;;:::i;:::-;18771:117;18920:80;18992:7;18983:6;18972:9;18968:22;18920:80;:::i;:::-;18902:98;;;;18697:313;19077:3;19066:9;19062:19;19049:33;19109:18;19101:6;19098:30;19095:117;;;19131:79;;:::i;:::-;19095:117;19244:64;19300:7;19291:6;19280:9;19276:22;19244:64;:::i;:::-;19226:82;;;;19020:298;17756:1569;;;;;;;;;;;:::o;19331:509::-;19400:6;19449:2;19437:9;19428:7;19424:23;19420:32;19417:119;;;19455:79;;:::i;:::-;19417:119;19603:1;19592:9;19588:17;19575:31;19633:18;19625:6;19622:30;19619:117;;;19655:79;;:::i;:::-;19619:117;19760:63;19815:7;19806:6;19795:9;19791:22;19760:63;:::i;:::-;19750:73;;19546:287;19331:509;;;;:::o;19846:1109::-;19952:6;19960;19968;19976;19984;19992;20041:3;20029:9;20020:7;20016:23;20012:33;20009:120;;;20048:79;;:::i;:::-;20009:120;20168:1;20193:53;20238:7;20229:6;20218:9;20214:22;20193:53;:::i;:::-;20183:63;;20139:117;20295:2;20321:53;20366:7;20357:6;20346:9;20342:22;20321:53;:::i;:::-;20311:63;;20266:118;20423:2;20449:53;20494:7;20485:6;20474:9;20470:22;20449:53;:::i;:::-;20439:63;;20394:118;20551:2;20577:53;20622:7;20613:6;20602:9;20598:22;20577:53;:::i;:::-;20567:63;;20522:118;20707:3;20696:9;20692:19;20679:33;20739:18;20731:6;20728:30;20725:117;;;20761:79;;:::i;:::-;20725:117;20874:64;20930:7;20921:6;20910:9;20906:22;20874:64;:::i;:::-;20856:82;;;;20650:298;19846:1109;;;;;;;;:::o;20961:945::-;21057:6;21065;21073;21081;21130:3;21118:9;21109:7;21105:23;21101:33;21098:120;;;21137:79;;:::i;:::-;21098:120;21257:1;21282:53;21327:7;21318:6;21307:9;21303:22;21282:53;:::i;:::-;21272:63;;21228:117;21412:2;21401:9;21397:18;21384:32;21443:18;21435:6;21432:30;21429:117;;;21465:79;;:::i;:::-;21429:117;21570:63;21625:7;21616:6;21605:9;21601:22;21570:63;:::i;:::-;21560:73;;21355:288;21682:2;21708:53;21753:7;21744:6;21733:9;21729:22;21708:53;:::i;:::-;21698:63;;21653:118;21810:2;21836:53;21881:7;21872:6;21861:9;21857:22;21836:53;:::i;:::-;21826:63;;21781:118;20961:945;;;;;;;:::o;21912:148::-;22014:11;22051:3;22036:18;;21912:148;;;;:::o;22066:390::-;22172:3;22200:39;22233:5;22200:39;:::i;:::-;22255:89;22337:6;22332:3;22255:89;:::i;:::-;22248:96;;22353:65;22411:6;22406:3;22399:4;22392:5;22388:16;22353:65;:::i;:::-;22443:6;22438:3;22434:16;22427:23;;22176:280;22066:390;;;;:::o;22462:275::-;22594:3;22616:95;22707:3;22698:6;22616:95;:::i;:::-;22609:102;;22728:3;22721:10;;22462:275;;;;:::o;22743:442::-;22892:4;22930:2;22919:9;22915:18;22907:26;;22943:71;23011:1;23000:9;22996:17;22987:6;22943:71;:::i;:::-;23024:72;23092:2;23081:9;23077:18;23068:6;23024:72;:::i;:::-;23106;23174:2;23163:9;23159:18;23150:6;23106:72;:::i;:::-;22743:442;;;;;;:::o;23191:116::-;23261:21;23276:5;23261:21;:::i;:::-;23254:5;23251:32;23241:60;;23297:1;23294;23287:12;23241:60;23191:116;:::o;23313:137::-;23367:5;23398:6;23392:13;23383:22;;23414:30;23438:5;23414:30;:::i;:::-;23313:137;;;;:::o;23456:345::-;23523:6;23572:2;23560:9;23551:7;23547:23;23543:32;23540:119;;;23578:79;;:::i;:::-;23540:119;23698:1;23723:61;23776:7;23767:6;23756:9;23752:22;23723:61;:::i;:::-;23713:71;;23669:125;23456:345;;;;:::o;23807:147::-;23908:11;23945:3;23930:18;;23807:147;;;;:::o;23960:114::-;;:::o;24080:398::-;24239:3;24260:83;24341:1;24336:3;24260:83;:::i;:::-;24253:90;;24352:93;24441:3;24352:93;:::i;:::-;24470:1;24465:3;24461:11;24454:18;;24080:398;;;:::o;24484:379::-;24668:3;24690:147;24833:3;24690:147;:::i;:::-;24683:154;;24854:3;24847:10;;24484:379;;;:::o;24869:775::-;25102:4;25140:3;25129:9;25125:19;25117:27;;25154:71;25222:1;25211:9;25207:17;25198:6;25154:71;:::i;:::-;25235:72;25303:2;25292:9;25288:18;25279:6;25235:72;:::i;:::-;25317;25385:2;25374:9;25370:18;25361:6;25317:72;:::i;:::-;25399;25467:2;25456:9;25452:18;25443:6;25399:72;:::i;:::-;25481:73;25549:3;25538:9;25534:19;25525:6;25481:73;:::i;:::-;25564;25632:3;25621:9;25617:19;25608:6;25564:73;:::i;:::-;24869:775;;;;;;;;;:::o;25650:180::-;25698:77;25695:1;25688:88;25795:4;25792:1;25785:15;25819:4;25816:1;25809:15;25836:119;25923:1;25916:5;25913:12;25903:46;;25929:18;;:::i;:::-;25903:46;25836:119;:::o;25961:139::-;26012:7;26041:5;26030:16;;26047:47;26088:5;26047:47;:::i;:::-;25961:139;;;:::o;26106:::-;26168:9;26201:38;26233:5;26201:38;:::i;:::-;26188:51;;26106:139;;;:::o;26251:155::-;26350:49;26393:5;26350:49;:::i;:::-;26345:3;26338:62;26251:155;;:::o;26412:85::-;26457:7;26486:5;26475:16;;26412:85;;;:::o;26503:60::-;26531:3;26552:5;26545:12;;26503:60;;;:::o;26569:158::-;26627:9;26660:61;26678:42;26687:32;26713:5;26687:32;:::i;:::-;26678:42;:::i;:::-;26660:61;:::i;:::-;26647:74;;26569:158;;;:::o;26733:147::-;26828:45;26867:5;26828:45;:::i;:::-;26823:3;26816:58;26733:147;;:::o;26886:795::-;27131:4;27169:3;27158:9;27154:19;27146:27;;27219:9;27213:4;27209:20;27205:1;27194:9;27190:17;27183:47;27247:78;27320:4;27311:6;27247:78;:::i;:::-;27239:86;;27335:84;27415:2;27404:9;27400:18;27391:6;27335:84;:::i;:::-;27429:72;27497:2;27486:9;27482:18;27473:6;27429:72;:::i;:::-;27511:80;27587:2;27576:9;27572:18;27563:6;27511:80;:::i;:::-;27601:73;27669:3;27658:9;27654:19;27645:6;27601:73;:::i;:::-;26886:795;;;;;;;;:::o;27687:180::-;27735:77;27732:1;27725:88;27832:4;27829:1;27822:15;27856:4;27853:1;27846:15;27873:194;27913:4;27933:20;27951:1;27933:20;:::i;:::-;27928:25;;27967:20;27985:1;27967:20;:::i;:::-;27962:25;;28011:1;28008;28004:9;27996:17;;28035:1;28029:4;28026:11;28023:37;;;28040:18;;:::i;:::-;28023:37;27873:194;;;;:::o;28073:332::-;28194:4;28232:2;28221:9;28217:18;28209:26;;28245:71;28313:1;28302:9;28298:17;28289:6;28245:71;:::i;:::-;28326:72;28394:2;28383:9;28379:18;28370:6;28326:72;:::i;:::-;28073:332;;;;;:::o;28411:191::-;28451:3;28470:20;28488:1;28470:20;:::i;:::-;28465:25;;28504:20;28522:1;28504:20;:::i;:::-;28499:25;;28547:1;28544;28540:9;28533:16;;28568:3;28565:1;28562:10;28559:36;;;28575:18;;:::i;:::-;28559:36;28411:191;;;;:::o;28608:644::-;28805:4;28843:3;28832:9;28828:19;28820:27;;28893:9;28887:4;28883:20;28879:1;28868:9;28864:17;28857:47;28921:78;28994:4;28985:6;28921:78;:::i;:::-;28913:86;;29009:72;29077:2;29066:9;29062:18;29053:6;29009:72;:::i;:::-;29091;29159:2;29148:9;29144:18;29135:6;29091:72;:::i;:::-;29173;29241:2;29230:9;29226:18;29217:6;29173:72;:::i;:::-;28608:644;;;;;;;:::o;29258:180::-;29306:77;29303:1;29296:88;29403:4;29400:1;29393:15;29427:4;29424:1;29417:15;29444:320;29488:6;29525:1;29519:4;29515:12;29505:22;;29572:1;29566:4;29562:12;29593:18;29583:81;;29649:4;29641:6;29637:17;29627:27;;29583:81;29711:2;29703:6;29700:14;29680:18;29677:38;29674:84;;29730:18;;:::i;:::-;29674:84;29495:269;29444:320;;;:::o;29770:222::-;29863:4;29901:2;29890:9;29886:18;29878:26;;29914:71;29982:1;29971:9;29967:17;29958:6;29914:71;:::i;:::-;29770:222;;;;:::o;29998:664::-;30203:4;30241:3;30230:9;30226:19;30218:27;;30255:71;30323:1;30312:9;30308:17;30299:6;30255:71;:::i;:::-;30336:72;30404:2;30393:9;30389:18;30380:6;30336:72;:::i;:::-;30418;30486:2;30475:9;30471:18;30462:6;30418:72;:::i;:::-;30500;30568:2;30557:9;30553:18;30544:6;30500:72;:::i;:::-;30582:73;30650:3;30639:9;30635:19;30626:6;30582:73;:::i;:::-;29998:664;;;;;;;;:::o;30668:86::-;30703:7;30743:4;30736:5;30732:16;30721:27;;30668:86;;;:::o;30760:112::-;30843:22;30859:5;30843:22;:::i;:::-;30838:3;30831:35;30760:112;;:::o;30878:545::-;31051:4;31089:3;31078:9;31074:19;31066:27;;31103:71;31171:1;31160:9;31156:17;31147:6;31103:71;:::i;:::-;31184:68;31248:2;31237:9;31233:18;31224:6;31184:68;:::i;:::-;31262:72;31330:2;31319:9;31315:18;31306:6;31262:72;:::i;:::-;31344;31412:2;31401:9;31397:18;31388:6;31344:72;:::i;:::-;30878:545;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2360200","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54725","adminTransferAirdropOwnership(string,address)":"infinite","adminWithdrawERC20(address,string,address,uint256)":"infinite","adminWithdrawNative(address)":"infinite","airdropClaimedAmounts(string,address)":"infinite","airdropOwners(string)":"infinite","claimAirdrop(bytes,(string,address,address,address,uint256))":"infinite","contractBalance(string)":"infinite","eip712Domain()":"infinite","fundERC20(string,address,address,uint256)":"infinite","fundNative()":"231","getBalance(string,address)":"infinite","getChainId()":"470","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","owner()":"2545","pendingOwner()":"2655","renounceOwnership()":"infinite","setAdminAddress(address)":"infinite","supportsInterface(bytes4)":"754","transferOwnership(address)":"infinite","verify(bytes,(string,address,address,address,uint256))":"infinite","withdrawERC20(string,address,address,uint256)":"infinite"},"internal":{"_verify(bytes memory,struct Payfluence.AirdropMessage memory)":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","adminTransferAirdropOwnership(string,address)":"2394c348","adminWithdrawERC20(address,string,address,uint256)":"fe1fddaa","adminWithdrawNative(address)":"c8b5773d","airdropClaimedAmounts(string,address)":"eb47e011","airdropOwners(string)":"ea13689f","claimAirdrop(bytes,(string,address,address,address,uint256))":"80c4020c","contractBalance(string)":"ffb1500e","eip712Domain()":"84b0196e","fundERC20(string,address,address,uint256)":"c4385d76","fundNative()":"c9c61eab","getBalance(string,address)":"89f4b317","getChainId()":"3408e470","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","setAdminAddress(address)":"2c1e816d","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","verify(bytes,(string,address,address,address,uint256))":"1090bafa","withdrawERC20(string,address,address,uint256)":"4f18868a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AirdropAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AssetNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AssetTypeNotFoundForToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum TokenReceiver.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"name\":\"InvalidAssetType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"enum TokenReceiver.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAirdropOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferNativeFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"ERC1155Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"adminTransferAirdropOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"adminWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"airdropClaimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"airdropId\",\"type\":\"string\"}],\"name\":\"airdropOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"internalType\":\"struct Payfluence.AirdropMessage\",\"name\":\"airdropMessage\",\"type\":\"tuple\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"}],\"internalType\":\"struct Payfluence.AirdropMessage\",\"name\":\"airdropMessage\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_airdropId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payfluence.sol\":\"Payfluence\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Payfluence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./TokenReceiver.sol\\\";\\n\\ncontract Payfluence is\\n  Ownable2Step,\\n  ReentrancyGuard,\\n  EIP712,\\n  TokenReceiver\\n{\\n  error InvalidSigner();\\n  error AirdropAlreadyClaimed();\\n  error TransferFailed();\\n  error OnlyAirdropOwner();\\n  error OnlyTokenOwner();\\n\\n  address private adminAddress;\\n\\n  mapping(string airdropId => address owner) public airdropOwners;\\n  mapping(string airdropId => mapping(address recipient => uint256 amountClaimed)) public airdropClaimedAmounts;\\n\\n  struct AirdropMessage {\\n    string airdropId;\\n    address token;\\n    address owner;\\n    address recipient;\\n    uint256 amountClaimable;\\n    // string ownerSignature;\\n  }\\n  \\n  bytes32 private constant AIRDROP_MESSAGE_TYPE = keccak256(\\\"AirdropMessage(string airdropId,address token,address owner,address recipient,uint256 amountClaimable)\\\");\\n\\n  modifier onlyAirdropOwner(string memory airdropId) {\\n    if (airdropOwners[airdropId] != address(0) && msg.sender != airdropOwners[airdropId]) {\\n      revert OnlyAirdropOwner();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyTokenOwner(address owner) {\\n    if (msg.sender != owner) {\\n      revert OnlyTokenOwner();\\n    }\\n    _;\\n  }\\n\\n  constructor(address _adminAddress)\\n    Ownable(msg.sender)\\n    EIP712(\\\"Payfluence\\\", \\\"1\\\")\\n  {\\n    adminAddress = _adminAddress;\\n  }\\n\\n  function setAdminAddress(address _adminAddress) public onlyOwner {\\n    adminAddress = _adminAddress;\\n  }\\n\\n\\n  function getChainId() external view returns (uint256) {\\n    return block.chainid;\\n  }\\n\\n  // AIRDROP\\n\\n  function _verify(\\n    bytes memory signature,\\n    AirdropMessage memory airdropMessage\\n  ) internal view {\\n    bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n      AIRDROP_MESSAGE_TYPE,\\n      keccak256(bytes(airdropMessage.airdropId)),\\n      airdropMessage.token,\\n      airdropMessage.owner,\\n      airdropMessage.recipient,\\n      airdropMessage.amountClaimable\\n    )));\\n    \\n    address recoveredSigner = ECDSA.recover(digest, signature);\\n\\n    if (recoveredSigner != adminAddress) {\\n      revert InvalidSigner();\\n    }\\n  }\\n\\n  function verify(\\n      bytes memory signature,\\n      AirdropMessage memory airdropMessage\\n  ) public view returns (bool) {\\n    _verify(signature, airdropMessage);\\n\\n    return true;\\n  }\\n\\n  function claimAirdrop(\\n    bytes memory signature,\\n    AirdropMessage memory airdropMessage\\n  ) public nonReentrant {\\n    _verify(signature, airdropMessage);\\n\\n    if (airdropClaimedAmounts[airdropMessage.airdropId][airdropMessage.recipient] >= airdropMessage.amountClaimable) {\\n      revert AirdropAlreadyClaimed();\\n    }\\n\\n    airdropClaimedAmounts[airdropMessage.airdropId][airdropMessage.recipient] = airdropMessage.amountClaimable;\\n\\n    _transferERC20(airdropMessage.airdropId, airdropMessage.recipient, airdropMessage.token, airdropMessage.amountClaimable);\\n  }\\n\\n  // FUNDING\\n  \\n  function fundNative() public payable {\\n    // nothing to do\\n  }\\n\\n  function getBalance(string memory id, address token) public view returns (uint256) {\\n      return contractBalance[id].erc20[token];\\n  }\\n\\n  function fundERC20(\\n    string memory _airdropId,\\n    address _owner,\\n    address _token,\\n    uint256 _amount\\n  ) public nonReentrant onlyAirdropOwner(_airdropId) onlyTokenOwner(_owner) {\\n    // initialize airdrop owner if not set\\n    if (airdropOwners[_airdropId] == address(0)) {\\n      airdropOwners[_airdropId] = _owner;\\n    }\\n\\n    IERC20(_token).transferFrom(_owner, address(this), _amount);\\n    _fundERC20(_airdropId, _owner, _token, _amount);\\n  }\\n\\n  function withdrawERC20(\\n    string memory _airdropId,\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) public nonReentrant onlyAirdropOwner(_airdropId) {\\n    _transferERC20(_airdropId, _to, _token, _amount);\\n  }\\n\\n  // ADMIN\\n\\n  function adminTransferAirdropOwnership(string memory _airdropId, address _newOwner) public onlyOwner {\\n    airdropOwners[_airdropId] = _newOwner;\\n  }\\n\\n  function adminWithdrawNative(address _to) public onlyOwner {\\n    uint256 amount = address(this).balance;\\n\\n    (bool success, ) = _to.call{value: amount}(\\\"\\\");\\n    if (!success) revert TransferFailed();\\n  }\\n\\n  function adminWithdrawERC20(\\n    address _to,\\n    string memory _airdropId,\\n    address _token,\\n    uint256 _amount\\n  ) public onlyOwner {\\n    _transferERC20(_airdropId, _to, _token, _amount);\\n  }\\n}\",\"keccak256\":\"0x6d5194ede16e96d286057ae7be5d23672c33c0cd4d1f040b589cb1ebf1c0571a\",\"license\":\"MIT\"},\"contracts/TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract TokenReceiver is\\n    IERC721Receiver,\\n    IERC1155Receiver\\n{\\n    enum AssetType {\\n        NONE,\\n        NATIVE,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    uint256 totalNativeBalance = 0;\\n\\n    struct AssetBalance {\\n        uint256 native;\\n        mapping(address token => uint256) erc20;\\n        mapping(address token => mapping(uint256 tokenId => bool)) erc721;\\n        mapping(address token => mapping(uint256 tokenId => uint256)) erc1155;\\n    }\\n\\n    mapping(string id => AssetBalance) public contractBalance;\\n\\n    // internal variables\\n\\n    mapping(address token => AssetType assetType) internal assetTypeMap;\\n\\n    // events\\n\\n    event NativeReceived(string id, address from, uint256 amount);\\n\\n    event ERC20Received(\\n        string id,\\n        address from,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event ERC721Received(\\n        string id,\\n        address operator,\\n        address from,\\n        uint256 tokenId\\n    );\\n\\n    event ERC1155Received(\\n        string id,\\n        address operator,\\n        address from,\\n        uint256 tokenIds,\\n        uint256 amounts\\n    );\\n    \\n    event ERC1155BatchReceived(\\n        string id,\\n        address operator,\\n        address from,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n\\n    // errors\\n\\n    error AssetNotFound(string id, address token);\\n    error InvalidAssetType(AssetType assetType);\\n    error AssetTypeNotFoundForToken(address token);\\n\\n    error TransferNativeFailed(string id, address to, uint256 amount);\\n    \\n    error NotEnoughFunds(string id, AssetType assetType, address token, uint256 tokenId, uint256 amount);\\n\\n    // internal helpers\\n\\n\\n    function _getAssetType(address token) internal view returns (AssetType) {\\n        if (assetTypeMap[token] == AssetType.NONE)\\n            revert AssetTypeNotFoundForToken(token);\\n\\n        return assetTypeMap[token];\\n    }\\n\\n    function _detectAssetTypeFromInterfaceId(\\n        address token\\n    ) internal view returns (AssetType) {\\n        if (token == address(0)) {\\n            return AssetType.NATIVE;\\n        } else if (IERC1155(token).supportsInterface(0xd9b67a26)) {\\n            return AssetType.ERC1155;\\n        } else if (IERC721(token).supportsInterface(0x80ac58cd)) {\\n            return AssetType.ERC721;\\n        } else if (IERC20(token).totalSupply() > 0) {\\n            return AssetType.ERC20;\\n        }\\n\\n        return AssetType.NONE;\\n    }\\n\\n    // fund assets\\n\\n    receive() external payable {}\\n\\n    function _fundNative(\\n        string memory id,\\n        uint256 amount\\n    ) internal {\\n        contractBalance[id].native += amount;\\n        \\n        emit NativeReceived(id, msg.sender, amount);\\n    }\\n\\n    function _fundERC20(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        contractBalance[id].erc20[token] += amount;\\n        \\n        emit ERC20Received(id, from, token, amount);\\n    }\\n\\n    function _fundERC721(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256 tokenId\\n    ) internal {\\n        contractBalance[id].erc721[token][tokenId] = true;\\n\\n        emit ERC721Received(id, from, token, tokenId);\\n    }\\n\\n    function _fundERC1155(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        contractBalance[id].erc1155[token][tokenId] += amount;\\n\\n        emit ERC1155Received(id, from, token, tokenId, amount);\\n    }\\n\\n    function _fundERC1155Batch(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) internal {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            contractBalance[id].erc1155[token][tokenIds[i]] += amounts[i];\\n        }\\n\\n        emit ERC1155BatchReceived(id, from, token, tokenIds, amounts);\\n    }\\n\\n    // transfer assets\\n\\n    function _transferNative(\\n        string memory id,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (contractBalance[id].native < amount)\\n            revert NotEnoughFunds(id, AssetType.NATIVE, address(0), 0, amount);\\n\\n        contractBalance[id].native -= amount;\\n\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        if (!success) revert TransferNativeFailed(id, to, amount);\\n    }\\n\\n    function _transferFromERC20(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (contractBalance[id].erc20[token] < amount)\\n            revert NotEnoughFunds(id, AssetType.ERC20, token, 0, amount);\\n\\n        contractBalance[id].erc20[token] -= amount;\\n\\n        IERC20(token).transferFrom(address(this), to, amount);\\n    }\\n\\n    function _transferERC20(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (contractBalance[id].erc20[token] < amount)\\n            revert NotEnoughFunds(id, AssetType.ERC20, token, 0, amount);\\n\\n        contractBalance[id].erc20[token] -= amount;\\n\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    function _safeTransferERC721(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (!contractBalance[id].erc721[token][tokenId])\\n            revert NotEnoughFunds(id, AssetType.ERC721, token, tokenId, 0);\\n\\n        contractBalance[id].erc721[token][tokenId] = false;\\n\\n        IERC721(token).safeTransferFrom(address(this), to, tokenId, data);\\n    }\\n\\n    function _safeTransferERC1155(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        if (contractBalance[id].erc1155[token][tokenId] < amount)\\n            revert NotEnoughFunds(id, AssetType.ERC1155, token, tokenId, amount);\\n\\n        contractBalance[id].erc1155[token][tokenId] -= amount;\\n\\n        IERC1155(token).safeTransferFrom(\\n            address(this),\\n            to,\\n            tokenId,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    function _safeBatchTransferERC1155(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (contractBalance[id].erc1155[token][tokenIds[i]] < amounts[i])\\n                revert NotEnoughFunds(id, AssetType.ERC1155, token, tokenIds[i], amounts[i]);\\n\\n            contractBalance[id].erc1155[token][tokenIds[i]] -= amounts[i];\\n        }\\n\\n        IERC1155(token).safeBatchTransferFrom(\\n            address(this),\\n            to,\\n            tokenIds,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    // _withdrawBatchAssets()\\n\\n    // hooks\\n\\n    function onERC721Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // tokenId,\\n        bytes calldata // data\\n    ) external virtual override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function onERC1155Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // id,\\n        uint256, // value,\\n        bytes calldata // data\\n    ) external virtual override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, // operator,\\n        address, // from,\\n        uint256[] calldata, // ids,\\n        uint256[] calldata, // values,\\n        bytes calldata // data\\n    ) external virtual override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\",\"keccak256\":\"0x2edae817d0e12f236bfafdd15a1a3ae25df8281c2b61285b1bdbc5a898f5418c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"contracts/Payfluence.sol:Payfluence","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":156,"contract":"contracts/Payfluence.sol:Payfluence","label":"_pendingOwner","offset":0,"slot":"1","type":"t_address"},{"astId":677,"contract":"contracts/Payfluence.sol:Payfluence","label":"_status","offset":0,"slot":"2","type":"t_uint256"},{"astId":1702,"contract":"contracts/Payfluence.sol:Payfluence","label":"_nameFallback","offset":0,"slot":"3","type":"t_string_storage"},{"astId":1704,"contract":"contracts/Payfluence.sol:Payfluence","label":"_versionFallback","offset":0,"slot":"4","type":"t_string_storage"},{"astId":3581,"contract":"contracts/Payfluence.sol:Payfluence","label":"totalNativeBalance","offset":0,"slot":"5","type":"t_uint256"},{"astId":3605,"contract":"contracts/Payfluence.sol:Payfluence","label":"contractBalance","offset":0,"slot":"6","type":"t_mapping(t_string_memory_ptr,t_struct(AssetBalance)3600_storage)"},{"astId":3610,"contract":"contracts/Payfluence.sol:Payfluence","label":"assetTypeMap","offset":0,"slot":"7","type":"t_mapping(t_address,t_enum(AssetType)3578)"},{"astId":3164,"contract":"contracts/Payfluence.sol:Payfluence","label":"adminAddress","offset":0,"slot":"8","type":"t_address"},{"astId":3168,"contract":"contracts/Payfluence.sol:Payfluence","label":"airdropOwners","offset":0,"slot":"9","type":"t_mapping(t_string_memory_ptr,t_address)"},{"astId":3174,"contract":"contracts/Payfluence.sol:Payfluence","label":"airdropClaimedAmounts","offset":0,"slot":"10","type":"t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_enum(AssetType)3578":{"encoding":"inplace","label":"enum TokenReceiver.AssetType","numberOfBytes":"1"},"t_mapping(t_address,t_enum(AssetType)3578)":{"encoding":"mapping","key":"t_address","label":"mapping(address => enum TokenReceiver.AssetType)","numberOfBytes":"32","value":"t_enum(AssetType)3578"},"t_mapping(t_address,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_string_memory_ptr,t_address)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_string_memory_ptr,t_struct(AssetBalance)3600_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct TokenReceiver.AssetBalance)","numberOfBytes":"32","value":"t_struct(AssetBalance)3600_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AssetBalance)3600_storage":{"encoding":"inplace","label":"struct TokenReceiver.AssetBalance","members":[{"astId":3583,"contract":"contracts/Payfluence.sol:Payfluence","label":"native","offset":0,"slot":"0","type":"t_uint256"},{"astId":3587,"contract":"contracts/Payfluence.sol:Payfluence","label":"erc20","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":3593,"contract":"contracts/Payfluence.sol:Payfluence","label":"erc721","offset":0,"slot":"2","type":"t_mapping(t_address,t_mapping(t_uint256,t_bool))"},{"astId":3599,"contract":"contracts/Payfluence.sol:Payfluence","label":"erc1155","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TokenReceiver.sol":{"TokenReceiver":{"abi":[{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"address","name":"token","type":"address"}],"name":"AssetNotFound","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"AssetTypeNotFoundForToken","type":"error"},{"inputs":[{"internalType":"enum TokenReceiver.AssetType","name":"assetType","type":"uint8"}],"name":"InvalidAssetType","type":"error"},{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"enum TokenReceiver.AssetType","name":"assetType","type":"uint8"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NotEnoughFunds","type":"error"},{"inputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferNativeFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ERC1155BatchReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenIds","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amounts","type":"uint256"}],"name":"ERC1155Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ERC20Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721Received","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"id","type":"string"},{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NativeReceived","type":"event"},{"inputs":[{"internalType":"string","name":"id","type":"string"}],"name":"contractBalance","outputs":[{"internalType":"uint256","name":"native","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60806040526000805534801561001457600080fd5b5061096c806100246000396000f3fe60806040526004361061004e5760003560e01c806301ffc9a71461005a578063150b7a0214610097578063bc197c81146100d4578063f23a6e6114610111578063ffb1500e1461014e57610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906103a8565b61018b565b60405161008e91906103f0565b60405180910390f35b3480156100a357600080fd5b506100be60048036038101906100b99190610504565b6102c5565b6040516100cb919061059b565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f6919061060c565b6102da565b604051610108919061059b565b60405180910390f35b34801561011d57600080fd5b50610138600480360381019061013391906106e8565b6102f2565b604051610145919061059b565b60405180910390f35b34801561015a57600080fd5b50610175600480360381019061017091906108c3565b610308565b604051610182919061091b565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061025657507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806102be57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b600063bc197c8160e01b905098975050505050505050565b600063f23a6e6160e01b90509695505050505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090508060000154905081565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61038581610350565b811461039057600080fd5b50565b6000813590506103a28161037c565b92915050565b6000602082840312156103be576103bd610346565b5b60006103cc84828501610393565b91505092915050565b60008115159050919050565b6103ea816103d5565b82525050565b600060208201905061040560008301846103e1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104368261040b565b9050919050565b6104468161042b565b811461045157600080fd5b50565b6000813590506104638161043d565b92915050565b6000819050919050565b61047c81610469565b811461048757600080fd5b50565b60008135905061049981610473565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104c4576104c361049f565b5b8235905067ffffffffffffffff8111156104e1576104e06104a4565b5b6020830191508360018202830111156104fd576104fc6104a9565b5b9250929050565b6000806000806000608086880312156105205761051f610346565b5b600061052e88828901610454565b955050602061053f88828901610454565b94505060406105508882890161048a565b935050606086013567ffffffffffffffff8111156105715761057061034b565b5b61057d888289016104ae565b92509250509295509295909350565b61059581610350565b82525050565b60006020820190506105b0600083018461058c565b92915050565b60008083601f8401126105cc576105cb61049f565b5b8235905067ffffffffffffffff8111156105e9576105e86104a4565b5b602083019150836020820283011115610605576106046104a9565b5b9250929050565b60008060008060008060008060a0898b03121561062c5761062b610346565b5b600061063a8b828c01610454565b985050602061064b8b828c01610454565b975050604089013567ffffffffffffffff81111561066c5761066b61034b565b5b6106788b828c016105b6565b9650965050606089013567ffffffffffffffff81111561069b5761069a61034b565b5b6106a78b828c016105b6565b9450945050608089013567ffffffffffffffff8111156106ca576106c961034b565b5b6106d68b828c016104ae565b92509250509295985092959890939650565b60008060008060008060a0878903121561070557610704610346565b5b600061071389828a01610454565b965050602061072489828a01610454565b955050604061073589828a0161048a565b945050606061074689828a0161048a565b935050608087013567ffffffffffffffff8111156107675761076661034b565b5b61077389828a016104ae565b92509250509295509295509295565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107d082610787565b810181811067ffffffffffffffff821117156107ef576107ee610798565b5b80604052505050565b600061080261033c565b905061080e82826107c7565b919050565b600067ffffffffffffffff82111561082e5761082d610798565b5b61083782610787565b9050602081019050919050565b82818337600083830152505050565b600061086661086184610813565b6107f8565b90508281526020810184848401111561088257610881610782565b5b61088d848285610844565b509392505050565b600082601f8301126108aa576108a961049f565b5b81356108ba848260208601610853565b91505092915050565b6000602082840312156108d9576108d8610346565b5b600082013567ffffffffffffffff8111156108f7576108f661034b565b5b61090384828501610895565b91505092915050565b61091581610469565b82525050565b6000602082019050610930600083018461090c565b9291505056fea2646970667358221220fc2ed18d477743e567f5b29aafdf82fe34eaa4fb7e576097c00094e6c5f7be4e64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x96C DUP1 PUSH2 0x24 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0xFFB1500E EQ PUSH2 0x14E JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB9 SWAP2 SWAP1 PUSH2 0x504 JUMP JUMPDEST PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x60C JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108 SWAP2 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x2F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x256 JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x2BE JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x385 DUP2 PUSH2 0x350 JUMP JUMPDEST DUP2 EQ PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3A2 DUP2 PUSH2 0x37C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BE JUMPI PUSH2 0x3BD PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3CC DUP5 DUP3 DUP6 ADD PUSH2 0x393 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EA DUP2 PUSH2 0x3D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x405 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436 DUP3 PUSH2 0x40B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x446 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP2 EQ PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x463 DUP2 PUSH2 0x43D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x47C DUP2 PUSH2 0x469 JUMP JUMPDEST DUP2 EQ PUSH2 0x487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x499 DUP2 PUSH2 0x473 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4C4 JUMPI PUSH2 0x4C3 PUSH2 0x49F JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4E1 JUMPI PUSH2 0x4E0 PUSH2 0x4A4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x4FD JUMPI PUSH2 0x4FC PUSH2 0x4A9 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x520 JUMPI PUSH2 0x51F PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x52E DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x53F DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x550 DUP9 DUP3 DUP10 ADD PUSH2 0x48A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x571 JUMPI PUSH2 0x570 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x57D DUP9 DUP3 DUP10 ADD PUSH2 0x4AE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x595 DUP2 PUSH2 0x350 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5B0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x58C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x5CC JUMPI PUSH2 0x5CB PUSH2 0x49F JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5E9 JUMPI PUSH2 0x5E8 PUSH2 0x4A4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x605 JUMPI PUSH2 0x604 PUSH2 0x4A9 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x62C JUMPI PUSH2 0x62B PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x63A DUP12 DUP3 DUP13 ADD PUSH2 0x454 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x64B DUP12 DUP3 DUP13 ADD PUSH2 0x454 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x66C JUMPI PUSH2 0x66B PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x678 DUP12 DUP3 DUP13 ADD PUSH2 0x5B6 JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x69B JUMPI PUSH2 0x69A PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x6A7 DUP12 DUP3 DUP13 ADD PUSH2 0x5B6 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6CA JUMPI PUSH2 0x6C9 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x6D6 DUP12 DUP3 DUP13 ADD PUSH2 0x4AE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x705 JUMPI PUSH2 0x704 PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x713 DUP10 DUP3 DUP11 ADD PUSH2 0x454 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x724 DUP10 DUP3 DUP11 ADD PUSH2 0x454 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x735 DUP10 DUP3 DUP11 ADD PUSH2 0x48A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x746 DUP10 DUP3 DUP11 ADD PUSH2 0x48A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x767 JUMPI PUSH2 0x766 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x773 DUP10 DUP3 DUP11 ADD PUSH2 0x4AE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x7D0 DUP3 PUSH2 0x787 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7EF JUMPI PUSH2 0x7EE PUSH2 0x798 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x802 PUSH2 0x33C JUMP JUMPDEST SWAP1 POP PUSH2 0x80E DUP3 DUP3 PUSH2 0x7C7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x82E JUMPI PUSH2 0x82D PUSH2 0x798 JUMP JUMPDEST JUMPDEST PUSH2 0x837 DUP3 PUSH2 0x787 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 PUSH2 0x861 DUP5 PUSH2 0x813 JUMP JUMPDEST PUSH2 0x7F8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x882 JUMPI PUSH2 0x881 PUSH2 0x782 JUMP JUMPDEST JUMPDEST PUSH2 0x88D DUP5 DUP3 DUP6 PUSH2 0x844 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8AA JUMPI PUSH2 0x8A9 PUSH2 0x49F JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8BA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x853 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D9 JUMPI PUSH2 0x8D8 PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8F7 JUMPI PUSH2 0x8F6 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x903 DUP5 DUP3 DUP6 ADD PUSH2 0x895 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x915 DUP2 PUSH2 0x469 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x930 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0x2E 0xD1 DUP14 SELFBALANCE PUSH24 0x43E567F5B29AAFDF82FE34EAA4FB7E576097C00094E6C5F7 0xBE 0x4E PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"372:7968:20:-:0;;;580:1;551:30;;372:7968;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_3785":{"entryPoint":null,"id":3785,"parameterSlots":0,"returnSlots":0},"@contractBalance_3605":{"entryPoint":776,"id":3605,"parameterSlots":0,"returnSlots":0},"@onERC1155BatchReceived_4365":{"entryPoint":730,"id":4365,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_4344":{"entryPoint":754,"id":4344,"parameterSlots":6,"returnSlots":1},"@onERC721Received_4325":{"entryPoint":709,"id":4325,"parameterSlots":5,"returnSlots":1},"@supportsInterface_4395":{"entryPoint":395,"id":4395,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":2131,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":1108,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":1462,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes4":{"entryPoint":915,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":1198,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_memory_ptr":{"entryPoint":2197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":1162,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":1548,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":1284,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":1768,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes4":{"entryPoint":936,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":2243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":993,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes4_to_t_bytes4_fromStack":{"entryPoint":1420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2316,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":1008,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2331,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2040,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":828,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":2067,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1067,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":981,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":848,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1035,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1129,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":2116,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1991,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":1944,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":1188,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1183,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1193,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1922,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":843,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":838,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1927,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":1085,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1139,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:10876:21","nodeType":"YulBlock","src":"0:10876:21","statements":[{"body":{"nativeSrc":"47:35:21","nodeType":"YulBlock","src":"47:35:21","statements":[{"nativeSrc":"57:19:21","nodeType":"YulAssignment","src":"57:19:21","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:21","nodeType":"YulLiteral","src":"73:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:21","nodeType":"YulIdentifier","src":"67:5:21"},"nativeSrc":"67:9:21","nodeType":"YulFunctionCall","src":"67:9:21"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:21","nodeType":"YulIdentifier","src":"57:6:21"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:21","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:21","nodeType":"YulTypedName","src":"40:6:21","type":""}],"src":"7:75:21"},{"body":{"nativeSrc":"177:28:21","nodeType":"YulBlock","src":"177:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:21","nodeType":"YulLiteral","src":"194:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:21","nodeType":"YulLiteral","src":"197:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:21","nodeType":"YulIdentifier","src":"187:6:21"},"nativeSrc":"187:12:21","nodeType":"YulFunctionCall","src":"187:12:21"},"nativeSrc":"187:12:21","nodeType":"YulExpressionStatement","src":"187:12:21"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:21","nodeType":"YulFunctionDefinition","src":"88:117:21"},{"body":{"nativeSrc":"300:28:21","nodeType":"YulBlock","src":"300:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:21","nodeType":"YulLiteral","src":"317:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:21","nodeType":"YulLiteral","src":"320:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:21","nodeType":"YulIdentifier","src":"310:6:21"},"nativeSrc":"310:12:21","nodeType":"YulFunctionCall","src":"310:12:21"},"nativeSrc":"310:12:21","nodeType":"YulExpressionStatement","src":"310:12:21"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:21","nodeType":"YulFunctionDefinition","src":"211:117:21"},{"body":{"nativeSrc":"378:105:21","nodeType":"YulBlock","src":"378:105:21","statements":[{"nativeSrc":"388:89:21","nodeType":"YulAssignment","src":"388:89:21","value":{"arguments":[{"name":"value","nativeSrc":"403:5:21","nodeType":"YulIdentifier","src":"403:5:21"},{"kind":"number","nativeSrc":"410:66:21","nodeType":"YulLiteral","src":"410:66:21","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:21","nodeType":"YulIdentifier","src":"399:3:21"},"nativeSrc":"399:78:21","nodeType":"YulFunctionCall","src":"399:78:21"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:21","nodeType":"YulIdentifier","src":"388:7:21"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:21","nodeType":"YulTypedName","src":"360:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:21","nodeType":"YulTypedName","src":"370:7:21","type":""}],"src":"334:149:21"},{"body":{"nativeSrc":"531:78:21","nodeType":"YulBlock","src":"531:78:21","statements":[{"body":{"nativeSrc":"587:16:21","nodeType":"YulBlock","src":"587:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:21","nodeType":"YulLiteral","src":"596:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:21","nodeType":"YulLiteral","src":"599:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:21","nodeType":"YulIdentifier","src":"589:6:21"},"nativeSrc":"589:12:21","nodeType":"YulFunctionCall","src":"589:12:21"},"nativeSrc":"589:12:21","nodeType":"YulExpressionStatement","src":"589:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:21","nodeType":"YulIdentifier","src":"554:5:21"},{"arguments":[{"name":"value","nativeSrc":"578:5:21","nodeType":"YulIdentifier","src":"578:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:21","nodeType":"YulIdentifier","src":"561:16:21"},"nativeSrc":"561:23:21","nodeType":"YulFunctionCall","src":"561:23:21"}],"functionName":{"name":"eq","nativeSrc":"551:2:21","nodeType":"YulIdentifier","src":"551:2:21"},"nativeSrc":"551:34:21","nodeType":"YulFunctionCall","src":"551:34:21"}],"functionName":{"name":"iszero","nativeSrc":"544:6:21","nodeType":"YulIdentifier","src":"544:6:21"},"nativeSrc":"544:42:21","nodeType":"YulFunctionCall","src":"544:42:21"},"nativeSrc":"541:62:21","nodeType":"YulIf","src":"541:62:21"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:21","nodeType":"YulTypedName","src":"524:5:21","type":""}],"src":"489:120:21"},{"body":{"nativeSrc":"666:86:21","nodeType":"YulBlock","src":"666:86:21","statements":[{"nativeSrc":"676:29:21","nodeType":"YulAssignment","src":"676:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:21","nodeType":"YulIdentifier","src":"698:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:21","nodeType":"YulIdentifier","src":"685:12:21"},"nativeSrc":"685:20:21","nodeType":"YulFunctionCall","src":"685:20:21"},"variableNames":[{"name":"value","nativeSrc":"676:5:21","nodeType":"YulIdentifier","src":"676:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:21","nodeType":"YulIdentifier","src":"740:5:21"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:21","nodeType":"YulIdentifier","src":"714:25:21"},"nativeSrc":"714:32:21","nodeType":"YulFunctionCall","src":"714:32:21"},"nativeSrc":"714:32:21","nodeType":"YulExpressionStatement","src":"714:32:21"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:21","nodeType":"YulTypedName","src":"644:6:21","type":""},{"name":"end","nativeSrc":"652:3:21","nodeType":"YulTypedName","src":"652:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:21","nodeType":"YulTypedName","src":"660:5:21","type":""}],"src":"615:137:21"},{"body":{"nativeSrc":"823:262:21","nodeType":"YulBlock","src":"823:262:21","statements":[{"body":{"nativeSrc":"869:83:21","nodeType":"YulBlock","src":"869:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:21","nodeType":"YulIdentifier","src":"871:77:21"},"nativeSrc":"871:79:21","nodeType":"YulFunctionCall","src":"871:79:21"},"nativeSrc":"871:79:21","nodeType":"YulExpressionStatement","src":"871:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:21","nodeType":"YulIdentifier","src":"844:7:21"},{"name":"headStart","nativeSrc":"853:9:21","nodeType":"YulIdentifier","src":"853:9:21"}],"functionName":{"name":"sub","nativeSrc":"840:3:21","nodeType":"YulIdentifier","src":"840:3:21"},"nativeSrc":"840:23:21","nodeType":"YulFunctionCall","src":"840:23:21"},{"kind":"number","nativeSrc":"865:2:21","nodeType":"YulLiteral","src":"865:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:21","nodeType":"YulIdentifier","src":"836:3:21"},"nativeSrc":"836:32:21","nodeType":"YulFunctionCall","src":"836:32:21"},"nativeSrc":"833:119:21","nodeType":"YulIf","src":"833:119:21"},{"nativeSrc":"962:116:21","nodeType":"YulBlock","src":"962:116:21","statements":[{"nativeSrc":"977:15:21","nodeType":"YulVariableDeclaration","src":"977:15:21","value":{"kind":"number","nativeSrc":"991:1:21","nodeType":"YulLiteral","src":"991:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:21","nodeType":"YulTypedName","src":"981:6:21","type":""}]},{"nativeSrc":"1006:62:21","nodeType":"YulAssignment","src":"1006:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:21","nodeType":"YulIdentifier","src":"1040:9:21"},{"name":"offset","nativeSrc":"1051:6:21","nodeType":"YulIdentifier","src":"1051:6:21"}],"functionName":{"name":"add","nativeSrc":"1036:3:21","nodeType":"YulIdentifier","src":"1036:3:21"},"nativeSrc":"1036:22:21","nodeType":"YulFunctionCall","src":"1036:22:21"},{"name":"dataEnd","nativeSrc":"1060:7:21","nodeType":"YulIdentifier","src":"1060:7:21"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:21","nodeType":"YulIdentifier","src":"1016:19:21"},"nativeSrc":"1016:52:21","nodeType":"YulFunctionCall","src":"1016:52:21"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:21","nodeType":"YulIdentifier","src":"1006:6:21"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:21","nodeType":"YulTypedName","src":"793:9:21","type":""},{"name":"dataEnd","nativeSrc":"804:7:21","nodeType":"YulTypedName","src":"804:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:21","nodeType":"YulTypedName","src":"816:6:21","type":""}],"src":"758:327:21"},{"body":{"nativeSrc":"1133:48:21","nodeType":"YulBlock","src":"1133:48:21","statements":[{"nativeSrc":"1143:32:21","nodeType":"YulAssignment","src":"1143:32:21","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:21","nodeType":"YulIdentifier","src":"1168:5:21"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:21","nodeType":"YulIdentifier","src":"1161:6:21"},"nativeSrc":"1161:13:21","nodeType":"YulFunctionCall","src":"1161:13:21"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:21","nodeType":"YulIdentifier","src":"1154:6:21"},"nativeSrc":"1154:21:21","nodeType":"YulFunctionCall","src":"1154:21:21"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:21","nodeType":"YulIdentifier","src":"1143:7:21"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:21","nodeType":"YulTypedName","src":"1115:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:21","nodeType":"YulTypedName","src":"1125:7:21","type":""}],"src":"1091:90:21"},{"body":{"nativeSrc":"1246:50:21","nodeType":"YulBlock","src":"1246:50:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:21","nodeType":"YulIdentifier","src":"1263:3:21"},{"arguments":[{"name":"value","nativeSrc":"1283:5:21","nodeType":"YulIdentifier","src":"1283:5:21"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:21","nodeType":"YulIdentifier","src":"1268:14:21"},"nativeSrc":"1268:21:21","nodeType":"YulFunctionCall","src":"1268:21:21"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:21","nodeType":"YulIdentifier","src":"1256:6:21"},"nativeSrc":"1256:34:21","nodeType":"YulFunctionCall","src":"1256:34:21"},"nativeSrc":"1256:34:21","nodeType":"YulExpressionStatement","src":"1256:34:21"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:21","nodeType":"YulTypedName","src":"1234:5:21","type":""},{"name":"pos","nativeSrc":"1241:3:21","nodeType":"YulTypedName","src":"1241:3:21","type":""}],"src":"1187:109:21"},{"body":{"nativeSrc":"1394:118:21","nodeType":"YulBlock","src":"1394:118:21","statements":[{"nativeSrc":"1404:26:21","nodeType":"YulAssignment","src":"1404:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:21","nodeType":"YulIdentifier","src":"1416:9:21"},{"kind":"number","nativeSrc":"1427:2:21","nodeType":"YulLiteral","src":"1427:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:21","nodeType":"YulIdentifier","src":"1412:3:21"},"nativeSrc":"1412:18:21","nodeType":"YulFunctionCall","src":"1412:18:21"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:21","nodeType":"YulIdentifier","src":"1404:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:21","nodeType":"YulIdentifier","src":"1478:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:21","nodeType":"YulIdentifier","src":"1491:9:21"},{"kind":"number","nativeSrc":"1502:1:21","nodeType":"YulLiteral","src":"1502:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:21","nodeType":"YulIdentifier","src":"1487:3:21"},"nativeSrc":"1487:17:21","nodeType":"YulFunctionCall","src":"1487:17:21"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:21","nodeType":"YulIdentifier","src":"1440:37:21"},"nativeSrc":"1440:65:21","nodeType":"YulFunctionCall","src":"1440:65:21"},"nativeSrc":"1440:65:21","nodeType":"YulExpressionStatement","src":"1440:65:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:21","nodeType":"YulTypedName","src":"1366:9:21","type":""},{"name":"value0","nativeSrc":"1378:6:21","nodeType":"YulTypedName","src":"1378:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:21","nodeType":"YulTypedName","src":"1389:4:21","type":""}],"src":"1302:210:21"},{"body":{"nativeSrc":"1563:81:21","nodeType":"YulBlock","src":"1563:81:21","statements":[{"nativeSrc":"1573:65:21","nodeType":"YulAssignment","src":"1573:65:21","value":{"arguments":[{"name":"value","nativeSrc":"1588:5:21","nodeType":"YulIdentifier","src":"1588:5:21"},{"kind":"number","nativeSrc":"1595:42:21","nodeType":"YulLiteral","src":"1595:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1584:3:21","nodeType":"YulIdentifier","src":"1584:3:21"},"nativeSrc":"1584:54:21","nodeType":"YulFunctionCall","src":"1584:54:21"},"variableNames":[{"name":"cleaned","nativeSrc":"1573:7:21","nodeType":"YulIdentifier","src":"1573:7:21"}]}]},"name":"cleanup_t_uint160","nativeSrc":"1518:126:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1545:5:21","nodeType":"YulTypedName","src":"1545:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1555:7:21","nodeType":"YulTypedName","src":"1555:7:21","type":""}],"src":"1518:126:21"},{"body":{"nativeSrc":"1695:51:21","nodeType":"YulBlock","src":"1695:51:21","statements":[{"nativeSrc":"1705:35:21","nodeType":"YulAssignment","src":"1705:35:21","value":{"arguments":[{"name":"value","nativeSrc":"1734:5:21","nodeType":"YulIdentifier","src":"1734:5:21"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"1716:17:21","nodeType":"YulIdentifier","src":"1716:17:21"},"nativeSrc":"1716:24:21","nodeType":"YulFunctionCall","src":"1716:24:21"},"variableNames":[{"name":"cleaned","nativeSrc":"1705:7:21","nodeType":"YulIdentifier","src":"1705:7:21"}]}]},"name":"cleanup_t_address","nativeSrc":"1650:96:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1677:5:21","nodeType":"YulTypedName","src":"1677:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1687:7:21","nodeType":"YulTypedName","src":"1687:7:21","type":""}],"src":"1650:96:21"},{"body":{"nativeSrc":"1795:79:21","nodeType":"YulBlock","src":"1795:79:21","statements":[{"body":{"nativeSrc":"1852:16:21","nodeType":"YulBlock","src":"1852:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1861:1:21","nodeType":"YulLiteral","src":"1861:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"1864:1:21","nodeType":"YulLiteral","src":"1864:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1854:6:21","nodeType":"YulIdentifier","src":"1854:6:21"},"nativeSrc":"1854:12:21","nodeType":"YulFunctionCall","src":"1854:12:21"},"nativeSrc":"1854:12:21","nodeType":"YulExpressionStatement","src":"1854:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1818:5:21","nodeType":"YulIdentifier","src":"1818:5:21"},{"arguments":[{"name":"value","nativeSrc":"1843:5:21","nodeType":"YulIdentifier","src":"1843:5:21"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"1825:17:21","nodeType":"YulIdentifier","src":"1825:17:21"},"nativeSrc":"1825:24:21","nodeType":"YulFunctionCall","src":"1825:24:21"}],"functionName":{"name":"eq","nativeSrc":"1815:2:21","nodeType":"YulIdentifier","src":"1815:2:21"},"nativeSrc":"1815:35:21","nodeType":"YulFunctionCall","src":"1815:35:21"}],"functionName":{"name":"iszero","nativeSrc":"1808:6:21","nodeType":"YulIdentifier","src":"1808:6:21"},"nativeSrc":"1808:43:21","nodeType":"YulFunctionCall","src":"1808:43:21"},"nativeSrc":"1805:63:21","nodeType":"YulIf","src":"1805:63:21"}]},"name":"validator_revert_t_address","nativeSrc":"1752:122:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1788:5:21","nodeType":"YulTypedName","src":"1788:5:21","type":""}],"src":"1752:122:21"},{"body":{"nativeSrc":"1932:87:21","nodeType":"YulBlock","src":"1932:87:21","statements":[{"nativeSrc":"1942:29:21","nodeType":"YulAssignment","src":"1942:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"1964:6:21","nodeType":"YulIdentifier","src":"1964:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"1951:12:21","nodeType":"YulIdentifier","src":"1951:12:21"},"nativeSrc":"1951:20:21","nodeType":"YulFunctionCall","src":"1951:20:21"},"variableNames":[{"name":"value","nativeSrc":"1942:5:21","nodeType":"YulIdentifier","src":"1942:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2007:5:21","nodeType":"YulIdentifier","src":"2007:5:21"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"1980:26:21","nodeType":"YulIdentifier","src":"1980:26:21"},"nativeSrc":"1980:33:21","nodeType":"YulFunctionCall","src":"1980:33:21"},"nativeSrc":"1980:33:21","nodeType":"YulExpressionStatement","src":"1980:33:21"}]},"name":"abi_decode_t_address","nativeSrc":"1880:139:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1910:6:21","nodeType":"YulTypedName","src":"1910:6:21","type":""},{"name":"end","nativeSrc":"1918:3:21","nodeType":"YulTypedName","src":"1918:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1926:5:21","nodeType":"YulTypedName","src":"1926:5:21","type":""}],"src":"1880:139:21"},{"body":{"nativeSrc":"2070:32:21","nodeType":"YulBlock","src":"2070:32:21","statements":[{"nativeSrc":"2080:16:21","nodeType":"YulAssignment","src":"2080:16:21","value":{"name":"value","nativeSrc":"2091:5:21","nodeType":"YulIdentifier","src":"2091:5:21"},"variableNames":[{"name":"cleaned","nativeSrc":"2080:7:21","nodeType":"YulIdentifier","src":"2080:7:21"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2025:77:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2052:5:21","nodeType":"YulTypedName","src":"2052:5:21","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2062:7:21","nodeType":"YulTypedName","src":"2062:7:21","type":""}],"src":"2025:77:21"},{"body":{"nativeSrc":"2151:79:21","nodeType":"YulBlock","src":"2151:79:21","statements":[{"body":{"nativeSrc":"2208:16:21","nodeType":"YulBlock","src":"2208:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2217:1:21","nodeType":"YulLiteral","src":"2217:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2220:1:21","nodeType":"YulLiteral","src":"2220:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2210:6:21","nodeType":"YulIdentifier","src":"2210:6:21"},"nativeSrc":"2210:12:21","nodeType":"YulFunctionCall","src":"2210:12:21"},"nativeSrc":"2210:12:21","nodeType":"YulExpressionStatement","src":"2210:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2174:5:21","nodeType":"YulIdentifier","src":"2174:5:21"},{"arguments":[{"name":"value","nativeSrc":"2199:5:21","nodeType":"YulIdentifier","src":"2199:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"2181:17:21","nodeType":"YulIdentifier","src":"2181:17:21"},"nativeSrc":"2181:24:21","nodeType":"YulFunctionCall","src":"2181:24:21"}],"functionName":{"name":"eq","nativeSrc":"2171:2:21","nodeType":"YulIdentifier","src":"2171:2:21"},"nativeSrc":"2171:35:21","nodeType":"YulFunctionCall","src":"2171:35:21"}],"functionName":{"name":"iszero","nativeSrc":"2164:6:21","nodeType":"YulIdentifier","src":"2164:6:21"},"nativeSrc":"2164:43:21","nodeType":"YulFunctionCall","src":"2164:43:21"},"nativeSrc":"2161:63:21","nodeType":"YulIf","src":"2161:63:21"}]},"name":"validator_revert_t_uint256","nativeSrc":"2108:122:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2144:5:21","nodeType":"YulTypedName","src":"2144:5:21","type":""}],"src":"2108:122:21"},{"body":{"nativeSrc":"2288:87:21","nodeType":"YulBlock","src":"2288:87:21","statements":[{"nativeSrc":"2298:29:21","nodeType":"YulAssignment","src":"2298:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"2320:6:21","nodeType":"YulIdentifier","src":"2320:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"2307:12:21","nodeType":"YulIdentifier","src":"2307:12:21"},"nativeSrc":"2307:20:21","nodeType":"YulFunctionCall","src":"2307:20:21"},"variableNames":[{"name":"value","nativeSrc":"2298:5:21","nodeType":"YulIdentifier","src":"2298:5:21"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2363:5:21","nodeType":"YulIdentifier","src":"2363:5:21"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"2336:26:21","nodeType":"YulIdentifier","src":"2336:26:21"},"nativeSrc":"2336:33:21","nodeType":"YulFunctionCall","src":"2336:33:21"},"nativeSrc":"2336:33:21","nodeType":"YulExpressionStatement","src":"2336:33:21"}]},"name":"abi_decode_t_uint256","nativeSrc":"2236:139:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2266:6:21","nodeType":"YulTypedName","src":"2266:6:21","type":""},{"name":"end","nativeSrc":"2274:3:21","nodeType":"YulTypedName","src":"2274:3:21","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2282:5:21","nodeType":"YulTypedName","src":"2282:5:21","type":""}],"src":"2236:139:21"},{"body":{"nativeSrc":"2470:28:21","nodeType":"YulBlock","src":"2470:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2487:1:21","nodeType":"YulLiteral","src":"2487:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2490:1:21","nodeType":"YulLiteral","src":"2490:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2480:6:21","nodeType":"YulIdentifier","src":"2480:6:21"},"nativeSrc":"2480:12:21","nodeType":"YulFunctionCall","src":"2480:12:21"},"nativeSrc":"2480:12:21","nodeType":"YulExpressionStatement","src":"2480:12:21"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2381:117:21","nodeType":"YulFunctionDefinition","src":"2381:117:21"},{"body":{"nativeSrc":"2593:28:21","nodeType":"YulBlock","src":"2593:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2610:1:21","nodeType":"YulLiteral","src":"2610:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2613:1:21","nodeType":"YulLiteral","src":"2613:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2603:6:21","nodeType":"YulIdentifier","src":"2603:6:21"},"nativeSrc":"2603:12:21","nodeType":"YulFunctionCall","src":"2603:12:21"},"nativeSrc":"2603:12:21","nodeType":"YulExpressionStatement","src":"2603:12:21"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"2504:117:21","nodeType":"YulFunctionDefinition","src":"2504:117:21"},{"body":{"nativeSrc":"2716:28:21","nodeType":"YulBlock","src":"2716:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2733:1:21","nodeType":"YulLiteral","src":"2733:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"2736:1:21","nodeType":"YulLiteral","src":"2736:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2726:6:21","nodeType":"YulIdentifier","src":"2726:6:21"},"nativeSrc":"2726:12:21","nodeType":"YulFunctionCall","src":"2726:12:21"},"nativeSrc":"2726:12:21","nodeType":"YulExpressionStatement","src":"2726:12:21"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"2627:117:21","nodeType":"YulFunctionDefinition","src":"2627:117:21"},{"body":{"nativeSrc":"2837:478:21","nodeType":"YulBlock","src":"2837:478:21","statements":[{"body":{"nativeSrc":"2886:83:21","nodeType":"YulBlock","src":"2886:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2888:77:21","nodeType":"YulIdentifier","src":"2888:77:21"},"nativeSrc":"2888:79:21","nodeType":"YulFunctionCall","src":"2888:79:21"},"nativeSrc":"2888:79:21","nodeType":"YulExpressionStatement","src":"2888:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2865:6:21","nodeType":"YulIdentifier","src":"2865:6:21"},{"kind":"number","nativeSrc":"2873:4:21","nodeType":"YulLiteral","src":"2873:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2861:3:21","nodeType":"YulIdentifier","src":"2861:3:21"},"nativeSrc":"2861:17:21","nodeType":"YulFunctionCall","src":"2861:17:21"},{"name":"end","nativeSrc":"2880:3:21","nodeType":"YulIdentifier","src":"2880:3:21"}],"functionName":{"name":"slt","nativeSrc":"2857:3:21","nodeType":"YulIdentifier","src":"2857:3:21"},"nativeSrc":"2857:27:21","nodeType":"YulFunctionCall","src":"2857:27:21"}],"functionName":{"name":"iszero","nativeSrc":"2850:6:21","nodeType":"YulIdentifier","src":"2850:6:21"},"nativeSrc":"2850:35:21","nodeType":"YulFunctionCall","src":"2850:35:21"},"nativeSrc":"2847:122:21","nodeType":"YulIf","src":"2847:122:21"},{"nativeSrc":"2978:30:21","nodeType":"YulAssignment","src":"2978:30:21","value":{"arguments":[{"name":"offset","nativeSrc":"3001:6:21","nodeType":"YulIdentifier","src":"3001:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"2988:12:21","nodeType":"YulIdentifier","src":"2988:12:21"},"nativeSrc":"2988:20:21","nodeType":"YulFunctionCall","src":"2988:20:21"},"variableNames":[{"name":"length","nativeSrc":"2978:6:21","nodeType":"YulIdentifier","src":"2978:6:21"}]},{"body":{"nativeSrc":"3051:83:21","nodeType":"YulBlock","src":"3051:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"3053:77:21","nodeType":"YulIdentifier","src":"3053:77:21"},"nativeSrc":"3053:79:21","nodeType":"YulFunctionCall","src":"3053:79:21"},"nativeSrc":"3053:79:21","nodeType":"YulExpressionStatement","src":"3053:79:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3023:6:21","nodeType":"YulIdentifier","src":"3023:6:21"},{"kind":"number","nativeSrc":"3031:18:21","nodeType":"YulLiteral","src":"3031:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3020:2:21","nodeType":"YulIdentifier","src":"3020:2:21"},"nativeSrc":"3020:30:21","nodeType":"YulFunctionCall","src":"3020:30:21"},"nativeSrc":"3017:117:21","nodeType":"YulIf","src":"3017:117:21"},{"nativeSrc":"3143:29:21","nodeType":"YulAssignment","src":"3143:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"3159:6:21","nodeType":"YulIdentifier","src":"3159:6:21"},{"kind":"number","nativeSrc":"3167:4:21","nodeType":"YulLiteral","src":"3167:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3155:3:21","nodeType":"YulIdentifier","src":"3155:3:21"},"nativeSrc":"3155:17:21","nodeType":"YulFunctionCall","src":"3155:17:21"},"variableNames":[{"name":"arrayPos","nativeSrc":"3143:8:21","nodeType":"YulIdentifier","src":"3143:8:21"}]},{"body":{"nativeSrc":"3226:83:21","nodeType":"YulBlock","src":"3226:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"3228:77:21","nodeType":"YulIdentifier","src":"3228:77:21"},"nativeSrc":"3228:79:21","nodeType":"YulFunctionCall","src":"3228:79:21"},"nativeSrc":"3228:79:21","nodeType":"YulExpressionStatement","src":"3228:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nativeSrc":"3191:8:21","nodeType":"YulIdentifier","src":"3191:8:21"},{"arguments":[{"name":"length","nativeSrc":"3205:6:21","nodeType":"YulIdentifier","src":"3205:6:21"},{"kind":"number","nativeSrc":"3213:4:21","nodeType":"YulLiteral","src":"3213:4:21","type":"","value":"0x01"}],"functionName":{"name":"mul","nativeSrc":"3201:3:21","nodeType":"YulIdentifier","src":"3201:3:21"},"nativeSrc":"3201:17:21","nodeType":"YulFunctionCall","src":"3201:17:21"}],"functionName":{"name":"add","nativeSrc":"3187:3:21","nodeType":"YulIdentifier","src":"3187:3:21"},"nativeSrc":"3187:32:21","nodeType":"YulFunctionCall","src":"3187:32:21"},{"name":"end","nativeSrc":"3221:3:21","nodeType":"YulIdentifier","src":"3221:3:21"}],"functionName":{"name":"gt","nativeSrc":"3184:2:21","nodeType":"YulIdentifier","src":"3184:2:21"},"nativeSrc":"3184:41:21","nodeType":"YulFunctionCall","src":"3184:41:21"},"nativeSrc":"3181:128:21","nodeType":"YulIf","src":"3181:128:21"}]},"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"2763:552:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2804:6:21","nodeType":"YulTypedName","src":"2804:6:21","type":""},{"name":"end","nativeSrc":"2812:3:21","nodeType":"YulTypedName","src":"2812:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2820:8:21","nodeType":"YulTypedName","src":"2820:8:21","type":""},{"name":"length","nativeSrc":"2830:6:21","nodeType":"YulTypedName","src":"2830:6:21","type":""}],"src":"2763:552:21"},{"body":{"nativeSrc":"3457:827:21","nodeType":"YulBlock","src":"3457:827:21","statements":[{"body":{"nativeSrc":"3504:83:21","nodeType":"YulBlock","src":"3504:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3506:77:21","nodeType":"YulIdentifier","src":"3506:77:21"},"nativeSrc":"3506:79:21","nodeType":"YulFunctionCall","src":"3506:79:21"},"nativeSrc":"3506:79:21","nodeType":"YulExpressionStatement","src":"3506:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3478:7:21","nodeType":"YulIdentifier","src":"3478:7:21"},{"name":"headStart","nativeSrc":"3487:9:21","nodeType":"YulIdentifier","src":"3487:9:21"}],"functionName":{"name":"sub","nativeSrc":"3474:3:21","nodeType":"YulIdentifier","src":"3474:3:21"},"nativeSrc":"3474:23:21","nodeType":"YulFunctionCall","src":"3474:23:21"},{"kind":"number","nativeSrc":"3499:3:21","nodeType":"YulLiteral","src":"3499:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3470:3:21","nodeType":"YulIdentifier","src":"3470:3:21"},"nativeSrc":"3470:33:21","nodeType":"YulFunctionCall","src":"3470:33:21"},"nativeSrc":"3467:120:21","nodeType":"YulIf","src":"3467:120:21"},{"nativeSrc":"3597:117:21","nodeType":"YulBlock","src":"3597:117:21","statements":[{"nativeSrc":"3612:15:21","nodeType":"YulVariableDeclaration","src":"3612:15:21","value":{"kind":"number","nativeSrc":"3626:1:21","nodeType":"YulLiteral","src":"3626:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3616:6:21","nodeType":"YulTypedName","src":"3616:6:21","type":""}]},{"nativeSrc":"3641:63:21","nodeType":"YulAssignment","src":"3641:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3676:9:21","nodeType":"YulIdentifier","src":"3676:9:21"},{"name":"offset","nativeSrc":"3687:6:21","nodeType":"YulIdentifier","src":"3687:6:21"}],"functionName":{"name":"add","nativeSrc":"3672:3:21","nodeType":"YulIdentifier","src":"3672:3:21"},"nativeSrc":"3672:22:21","nodeType":"YulFunctionCall","src":"3672:22:21"},{"name":"dataEnd","nativeSrc":"3696:7:21","nodeType":"YulIdentifier","src":"3696:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"3651:20:21","nodeType":"YulIdentifier","src":"3651:20:21"},"nativeSrc":"3651:53:21","nodeType":"YulFunctionCall","src":"3651:53:21"},"variableNames":[{"name":"value0","nativeSrc":"3641:6:21","nodeType":"YulIdentifier","src":"3641:6:21"}]}]},{"nativeSrc":"3724:118:21","nodeType":"YulBlock","src":"3724:118:21","statements":[{"nativeSrc":"3739:16:21","nodeType":"YulVariableDeclaration","src":"3739:16:21","value":{"kind":"number","nativeSrc":"3753:2:21","nodeType":"YulLiteral","src":"3753:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"3743:6:21","nodeType":"YulTypedName","src":"3743:6:21","type":""}]},{"nativeSrc":"3769:63:21","nodeType":"YulAssignment","src":"3769:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3804:9:21","nodeType":"YulIdentifier","src":"3804:9:21"},{"name":"offset","nativeSrc":"3815:6:21","nodeType":"YulIdentifier","src":"3815:6:21"}],"functionName":{"name":"add","nativeSrc":"3800:3:21","nodeType":"YulIdentifier","src":"3800:3:21"},"nativeSrc":"3800:22:21","nodeType":"YulFunctionCall","src":"3800:22:21"},{"name":"dataEnd","nativeSrc":"3824:7:21","nodeType":"YulIdentifier","src":"3824:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"3779:20:21","nodeType":"YulIdentifier","src":"3779:20:21"},"nativeSrc":"3779:53:21","nodeType":"YulFunctionCall","src":"3779:53:21"},"variableNames":[{"name":"value1","nativeSrc":"3769:6:21","nodeType":"YulIdentifier","src":"3769:6:21"}]}]},{"nativeSrc":"3852:118:21","nodeType":"YulBlock","src":"3852:118:21","statements":[{"nativeSrc":"3867:16:21","nodeType":"YulVariableDeclaration","src":"3867:16:21","value":{"kind":"number","nativeSrc":"3881:2:21","nodeType":"YulLiteral","src":"3881:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"3871:6:21","nodeType":"YulTypedName","src":"3871:6:21","type":""}]},{"nativeSrc":"3897:63:21","nodeType":"YulAssignment","src":"3897:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3932:9:21","nodeType":"YulIdentifier","src":"3932:9:21"},{"name":"offset","nativeSrc":"3943:6:21","nodeType":"YulIdentifier","src":"3943:6:21"}],"functionName":{"name":"add","nativeSrc":"3928:3:21","nodeType":"YulIdentifier","src":"3928:3:21"},"nativeSrc":"3928:22:21","nodeType":"YulFunctionCall","src":"3928:22:21"},{"name":"dataEnd","nativeSrc":"3952:7:21","nodeType":"YulIdentifier","src":"3952:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3907:20:21","nodeType":"YulIdentifier","src":"3907:20:21"},"nativeSrc":"3907:53:21","nodeType":"YulFunctionCall","src":"3907:53:21"},"variableNames":[{"name":"value2","nativeSrc":"3897:6:21","nodeType":"YulIdentifier","src":"3897:6:21"}]}]},{"nativeSrc":"3980:297:21","nodeType":"YulBlock","src":"3980:297:21","statements":[{"nativeSrc":"3995:46:21","nodeType":"YulVariableDeclaration","src":"3995:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4026:9:21","nodeType":"YulIdentifier","src":"4026:9:21"},{"kind":"number","nativeSrc":"4037:2:21","nodeType":"YulLiteral","src":"4037:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4022:3:21","nodeType":"YulIdentifier","src":"4022:3:21"},"nativeSrc":"4022:18:21","nodeType":"YulFunctionCall","src":"4022:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"4009:12:21","nodeType":"YulIdentifier","src":"4009:12:21"},"nativeSrc":"4009:32:21","nodeType":"YulFunctionCall","src":"4009:32:21"},"variables":[{"name":"offset","nativeSrc":"3999:6:21","nodeType":"YulTypedName","src":"3999:6:21","type":""}]},{"body":{"nativeSrc":"4088:83:21","nodeType":"YulBlock","src":"4088:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"4090:77:21","nodeType":"YulIdentifier","src":"4090:77:21"},"nativeSrc":"4090:79:21","nodeType":"YulFunctionCall","src":"4090:79:21"},"nativeSrc":"4090:79:21","nodeType":"YulExpressionStatement","src":"4090:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4060:6:21","nodeType":"YulIdentifier","src":"4060:6:21"},{"kind":"number","nativeSrc":"4068:18:21","nodeType":"YulLiteral","src":"4068:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4057:2:21","nodeType":"YulIdentifier","src":"4057:2:21"},"nativeSrc":"4057:30:21","nodeType":"YulFunctionCall","src":"4057:30:21"},"nativeSrc":"4054:117:21","nodeType":"YulIf","src":"4054:117:21"},{"nativeSrc":"4185:82:21","nodeType":"YulAssignment","src":"4185:82:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4239:9:21","nodeType":"YulIdentifier","src":"4239:9:21"},{"name":"offset","nativeSrc":"4250:6:21","nodeType":"YulIdentifier","src":"4250:6:21"}],"functionName":{"name":"add","nativeSrc":"4235:3:21","nodeType":"YulIdentifier","src":"4235:3:21"},"nativeSrc":"4235:22:21","nodeType":"YulFunctionCall","src":"4235:22:21"},{"name":"dataEnd","nativeSrc":"4259:7:21","nodeType":"YulIdentifier","src":"4259:7:21"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"4203:31:21","nodeType":"YulIdentifier","src":"4203:31:21"},"nativeSrc":"4203:64:21","nodeType":"YulFunctionCall","src":"4203:64:21"},"variableNames":[{"name":"value3","nativeSrc":"4185:6:21","nodeType":"YulIdentifier","src":"4185:6:21"},{"name":"value4","nativeSrc":"4193:6:21","nodeType":"YulIdentifier","src":"4193:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"3321:963:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3395:9:21","nodeType":"YulTypedName","src":"3395:9:21","type":""},{"name":"dataEnd","nativeSrc":"3406:7:21","nodeType":"YulTypedName","src":"3406:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3418:6:21","nodeType":"YulTypedName","src":"3418:6:21","type":""},{"name":"value1","nativeSrc":"3426:6:21","nodeType":"YulTypedName","src":"3426:6:21","type":""},{"name":"value2","nativeSrc":"3434:6:21","nodeType":"YulTypedName","src":"3434:6:21","type":""},{"name":"value3","nativeSrc":"3442:6:21","nodeType":"YulTypedName","src":"3442:6:21","type":""},{"name":"value4","nativeSrc":"3450:6:21","nodeType":"YulTypedName","src":"3450:6:21","type":""}],"src":"3321:963:21"},{"body":{"nativeSrc":"4353:52:21","nodeType":"YulBlock","src":"4353:52:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4370:3:21","nodeType":"YulIdentifier","src":"4370:3:21"},{"arguments":[{"name":"value","nativeSrc":"4392:5:21","nodeType":"YulIdentifier","src":"4392:5:21"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"4375:16:21","nodeType":"YulIdentifier","src":"4375:16:21"},"nativeSrc":"4375:23:21","nodeType":"YulFunctionCall","src":"4375:23:21"}],"functionName":{"name":"mstore","nativeSrc":"4363:6:21","nodeType":"YulIdentifier","src":"4363:6:21"},"nativeSrc":"4363:36:21","nodeType":"YulFunctionCall","src":"4363:36:21"},"nativeSrc":"4363:36:21","nodeType":"YulExpressionStatement","src":"4363:36:21"}]},"name":"abi_encode_t_bytes4_to_t_bytes4_fromStack","nativeSrc":"4290:115:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4341:5:21","nodeType":"YulTypedName","src":"4341:5:21","type":""},{"name":"pos","nativeSrc":"4348:3:21","nodeType":"YulTypedName","src":"4348:3:21","type":""}],"src":"4290:115:21"},{"body":{"nativeSrc":"4507:122:21","nodeType":"YulBlock","src":"4507:122:21","statements":[{"nativeSrc":"4517:26:21","nodeType":"YulAssignment","src":"4517:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"4529:9:21","nodeType":"YulIdentifier","src":"4529:9:21"},{"kind":"number","nativeSrc":"4540:2:21","nodeType":"YulLiteral","src":"4540:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4525:3:21","nodeType":"YulIdentifier","src":"4525:3:21"},"nativeSrc":"4525:18:21","nodeType":"YulFunctionCall","src":"4525:18:21"},"variableNames":[{"name":"tail","nativeSrc":"4517:4:21","nodeType":"YulIdentifier","src":"4517:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4595:6:21","nodeType":"YulIdentifier","src":"4595:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"4608:9:21","nodeType":"YulIdentifier","src":"4608:9:21"},{"kind":"number","nativeSrc":"4619:1:21","nodeType":"YulLiteral","src":"4619:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4604:3:21","nodeType":"YulIdentifier","src":"4604:3:21"},"nativeSrc":"4604:17:21","nodeType":"YulFunctionCall","src":"4604:17:21"}],"functionName":{"name":"abi_encode_t_bytes4_to_t_bytes4_fromStack","nativeSrc":"4553:41:21","nodeType":"YulIdentifier","src":"4553:41:21"},"nativeSrc":"4553:69:21","nodeType":"YulFunctionCall","src":"4553:69:21"},"nativeSrc":"4553:69:21","nodeType":"YulExpressionStatement","src":"4553:69:21"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4411:218:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4479:9:21","nodeType":"YulTypedName","src":"4479:9:21","type":""},{"name":"value0","nativeSrc":"4491:6:21","nodeType":"YulTypedName","src":"4491:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4502:4:21","nodeType":"YulTypedName","src":"4502:4:21","type":""}],"src":"4411:218:21"},{"body":{"nativeSrc":"4742:478:21","nodeType":"YulBlock","src":"4742:478:21","statements":[{"body":{"nativeSrc":"4791:83:21","nodeType":"YulBlock","src":"4791:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"4793:77:21","nodeType":"YulIdentifier","src":"4793:77:21"},"nativeSrc":"4793:79:21","nodeType":"YulFunctionCall","src":"4793:79:21"},"nativeSrc":"4793:79:21","nodeType":"YulExpressionStatement","src":"4793:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4770:6:21","nodeType":"YulIdentifier","src":"4770:6:21"},{"kind":"number","nativeSrc":"4778:4:21","nodeType":"YulLiteral","src":"4778:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4766:3:21","nodeType":"YulIdentifier","src":"4766:3:21"},"nativeSrc":"4766:17:21","nodeType":"YulFunctionCall","src":"4766:17:21"},{"name":"end","nativeSrc":"4785:3:21","nodeType":"YulIdentifier","src":"4785:3:21"}],"functionName":{"name":"slt","nativeSrc":"4762:3:21","nodeType":"YulIdentifier","src":"4762:3:21"},"nativeSrc":"4762:27:21","nodeType":"YulFunctionCall","src":"4762:27:21"}],"functionName":{"name":"iszero","nativeSrc":"4755:6:21","nodeType":"YulIdentifier","src":"4755:6:21"},"nativeSrc":"4755:35:21","nodeType":"YulFunctionCall","src":"4755:35:21"},"nativeSrc":"4752:122:21","nodeType":"YulIf","src":"4752:122:21"},{"nativeSrc":"4883:30:21","nodeType":"YulAssignment","src":"4883:30:21","value":{"arguments":[{"name":"offset","nativeSrc":"4906:6:21","nodeType":"YulIdentifier","src":"4906:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"4893:12:21","nodeType":"YulIdentifier","src":"4893:12:21"},"nativeSrc":"4893:20:21","nodeType":"YulFunctionCall","src":"4893:20:21"},"variableNames":[{"name":"length","nativeSrc":"4883:6:21","nodeType":"YulIdentifier","src":"4883:6:21"}]},{"body":{"nativeSrc":"4956:83:21","nodeType":"YulBlock","src":"4956:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nativeSrc":"4958:77:21","nodeType":"YulIdentifier","src":"4958:77:21"},"nativeSrc":"4958:79:21","nodeType":"YulFunctionCall","src":"4958:79:21"},"nativeSrc":"4958:79:21","nodeType":"YulExpressionStatement","src":"4958:79:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4928:6:21","nodeType":"YulIdentifier","src":"4928:6:21"},{"kind":"number","nativeSrc":"4936:18:21","nodeType":"YulLiteral","src":"4936:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4925:2:21","nodeType":"YulIdentifier","src":"4925:2:21"},"nativeSrc":"4925:30:21","nodeType":"YulFunctionCall","src":"4925:30:21"},"nativeSrc":"4922:117:21","nodeType":"YulIf","src":"4922:117:21"},{"nativeSrc":"5048:29:21","nodeType":"YulAssignment","src":"5048:29:21","value":{"arguments":[{"name":"offset","nativeSrc":"5064:6:21","nodeType":"YulIdentifier","src":"5064:6:21"},{"kind":"number","nativeSrc":"5072:4:21","nodeType":"YulLiteral","src":"5072:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5060:3:21","nodeType":"YulIdentifier","src":"5060:3:21"},"nativeSrc":"5060:17:21","nodeType":"YulFunctionCall","src":"5060:17:21"},"variableNames":[{"name":"arrayPos","nativeSrc":"5048:8:21","nodeType":"YulIdentifier","src":"5048:8:21"}]},{"body":{"nativeSrc":"5131:83:21","nodeType":"YulBlock","src":"5131:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"5133:77:21","nodeType":"YulIdentifier","src":"5133:77:21"},"nativeSrc":"5133:79:21","nodeType":"YulFunctionCall","src":"5133:79:21"},"nativeSrc":"5133:79:21","nodeType":"YulExpressionStatement","src":"5133:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nativeSrc":"5096:8:21","nodeType":"YulIdentifier","src":"5096:8:21"},{"arguments":[{"name":"length","nativeSrc":"5110:6:21","nodeType":"YulIdentifier","src":"5110:6:21"},{"kind":"number","nativeSrc":"5118:4:21","nodeType":"YulLiteral","src":"5118:4:21","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"5106:3:21","nodeType":"YulIdentifier","src":"5106:3:21"},"nativeSrc":"5106:17:21","nodeType":"YulFunctionCall","src":"5106:17:21"}],"functionName":{"name":"add","nativeSrc":"5092:3:21","nodeType":"YulIdentifier","src":"5092:3:21"},"nativeSrc":"5092:32:21","nodeType":"YulFunctionCall","src":"5092:32:21"},{"name":"end","nativeSrc":"5126:3:21","nodeType":"YulIdentifier","src":"5126:3:21"}],"functionName":{"name":"gt","nativeSrc":"5089:2:21","nodeType":"YulIdentifier","src":"5089:2:21"},"nativeSrc":"5089:41:21","nodeType":"YulFunctionCall","src":"5089:41:21"},"nativeSrc":"5086:128:21","nodeType":"YulIf","src":"5086:128:21"}]},"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4652:568:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4709:6:21","nodeType":"YulTypedName","src":"4709:6:21","type":""},{"name":"end","nativeSrc":"4717:3:21","nodeType":"YulTypedName","src":"4717:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"4725:8:21","nodeType":"YulTypedName","src":"4725:8:21","type":""},{"name":"length","nativeSrc":"4735:6:21","nodeType":"YulTypedName","src":"4735:6:21","type":""}],"src":"4652:568:21"},{"body":{"nativeSrc":"5449:1346:21","nodeType":"YulBlock","src":"5449:1346:21","statements":[{"body":{"nativeSrc":"5496:83:21","nodeType":"YulBlock","src":"5496:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5498:77:21","nodeType":"YulIdentifier","src":"5498:77:21"},"nativeSrc":"5498:79:21","nodeType":"YulFunctionCall","src":"5498:79:21"},"nativeSrc":"5498:79:21","nodeType":"YulExpressionStatement","src":"5498:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5470:7:21","nodeType":"YulIdentifier","src":"5470:7:21"},{"name":"headStart","nativeSrc":"5479:9:21","nodeType":"YulIdentifier","src":"5479:9:21"}],"functionName":{"name":"sub","nativeSrc":"5466:3:21","nodeType":"YulIdentifier","src":"5466:3:21"},"nativeSrc":"5466:23:21","nodeType":"YulFunctionCall","src":"5466:23:21"},{"kind":"number","nativeSrc":"5491:3:21","nodeType":"YulLiteral","src":"5491:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"5462:3:21","nodeType":"YulIdentifier","src":"5462:3:21"},"nativeSrc":"5462:33:21","nodeType":"YulFunctionCall","src":"5462:33:21"},"nativeSrc":"5459:120:21","nodeType":"YulIf","src":"5459:120:21"},{"nativeSrc":"5589:117:21","nodeType":"YulBlock","src":"5589:117:21","statements":[{"nativeSrc":"5604:15:21","nodeType":"YulVariableDeclaration","src":"5604:15:21","value":{"kind":"number","nativeSrc":"5618:1:21","nodeType":"YulLiteral","src":"5618:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5608:6:21","nodeType":"YulTypedName","src":"5608:6:21","type":""}]},{"nativeSrc":"5633:63:21","nodeType":"YulAssignment","src":"5633:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5668:9:21","nodeType":"YulIdentifier","src":"5668:9:21"},{"name":"offset","nativeSrc":"5679:6:21","nodeType":"YulIdentifier","src":"5679:6:21"}],"functionName":{"name":"add","nativeSrc":"5664:3:21","nodeType":"YulIdentifier","src":"5664:3:21"},"nativeSrc":"5664:22:21","nodeType":"YulFunctionCall","src":"5664:22:21"},{"name":"dataEnd","nativeSrc":"5688:7:21","nodeType":"YulIdentifier","src":"5688:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5643:20:21","nodeType":"YulIdentifier","src":"5643:20:21"},"nativeSrc":"5643:53:21","nodeType":"YulFunctionCall","src":"5643:53:21"},"variableNames":[{"name":"value0","nativeSrc":"5633:6:21","nodeType":"YulIdentifier","src":"5633:6:21"}]}]},{"nativeSrc":"5716:118:21","nodeType":"YulBlock","src":"5716:118:21","statements":[{"nativeSrc":"5731:16:21","nodeType":"YulVariableDeclaration","src":"5731:16:21","value":{"kind":"number","nativeSrc":"5745:2:21","nodeType":"YulLiteral","src":"5745:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5735:6:21","nodeType":"YulTypedName","src":"5735:6:21","type":""}]},{"nativeSrc":"5761:63:21","nodeType":"YulAssignment","src":"5761:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5796:9:21","nodeType":"YulIdentifier","src":"5796:9:21"},{"name":"offset","nativeSrc":"5807:6:21","nodeType":"YulIdentifier","src":"5807:6:21"}],"functionName":{"name":"add","nativeSrc":"5792:3:21","nodeType":"YulIdentifier","src":"5792:3:21"},"nativeSrc":"5792:22:21","nodeType":"YulFunctionCall","src":"5792:22:21"},{"name":"dataEnd","nativeSrc":"5816:7:21","nodeType":"YulIdentifier","src":"5816:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5771:20:21","nodeType":"YulIdentifier","src":"5771:20:21"},"nativeSrc":"5771:53:21","nodeType":"YulFunctionCall","src":"5771:53:21"},"variableNames":[{"name":"value1","nativeSrc":"5761:6:21","nodeType":"YulIdentifier","src":"5761:6:21"}]}]},{"nativeSrc":"5844:313:21","nodeType":"YulBlock","src":"5844:313:21","statements":[{"nativeSrc":"5859:46:21","nodeType":"YulVariableDeclaration","src":"5859:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5890:9:21","nodeType":"YulIdentifier","src":"5890:9:21"},{"kind":"number","nativeSrc":"5901:2:21","nodeType":"YulLiteral","src":"5901:2:21","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5886:3:21","nodeType":"YulIdentifier","src":"5886:3:21"},"nativeSrc":"5886:18:21","nodeType":"YulFunctionCall","src":"5886:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"5873:12:21","nodeType":"YulIdentifier","src":"5873:12:21"},"nativeSrc":"5873:32:21","nodeType":"YulFunctionCall","src":"5873:32:21"},"variables":[{"name":"offset","nativeSrc":"5863:6:21","nodeType":"YulTypedName","src":"5863:6:21","type":""}]},{"body":{"nativeSrc":"5952:83:21","nodeType":"YulBlock","src":"5952:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"5954:77:21","nodeType":"YulIdentifier","src":"5954:77:21"},"nativeSrc":"5954:79:21","nodeType":"YulFunctionCall","src":"5954:79:21"},"nativeSrc":"5954:79:21","nodeType":"YulExpressionStatement","src":"5954:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5924:6:21","nodeType":"YulIdentifier","src":"5924:6:21"},{"kind":"number","nativeSrc":"5932:18:21","nodeType":"YulLiteral","src":"5932:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5921:2:21","nodeType":"YulIdentifier","src":"5921:2:21"},"nativeSrc":"5921:30:21","nodeType":"YulFunctionCall","src":"5921:30:21"},"nativeSrc":"5918:117:21","nodeType":"YulIf","src":"5918:117:21"},{"nativeSrc":"6049:98:21","nodeType":"YulAssignment","src":"6049:98:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6119:9:21","nodeType":"YulIdentifier","src":"6119:9:21"},{"name":"offset","nativeSrc":"6130:6:21","nodeType":"YulIdentifier","src":"6130:6:21"}],"functionName":{"name":"add","nativeSrc":"6115:3:21","nodeType":"YulIdentifier","src":"6115:3:21"},"nativeSrc":"6115:22:21","nodeType":"YulFunctionCall","src":"6115:22:21"},{"name":"dataEnd","nativeSrc":"6139:7:21","nodeType":"YulIdentifier","src":"6139:7:21"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6067:47:21","nodeType":"YulIdentifier","src":"6067:47:21"},"nativeSrc":"6067:80:21","nodeType":"YulFunctionCall","src":"6067:80:21"},"variableNames":[{"name":"value2","nativeSrc":"6049:6:21","nodeType":"YulIdentifier","src":"6049:6:21"},{"name":"value3","nativeSrc":"6057:6:21","nodeType":"YulIdentifier","src":"6057:6:21"}]}]},{"nativeSrc":"6167:313:21","nodeType":"YulBlock","src":"6167:313:21","statements":[{"nativeSrc":"6182:46:21","nodeType":"YulVariableDeclaration","src":"6182:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6213:9:21","nodeType":"YulIdentifier","src":"6213:9:21"},{"kind":"number","nativeSrc":"6224:2:21","nodeType":"YulLiteral","src":"6224:2:21","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6209:3:21","nodeType":"YulIdentifier","src":"6209:3:21"},"nativeSrc":"6209:18:21","nodeType":"YulFunctionCall","src":"6209:18:21"}],"functionName":{"name":"calldataload","nativeSrc":"6196:12:21","nodeType":"YulIdentifier","src":"6196:12:21"},"nativeSrc":"6196:32:21","nodeType":"YulFunctionCall","src":"6196:32:21"},"variables":[{"name":"offset","nativeSrc":"6186:6:21","nodeType":"YulTypedName","src":"6186:6:21","type":""}]},{"body":{"nativeSrc":"6275:83:21","nodeType":"YulBlock","src":"6275:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"6277:77:21","nodeType":"YulIdentifier","src":"6277:77:21"},"nativeSrc":"6277:79:21","nodeType":"YulFunctionCall","src":"6277:79:21"},"nativeSrc":"6277:79:21","nodeType":"YulExpressionStatement","src":"6277:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6247:6:21","nodeType":"YulIdentifier","src":"6247:6:21"},{"kind":"number","nativeSrc":"6255:18:21","nodeType":"YulLiteral","src":"6255:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6244:2:21","nodeType":"YulIdentifier","src":"6244:2:21"},"nativeSrc":"6244:30:21","nodeType":"YulFunctionCall","src":"6244:30:21"},"nativeSrc":"6241:117:21","nodeType":"YulIf","src":"6241:117:21"},{"nativeSrc":"6372:98:21","nodeType":"YulAssignment","src":"6372:98:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6442:9:21","nodeType":"YulIdentifier","src":"6442:9:21"},{"name":"offset","nativeSrc":"6453:6:21","nodeType":"YulIdentifier","src":"6453:6:21"}],"functionName":{"name":"add","nativeSrc":"6438:3:21","nodeType":"YulIdentifier","src":"6438:3:21"},"nativeSrc":"6438:22:21","nodeType":"YulFunctionCall","src":"6438:22:21"},{"name":"dataEnd","nativeSrc":"6462:7:21","nodeType":"YulIdentifier","src":"6462:7:21"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6390:47:21","nodeType":"YulIdentifier","src":"6390:47:21"},"nativeSrc":"6390:80:21","nodeType":"YulFunctionCall","src":"6390:80:21"},"variableNames":[{"name":"value4","nativeSrc":"6372:6:21","nodeType":"YulIdentifier","src":"6372:6:21"},{"name":"value5","nativeSrc":"6380:6:21","nodeType":"YulIdentifier","src":"6380:6:21"}]}]},{"nativeSrc":"6490:298:21","nodeType":"YulBlock","src":"6490:298:21","statements":[{"nativeSrc":"6505:47:21","nodeType":"YulVariableDeclaration","src":"6505:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6536:9:21","nodeType":"YulIdentifier","src":"6536:9:21"},{"kind":"number","nativeSrc":"6547:3:21","nodeType":"YulLiteral","src":"6547:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6532:3:21","nodeType":"YulIdentifier","src":"6532:3:21"},"nativeSrc":"6532:19:21","nodeType":"YulFunctionCall","src":"6532:19:21"}],"functionName":{"name":"calldataload","nativeSrc":"6519:12:21","nodeType":"YulIdentifier","src":"6519:12:21"},"nativeSrc":"6519:33:21","nodeType":"YulFunctionCall","src":"6519:33:21"},"variables":[{"name":"offset","nativeSrc":"6509:6:21","nodeType":"YulTypedName","src":"6509:6:21","type":""}]},{"body":{"nativeSrc":"6599:83:21","nodeType":"YulBlock","src":"6599:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"6601:77:21","nodeType":"YulIdentifier","src":"6601:77:21"},"nativeSrc":"6601:79:21","nodeType":"YulFunctionCall","src":"6601:79:21"},"nativeSrc":"6601:79:21","nodeType":"YulExpressionStatement","src":"6601:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6571:6:21","nodeType":"YulIdentifier","src":"6571:6:21"},{"kind":"number","nativeSrc":"6579:18:21","nodeType":"YulLiteral","src":"6579:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6568:2:21","nodeType":"YulIdentifier","src":"6568:2:21"},"nativeSrc":"6568:30:21","nodeType":"YulFunctionCall","src":"6568:30:21"},"nativeSrc":"6565:117:21","nodeType":"YulIf","src":"6565:117:21"},{"nativeSrc":"6696:82:21","nodeType":"YulAssignment","src":"6696:82:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6750:9:21","nodeType":"YulIdentifier","src":"6750:9:21"},{"name":"offset","nativeSrc":"6761:6:21","nodeType":"YulIdentifier","src":"6761:6:21"}],"functionName":{"name":"add","nativeSrc":"6746:3:21","nodeType":"YulIdentifier","src":"6746:3:21"},"nativeSrc":"6746:22:21","nodeType":"YulFunctionCall","src":"6746:22:21"},{"name":"dataEnd","nativeSrc":"6770:7:21","nodeType":"YulIdentifier","src":"6770:7:21"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"6714:31:21","nodeType":"YulIdentifier","src":"6714:31:21"},"nativeSrc":"6714:64:21","nodeType":"YulFunctionCall","src":"6714:64:21"},"variableNames":[{"name":"value6","nativeSrc":"6696:6:21","nodeType":"YulIdentifier","src":"6696:6:21"},{"name":"value7","nativeSrc":"6704:6:21","nodeType":"YulIdentifier","src":"6704:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"5226:1569:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5363:9:21","nodeType":"YulTypedName","src":"5363:9:21","type":""},{"name":"dataEnd","nativeSrc":"5374:7:21","nodeType":"YulTypedName","src":"5374:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5386:6:21","nodeType":"YulTypedName","src":"5386:6:21","type":""},{"name":"value1","nativeSrc":"5394:6:21","nodeType":"YulTypedName","src":"5394:6:21","type":""},{"name":"value2","nativeSrc":"5402:6:21","nodeType":"YulTypedName","src":"5402:6:21","type":""},{"name":"value3","nativeSrc":"5410:6:21","nodeType":"YulTypedName","src":"5410:6:21","type":""},{"name":"value4","nativeSrc":"5418:6:21","nodeType":"YulTypedName","src":"5418:6:21","type":""},{"name":"value5","nativeSrc":"5426:6:21","nodeType":"YulTypedName","src":"5426:6:21","type":""},{"name":"value6","nativeSrc":"5434:6:21","nodeType":"YulTypedName","src":"5434:6:21","type":""},{"name":"value7","nativeSrc":"5442:6:21","nodeType":"YulTypedName","src":"5442:6:21","type":""}],"src":"5226:1569:21"},{"body":{"nativeSrc":"6954:956:21","nodeType":"YulBlock","src":"6954:956:21","statements":[{"body":{"nativeSrc":"7001:83:21","nodeType":"YulBlock","src":"7001:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"7003:77:21","nodeType":"YulIdentifier","src":"7003:77:21"},"nativeSrc":"7003:79:21","nodeType":"YulFunctionCall","src":"7003:79:21"},"nativeSrc":"7003:79:21","nodeType":"YulExpressionStatement","src":"7003:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6975:7:21","nodeType":"YulIdentifier","src":"6975:7:21"},{"name":"headStart","nativeSrc":"6984:9:21","nodeType":"YulIdentifier","src":"6984:9:21"}],"functionName":{"name":"sub","nativeSrc":"6971:3:21","nodeType":"YulIdentifier","src":"6971:3:21"},"nativeSrc":"6971:23:21","nodeType":"YulFunctionCall","src":"6971:23:21"},{"kind":"number","nativeSrc":"6996:3:21","nodeType":"YulLiteral","src":"6996:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"6967:3:21","nodeType":"YulIdentifier","src":"6967:3:21"},"nativeSrc":"6967:33:21","nodeType":"YulFunctionCall","src":"6967:33:21"},"nativeSrc":"6964:120:21","nodeType":"YulIf","src":"6964:120:21"},{"nativeSrc":"7094:117:21","nodeType":"YulBlock","src":"7094:117:21","statements":[{"nativeSrc":"7109:15:21","nodeType":"YulVariableDeclaration","src":"7109:15:21","value":{"kind":"number","nativeSrc":"7123:1:21","nodeType":"YulLiteral","src":"7123:1:21","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"7113:6:21","nodeType":"YulTypedName","src":"7113:6:21","type":""}]},{"nativeSrc":"7138:63:21","nodeType":"YulAssignment","src":"7138:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7173:9:21","nodeType":"YulIdentifier","src":"7173:9:21"},{"name":"offset","nativeSrc":"7184:6:21","nodeType":"YulIdentifier","src":"7184:6:21"}],"functionName":{"name":"add","nativeSrc":"7169:3:21","nodeType":"YulIdentifier","src":"7169:3:21"},"nativeSrc":"7169:22:21","nodeType":"YulFunctionCall","src":"7169:22:21"},{"name":"dataEnd","nativeSrc":"7193:7:21","nodeType":"YulIdentifier","src":"7193:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"7148:20:21","nodeType":"YulIdentifier","src":"7148:20:21"},"nativeSrc":"7148:53:21","nodeType":"YulFunctionCall","src":"7148:53:21"},"variableNames":[{"name":"value0","nativeSrc":"7138:6:21","nodeType":"YulIdentifier","src":"7138:6:21"}]}]},{"nativeSrc":"7221:118:21","nodeType":"YulBlock","src":"7221:118:21","statements":[{"nativeSrc":"7236:16:21","nodeType":"YulVariableDeclaration","src":"7236:16:21","value":{"kind":"number","nativeSrc":"7250:2:21","nodeType":"YulLiteral","src":"7250:2:21","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"7240:6:21","nodeType":"YulTypedName","src":"7240:6:21","type":""}]},{"nativeSrc":"7266:63:21","nodeType":"YulAssignment","src":"7266:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7301:9:21","nodeType":"YulIdentifier","src":"7301:9:21"},{"name":"offset","nativeSrc":"7312:6:21","nodeType":"YulIdentifier","src":"7312:6:21"}],"functionName":{"name":"add","nativeSrc":"7297:3:21","nodeType":"YulIdentifier","src":"7297:3:21"},"nativeSrc":"7297:22:21","nodeType":"YulFunctionCall","src":"7297:22:21"},{"name":"dataEnd","nativeSrc":"7321:7:21","nodeType":"YulIdentifier","src":"7321:7:21"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"7276:20:21","nodeType":"YulIdentifier","src":"7276:20:21"},"nativeSrc":"7276:53:21","nodeType":"YulFunctionCall","src":"7276:53:21"},"variableNames":[{"name":"value1","nativeSrc":"7266:6:21","nodeType":"YulIdentifier","src":"7266:6:21"}]}]},{"nativeSrc":"7349:118:21","nodeType":"YulBlock","src":"7349:118:21","statements":[{"nativeSrc":"7364:16:21","nodeType":"YulVariableDeclaration","src":"7364:16:21","value":{"kind":"number","nativeSrc":"7378:2:21","nodeType":"YulLiteral","src":"7378:2:21","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"7368:6:21","nodeType":"YulTypedName","src":"7368:6:21","type":""}]},{"nativeSrc":"7394:63:21","nodeType":"YulAssignment","src":"7394:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7429:9:21","nodeType":"YulIdentifier","src":"7429:9:21"},{"name":"offset","nativeSrc":"7440:6:21","nodeType":"YulIdentifier","src":"7440:6:21"}],"functionName":{"name":"add","nativeSrc":"7425:3:21","nodeType":"YulIdentifier","src":"7425:3:21"},"nativeSrc":"7425:22:21","nodeType":"YulFunctionCall","src":"7425:22:21"},{"name":"dataEnd","nativeSrc":"7449:7:21","nodeType":"YulIdentifier","src":"7449:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"7404:20:21","nodeType":"YulIdentifier","src":"7404:20:21"},"nativeSrc":"7404:53:21","nodeType":"YulFunctionCall","src":"7404:53:21"},"variableNames":[{"name":"value2","nativeSrc":"7394:6:21","nodeType":"YulIdentifier","src":"7394:6:21"}]}]},{"nativeSrc":"7477:118:21","nodeType":"YulBlock","src":"7477:118:21","statements":[{"nativeSrc":"7492:16:21","nodeType":"YulVariableDeclaration","src":"7492:16:21","value":{"kind":"number","nativeSrc":"7506:2:21","nodeType":"YulLiteral","src":"7506:2:21","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"7496:6:21","nodeType":"YulTypedName","src":"7496:6:21","type":""}]},{"nativeSrc":"7522:63:21","nodeType":"YulAssignment","src":"7522:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7557:9:21","nodeType":"YulIdentifier","src":"7557:9:21"},{"name":"offset","nativeSrc":"7568:6:21","nodeType":"YulIdentifier","src":"7568:6:21"}],"functionName":{"name":"add","nativeSrc":"7553:3:21","nodeType":"YulIdentifier","src":"7553:3:21"},"nativeSrc":"7553:22:21","nodeType":"YulFunctionCall","src":"7553:22:21"},{"name":"dataEnd","nativeSrc":"7577:7:21","nodeType":"YulIdentifier","src":"7577:7:21"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"7532:20:21","nodeType":"YulIdentifier","src":"7532:20:21"},"nativeSrc":"7532:53:21","nodeType":"YulFunctionCall","src":"7532:53:21"},"variableNames":[{"name":"value3","nativeSrc":"7522:6:21","nodeType":"YulIdentifier","src":"7522:6:21"}]}]},{"nativeSrc":"7605:298:21","nodeType":"YulBlock","src":"7605:298:21","statements":[{"nativeSrc":"7620:47:21","nodeType":"YulVariableDeclaration","src":"7620:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7651:9:21","nodeType":"YulIdentifier","src":"7651:9:21"},{"kind":"number","nativeSrc":"7662:3:21","nodeType":"YulLiteral","src":"7662:3:21","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7647:3:21","nodeType":"YulIdentifier","src":"7647:3:21"},"nativeSrc":"7647:19:21","nodeType":"YulFunctionCall","src":"7647:19:21"}],"functionName":{"name":"calldataload","nativeSrc":"7634:12:21","nodeType":"YulIdentifier","src":"7634:12:21"},"nativeSrc":"7634:33:21","nodeType":"YulFunctionCall","src":"7634:33:21"},"variables":[{"name":"offset","nativeSrc":"7624:6:21","nodeType":"YulTypedName","src":"7624:6:21","type":""}]},{"body":{"nativeSrc":"7714:83:21","nodeType":"YulBlock","src":"7714:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"7716:77:21","nodeType":"YulIdentifier","src":"7716:77:21"},"nativeSrc":"7716:79:21","nodeType":"YulFunctionCall","src":"7716:79:21"},"nativeSrc":"7716:79:21","nodeType":"YulExpressionStatement","src":"7716:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7686:6:21","nodeType":"YulIdentifier","src":"7686:6:21"},{"kind":"number","nativeSrc":"7694:18:21","nodeType":"YulLiteral","src":"7694:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"7683:2:21","nodeType":"YulIdentifier","src":"7683:2:21"},"nativeSrc":"7683:30:21","nodeType":"YulFunctionCall","src":"7683:30:21"},"nativeSrc":"7680:117:21","nodeType":"YulIf","src":"7680:117:21"},{"nativeSrc":"7811:82:21","nodeType":"YulAssignment","src":"7811:82:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7865:9:21","nodeType":"YulIdentifier","src":"7865:9:21"},{"name":"offset","nativeSrc":"7876:6:21","nodeType":"YulIdentifier","src":"7876:6:21"}],"functionName":{"name":"add","nativeSrc":"7861:3:21","nodeType":"YulIdentifier","src":"7861:3:21"},"nativeSrc":"7861:22:21","nodeType":"YulFunctionCall","src":"7861:22:21"},{"name":"dataEnd","nativeSrc":"7885:7:21","nodeType":"YulIdentifier","src":"7885:7:21"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nativeSrc":"7829:31:21","nodeType":"YulIdentifier","src":"7829:31:21"},"nativeSrc":"7829:64:21","nodeType":"YulFunctionCall","src":"7829:64:21"},"variableNames":[{"name":"value4","nativeSrc":"7811:6:21","nodeType":"YulIdentifier","src":"7811:6:21"},{"name":"value5","nativeSrc":"7819:6:21","nodeType":"YulIdentifier","src":"7819:6:21"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"6801:1109:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6884:9:21","nodeType":"YulTypedName","src":"6884:9:21","type":""},{"name":"dataEnd","nativeSrc":"6895:7:21","nodeType":"YulTypedName","src":"6895:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6907:6:21","nodeType":"YulTypedName","src":"6907:6:21","type":""},{"name":"value1","nativeSrc":"6915:6:21","nodeType":"YulTypedName","src":"6915:6:21","type":""},{"name":"value2","nativeSrc":"6923:6:21","nodeType":"YulTypedName","src":"6923:6:21","type":""},{"name":"value3","nativeSrc":"6931:6:21","nodeType":"YulTypedName","src":"6931:6:21","type":""},{"name":"value4","nativeSrc":"6939:6:21","nodeType":"YulTypedName","src":"6939:6:21","type":""},{"name":"value5","nativeSrc":"6947:6:21","nodeType":"YulTypedName","src":"6947:6:21","type":""}],"src":"6801:1109:21"},{"body":{"nativeSrc":"8005:28:21","nodeType":"YulBlock","src":"8005:28:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8022:1:21","nodeType":"YulLiteral","src":"8022:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"8025:1:21","nodeType":"YulLiteral","src":"8025:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8015:6:21","nodeType":"YulIdentifier","src":"8015:6:21"},"nativeSrc":"8015:12:21","nodeType":"YulFunctionCall","src":"8015:12:21"},"nativeSrc":"8015:12:21","nodeType":"YulExpressionStatement","src":"8015:12:21"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"7916:117:21","nodeType":"YulFunctionDefinition","src":"7916:117:21"},{"body":{"nativeSrc":"8087:54:21","nodeType":"YulBlock","src":"8087:54:21","statements":[{"nativeSrc":"8097:38:21","nodeType":"YulAssignment","src":"8097:38:21","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8115:5:21","nodeType":"YulIdentifier","src":"8115:5:21"},{"kind":"number","nativeSrc":"8122:2:21","nodeType":"YulLiteral","src":"8122:2:21","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"8111:3:21","nodeType":"YulIdentifier","src":"8111:3:21"},"nativeSrc":"8111:14:21","nodeType":"YulFunctionCall","src":"8111:14:21"},{"arguments":[{"kind":"number","nativeSrc":"8131:2:21","nodeType":"YulLiteral","src":"8131:2:21","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"8127:3:21","nodeType":"YulIdentifier","src":"8127:3:21"},"nativeSrc":"8127:7:21","nodeType":"YulFunctionCall","src":"8127:7:21"}],"functionName":{"name":"and","nativeSrc":"8107:3:21","nodeType":"YulIdentifier","src":"8107:3:21"},"nativeSrc":"8107:28:21","nodeType":"YulFunctionCall","src":"8107:28:21"},"variableNames":[{"name":"result","nativeSrc":"8097:6:21","nodeType":"YulIdentifier","src":"8097:6:21"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"8039:102:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8070:5:21","nodeType":"YulTypedName","src":"8070:5:21","type":""}],"returnVariables":[{"name":"result","nativeSrc":"8080:6:21","nodeType":"YulTypedName","src":"8080:6:21","type":""}],"src":"8039:102:21"},{"body":{"nativeSrc":"8175:152:21","nodeType":"YulBlock","src":"8175:152:21","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8192:1:21","nodeType":"YulLiteral","src":"8192:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"8195:77:21","nodeType":"YulLiteral","src":"8195:77:21","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8185:6:21","nodeType":"YulIdentifier","src":"8185:6:21"},"nativeSrc":"8185:88:21","nodeType":"YulFunctionCall","src":"8185:88:21"},"nativeSrc":"8185:88:21","nodeType":"YulExpressionStatement","src":"8185:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8289:1:21","nodeType":"YulLiteral","src":"8289:1:21","type":"","value":"4"},{"kind":"number","nativeSrc":"8292:4:21","nodeType":"YulLiteral","src":"8292:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8282:6:21","nodeType":"YulIdentifier","src":"8282:6:21"},"nativeSrc":"8282:15:21","nodeType":"YulFunctionCall","src":"8282:15:21"},"nativeSrc":"8282:15:21","nodeType":"YulExpressionStatement","src":"8282:15:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8313:1:21","nodeType":"YulLiteral","src":"8313:1:21","type":"","value":"0"},{"kind":"number","nativeSrc":"8316:4:21","nodeType":"YulLiteral","src":"8316:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8306:6:21","nodeType":"YulIdentifier","src":"8306:6:21"},"nativeSrc":"8306:15:21","nodeType":"YulFunctionCall","src":"8306:15:21"},"nativeSrc":"8306:15:21","nodeType":"YulExpressionStatement","src":"8306:15:21"}]},"name":"panic_error_0x41","nativeSrc":"8147:180:21","nodeType":"YulFunctionDefinition","src":"8147:180:21"},{"body":{"nativeSrc":"8376:238:21","nodeType":"YulBlock","src":"8376:238:21","statements":[{"nativeSrc":"8386:58:21","nodeType":"YulVariableDeclaration","src":"8386:58:21","value":{"arguments":[{"name":"memPtr","nativeSrc":"8408:6:21","nodeType":"YulIdentifier","src":"8408:6:21"},{"arguments":[{"name":"size","nativeSrc":"8438:4:21","nodeType":"YulIdentifier","src":"8438:4:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8416:21:21","nodeType":"YulIdentifier","src":"8416:21:21"},"nativeSrc":"8416:27:21","nodeType":"YulFunctionCall","src":"8416:27:21"}],"functionName":{"name":"add","nativeSrc":"8404:3:21","nodeType":"YulIdentifier","src":"8404:3:21"},"nativeSrc":"8404:40:21","nodeType":"YulFunctionCall","src":"8404:40:21"},"variables":[{"name":"newFreePtr","nativeSrc":"8390:10:21","nodeType":"YulTypedName","src":"8390:10:21","type":""}]},{"body":{"nativeSrc":"8555:22:21","nodeType":"YulBlock","src":"8555:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8557:16:21","nodeType":"YulIdentifier","src":"8557:16:21"},"nativeSrc":"8557:18:21","nodeType":"YulFunctionCall","src":"8557:18:21"},"nativeSrc":"8557:18:21","nodeType":"YulExpressionStatement","src":"8557:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"8498:10:21","nodeType":"YulIdentifier","src":"8498:10:21"},{"kind":"number","nativeSrc":"8510:18:21","nodeType":"YulLiteral","src":"8510:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8495:2:21","nodeType":"YulIdentifier","src":"8495:2:21"},"nativeSrc":"8495:34:21","nodeType":"YulFunctionCall","src":"8495:34:21"},{"arguments":[{"name":"newFreePtr","nativeSrc":"8534:10:21","nodeType":"YulIdentifier","src":"8534:10:21"},{"name":"memPtr","nativeSrc":"8546:6:21","nodeType":"YulIdentifier","src":"8546:6:21"}],"functionName":{"name":"lt","nativeSrc":"8531:2:21","nodeType":"YulIdentifier","src":"8531:2:21"},"nativeSrc":"8531:22:21","nodeType":"YulFunctionCall","src":"8531:22:21"}],"functionName":{"name":"or","nativeSrc":"8492:2:21","nodeType":"YulIdentifier","src":"8492:2:21"},"nativeSrc":"8492:62:21","nodeType":"YulFunctionCall","src":"8492:62:21"},"nativeSrc":"8489:88:21","nodeType":"YulIf","src":"8489:88:21"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8593:2:21","nodeType":"YulLiteral","src":"8593:2:21","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"8597:10:21","nodeType":"YulIdentifier","src":"8597:10:21"}],"functionName":{"name":"mstore","nativeSrc":"8586:6:21","nodeType":"YulIdentifier","src":"8586:6:21"},"nativeSrc":"8586:22:21","nodeType":"YulFunctionCall","src":"8586:22:21"},"nativeSrc":"8586:22:21","nodeType":"YulExpressionStatement","src":"8586:22:21"}]},"name":"finalize_allocation","nativeSrc":"8333:281:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"8362:6:21","nodeType":"YulTypedName","src":"8362:6:21","type":""},{"name":"size","nativeSrc":"8370:4:21","nodeType":"YulTypedName","src":"8370:4:21","type":""}],"src":"8333:281:21"},{"body":{"nativeSrc":"8661:88:21","nodeType":"YulBlock","src":"8661:88:21","statements":[{"nativeSrc":"8671:30:21","nodeType":"YulAssignment","src":"8671:30:21","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"8681:18:21","nodeType":"YulIdentifier","src":"8681:18:21"},"nativeSrc":"8681:20:21","nodeType":"YulFunctionCall","src":"8681:20:21"},"variableNames":[{"name":"memPtr","nativeSrc":"8671:6:21","nodeType":"YulIdentifier","src":"8671:6:21"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"8730:6:21","nodeType":"YulIdentifier","src":"8730:6:21"},{"name":"size","nativeSrc":"8738:4:21","nodeType":"YulIdentifier","src":"8738:4:21"}],"functionName":{"name":"finalize_allocation","nativeSrc":"8710:19:21","nodeType":"YulIdentifier","src":"8710:19:21"},"nativeSrc":"8710:33:21","nodeType":"YulFunctionCall","src":"8710:33:21"},"nativeSrc":"8710:33:21","nodeType":"YulExpressionStatement","src":"8710:33:21"}]},"name":"allocate_memory","nativeSrc":"8620:129:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"8645:4:21","nodeType":"YulTypedName","src":"8645:4:21","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"8654:6:21","nodeType":"YulTypedName","src":"8654:6:21","type":""}],"src":"8620:129:21"},{"body":{"nativeSrc":"8822:241:21","nodeType":"YulBlock","src":"8822:241:21","statements":[{"body":{"nativeSrc":"8927:22:21","nodeType":"YulBlock","src":"8927:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8929:16:21","nodeType":"YulIdentifier","src":"8929:16:21"},"nativeSrc":"8929:18:21","nodeType":"YulFunctionCall","src":"8929:18:21"},"nativeSrc":"8929:18:21","nodeType":"YulExpressionStatement","src":"8929:18:21"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"8899:6:21","nodeType":"YulIdentifier","src":"8899:6:21"},{"kind":"number","nativeSrc":"8907:18:21","nodeType":"YulLiteral","src":"8907:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8896:2:21","nodeType":"YulIdentifier","src":"8896:2:21"},"nativeSrc":"8896:30:21","nodeType":"YulFunctionCall","src":"8896:30:21"},"nativeSrc":"8893:56:21","nodeType":"YulIf","src":"8893:56:21"},{"nativeSrc":"8959:37:21","nodeType":"YulAssignment","src":"8959:37:21","value":{"arguments":[{"name":"length","nativeSrc":"8989:6:21","nodeType":"YulIdentifier","src":"8989:6:21"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8967:21:21","nodeType":"YulIdentifier","src":"8967:21:21"},"nativeSrc":"8967:29:21","nodeType":"YulFunctionCall","src":"8967:29:21"},"variableNames":[{"name":"size","nativeSrc":"8959:4:21","nodeType":"YulIdentifier","src":"8959:4:21"}]},{"nativeSrc":"9033:23:21","nodeType":"YulAssignment","src":"9033:23:21","value":{"arguments":[{"name":"size","nativeSrc":"9045:4:21","nodeType":"YulIdentifier","src":"9045:4:21"},{"kind":"number","nativeSrc":"9051:4:21","nodeType":"YulLiteral","src":"9051:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9041:3:21","nodeType":"YulIdentifier","src":"9041:3:21"},"nativeSrc":"9041:15:21","nodeType":"YulFunctionCall","src":"9041:15:21"},"variableNames":[{"name":"size","nativeSrc":"9033:4:21","nodeType":"YulIdentifier","src":"9033:4:21"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"8755:308:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"8806:6:21","nodeType":"YulTypedName","src":"8806:6:21","type":""}],"returnVariables":[{"name":"size","nativeSrc":"8817:4:21","nodeType":"YulTypedName","src":"8817:4:21","type":""}],"src":"8755:308:21"},{"body":{"nativeSrc":"9133:82:21","nodeType":"YulBlock","src":"9133:82:21","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9156:3:21","nodeType":"YulIdentifier","src":"9156:3:21"},{"name":"src","nativeSrc":"9161:3:21","nodeType":"YulIdentifier","src":"9161:3:21"},{"name":"length","nativeSrc":"9166:6:21","nodeType":"YulIdentifier","src":"9166:6:21"}],"functionName":{"name":"calldatacopy","nativeSrc":"9143:12:21","nodeType":"YulIdentifier","src":"9143:12:21"},"nativeSrc":"9143:30:21","nodeType":"YulFunctionCall","src":"9143:30:21"},"nativeSrc":"9143:30:21","nodeType":"YulExpressionStatement","src":"9143:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"9193:3:21","nodeType":"YulIdentifier","src":"9193:3:21"},{"name":"length","nativeSrc":"9198:6:21","nodeType":"YulIdentifier","src":"9198:6:21"}],"functionName":{"name":"add","nativeSrc":"9189:3:21","nodeType":"YulIdentifier","src":"9189:3:21"},"nativeSrc":"9189:16:21","nodeType":"YulFunctionCall","src":"9189:16:21"},{"kind":"number","nativeSrc":"9207:1:21","nodeType":"YulLiteral","src":"9207:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"9182:6:21","nodeType":"YulIdentifier","src":"9182:6:21"},"nativeSrc":"9182:27:21","nodeType":"YulFunctionCall","src":"9182:27:21"},"nativeSrc":"9182:27:21","nodeType":"YulExpressionStatement","src":"9182:27:21"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"9069:146:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"9115:3:21","nodeType":"YulTypedName","src":"9115:3:21","type":""},{"name":"dst","nativeSrc":"9120:3:21","nodeType":"YulTypedName","src":"9120:3:21","type":""},{"name":"length","nativeSrc":"9125:6:21","nodeType":"YulTypedName","src":"9125:6:21","type":""}],"src":"9069:146:21"},{"body":{"nativeSrc":"9305:341:21","nodeType":"YulBlock","src":"9305:341:21","statements":[{"nativeSrc":"9315:75:21","nodeType":"YulAssignment","src":"9315:75:21","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"9382:6:21","nodeType":"YulIdentifier","src":"9382:6:21"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"9340:41:21","nodeType":"YulIdentifier","src":"9340:41:21"},"nativeSrc":"9340:49:21","nodeType":"YulFunctionCall","src":"9340:49:21"}],"functionName":{"name":"allocate_memory","nativeSrc":"9324:15:21","nodeType":"YulIdentifier","src":"9324:15:21"},"nativeSrc":"9324:66:21","nodeType":"YulFunctionCall","src":"9324:66:21"},"variableNames":[{"name":"array","nativeSrc":"9315:5:21","nodeType":"YulIdentifier","src":"9315:5:21"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"9406:5:21","nodeType":"YulIdentifier","src":"9406:5:21"},{"name":"length","nativeSrc":"9413:6:21","nodeType":"YulIdentifier","src":"9413:6:21"}],"functionName":{"name":"mstore","nativeSrc":"9399:6:21","nodeType":"YulIdentifier","src":"9399:6:21"},"nativeSrc":"9399:21:21","nodeType":"YulFunctionCall","src":"9399:21:21"},"nativeSrc":"9399:21:21","nodeType":"YulExpressionStatement","src":"9399:21:21"},{"nativeSrc":"9429:27:21","nodeType":"YulVariableDeclaration","src":"9429:27:21","value":{"arguments":[{"name":"array","nativeSrc":"9444:5:21","nodeType":"YulIdentifier","src":"9444:5:21"},{"kind":"number","nativeSrc":"9451:4:21","nodeType":"YulLiteral","src":"9451:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9440:3:21","nodeType":"YulIdentifier","src":"9440:3:21"},"nativeSrc":"9440:16:21","nodeType":"YulFunctionCall","src":"9440:16:21"},"variables":[{"name":"dst","nativeSrc":"9433:3:21","nodeType":"YulTypedName","src":"9433:3:21","type":""}]},{"body":{"nativeSrc":"9494:83:21","nodeType":"YulBlock","src":"9494:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"9496:77:21","nodeType":"YulIdentifier","src":"9496:77:21"},"nativeSrc":"9496:79:21","nodeType":"YulFunctionCall","src":"9496:79:21"},"nativeSrc":"9496:79:21","nodeType":"YulExpressionStatement","src":"9496:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9475:3:21","nodeType":"YulIdentifier","src":"9475:3:21"},{"name":"length","nativeSrc":"9480:6:21","nodeType":"YulIdentifier","src":"9480:6:21"}],"functionName":{"name":"add","nativeSrc":"9471:3:21","nodeType":"YulIdentifier","src":"9471:3:21"},"nativeSrc":"9471:16:21","nodeType":"YulFunctionCall","src":"9471:16:21"},{"name":"end","nativeSrc":"9489:3:21","nodeType":"YulIdentifier","src":"9489:3:21"}],"functionName":{"name":"gt","nativeSrc":"9468:2:21","nodeType":"YulIdentifier","src":"9468:2:21"},"nativeSrc":"9468:25:21","nodeType":"YulFunctionCall","src":"9468:25:21"},"nativeSrc":"9465:112:21","nodeType":"YulIf","src":"9465:112:21"},{"expression":{"arguments":[{"name":"src","nativeSrc":"9623:3:21","nodeType":"YulIdentifier","src":"9623:3:21"},{"name":"dst","nativeSrc":"9628:3:21","nodeType":"YulIdentifier","src":"9628:3:21"},{"name":"length","nativeSrc":"9633:6:21","nodeType":"YulIdentifier","src":"9633:6:21"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"9586:36:21","nodeType":"YulIdentifier","src":"9586:36:21"},"nativeSrc":"9586:54:21","nodeType":"YulFunctionCall","src":"9586:54:21"},"nativeSrc":"9586:54:21","nodeType":"YulExpressionStatement","src":"9586:54:21"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"9221:425:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"9278:3:21","nodeType":"YulTypedName","src":"9278:3:21","type":""},{"name":"length","nativeSrc":"9283:6:21","nodeType":"YulTypedName","src":"9283:6:21","type":""},{"name":"end","nativeSrc":"9291:3:21","nodeType":"YulTypedName","src":"9291:3:21","type":""}],"returnVariables":[{"name":"array","nativeSrc":"9299:5:21","nodeType":"YulTypedName","src":"9299:5:21","type":""}],"src":"9221:425:21"},{"body":{"nativeSrc":"9728:278:21","nodeType":"YulBlock","src":"9728:278:21","statements":[{"body":{"nativeSrc":"9777:83:21","nodeType":"YulBlock","src":"9777:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"9779:77:21","nodeType":"YulIdentifier","src":"9779:77:21"},"nativeSrc":"9779:79:21","nodeType":"YulFunctionCall","src":"9779:79:21"},"nativeSrc":"9779:79:21","nodeType":"YulExpressionStatement","src":"9779:79:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"9756:6:21","nodeType":"YulIdentifier","src":"9756:6:21"},{"kind":"number","nativeSrc":"9764:4:21","nodeType":"YulLiteral","src":"9764:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9752:3:21","nodeType":"YulIdentifier","src":"9752:3:21"},"nativeSrc":"9752:17:21","nodeType":"YulFunctionCall","src":"9752:17:21"},{"name":"end","nativeSrc":"9771:3:21","nodeType":"YulIdentifier","src":"9771:3:21"}],"functionName":{"name":"slt","nativeSrc":"9748:3:21","nodeType":"YulIdentifier","src":"9748:3:21"},"nativeSrc":"9748:27:21","nodeType":"YulFunctionCall","src":"9748:27:21"}],"functionName":{"name":"iszero","nativeSrc":"9741:6:21","nodeType":"YulIdentifier","src":"9741:6:21"},"nativeSrc":"9741:35:21","nodeType":"YulFunctionCall","src":"9741:35:21"},"nativeSrc":"9738:122:21","nodeType":"YulIf","src":"9738:122:21"},{"nativeSrc":"9869:34:21","nodeType":"YulVariableDeclaration","src":"9869:34:21","value":{"arguments":[{"name":"offset","nativeSrc":"9896:6:21","nodeType":"YulIdentifier","src":"9896:6:21"}],"functionName":{"name":"calldataload","nativeSrc":"9883:12:21","nodeType":"YulIdentifier","src":"9883:12:21"},"nativeSrc":"9883:20:21","nodeType":"YulFunctionCall","src":"9883:20:21"},"variables":[{"name":"length","nativeSrc":"9873:6:21","nodeType":"YulTypedName","src":"9873:6:21","type":""}]},{"nativeSrc":"9912:88:21","nodeType":"YulAssignment","src":"9912:88:21","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"9973:6:21","nodeType":"YulIdentifier","src":"9973:6:21"},{"kind":"number","nativeSrc":"9981:4:21","nodeType":"YulLiteral","src":"9981:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9969:3:21","nodeType":"YulIdentifier","src":"9969:3:21"},"nativeSrc":"9969:17:21","nodeType":"YulFunctionCall","src":"9969:17:21"},{"name":"length","nativeSrc":"9988:6:21","nodeType":"YulIdentifier","src":"9988:6:21"},{"name":"end","nativeSrc":"9996:3:21","nodeType":"YulIdentifier","src":"9996:3:21"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"9921:47:21","nodeType":"YulIdentifier","src":"9921:47:21"},"nativeSrc":"9921:79:21","nodeType":"YulFunctionCall","src":"9921:79:21"},"variableNames":[{"name":"array","nativeSrc":"9912:5:21","nodeType":"YulIdentifier","src":"9912:5:21"}]}]},"name":"abi_decode_t_string_memory_ptr","nativeSrc":"9666:340:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"9706:6:21","nodeType":"YulTypedName","src":"9706:6:21","type":""},{"name":"end","nativeSrc":"9714:3:21","nodeType":"YulTypedName","src":"9714:3:21","type":""}],"returnVariables":[{"name":"array","nativeSrc":"9722:5:21","nodeType":"YulTypedName","src":"9722:5:21","type":""}],"src":"9666:340:21"},{"body":{"nativeSrc":"10088:433:21","nodeType":"YulBlock","src":"10088:433:21","statements":[{"body":{"nativeSrc":"10134:83:21","nodeType":"YulBlock","src":"10134:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"10136:77:21","nodeType":"YulIdentifier","src":"10136:77:21"},"nativeSrc":"10136:79:21","nodeType":"YulFunctionCall","src":"10136:79:21"},"nativeSrc":"10136:79:21","nodeType":"YulExpressionStatement","src":"10136:79:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10109:7:21","nodeType":"YulIdentifier","src":"10109:7:21"},{"name":"headStart","nativeSrc":"10118:9:21","nodeType":"YulIdentifier","src":"10118:9:21"}],"functionName":{"name":"sub","nativeSrc":"10105:3:21","nodeType":"YulIdentifier","src":"10105:3:21"},"nativeSrc":"10105:23:21","nodeType":"YulFunctionCall","src":"10105:23:21"},{"kind":"number","nativeSrc":"10130:2:21","nodeType":"YulLiteral","src":"10130:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10101:3:21","nodeType":"YulIdentifier","src":"10101:3:21"},"nativeSrc":"10101:32:21","nodeType":"YulFunctionCall","src":"10101:32:21"},"nativeSrc":"10098:119:21","nodeType":"YulIf","src":"10098:119:21"},{"nativeSrc":"10227:287:21","nodeType":"YulBlock","src":"10227:287:21","statements":[{"nativeSrc":"10242:45:21","nodeType":"YulVariableDeclaration","src":"10242:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10273:9:21","nodeType":"YulIdentifier","src":"10273:9:21"},{"kind":"number","nativeSrc":"10284:1:21","nodeType":"YulLiteral","src":"10284:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10269:3:21","nodeType":"YulIdentifier","src":"10269:3:21"},"nativeSrc":"10269:17:21","nodeType":"YulFunctionCall","src":"10269:17:21"}],"functionName":{"name":"calldataload","nativeSrc":"10256:12:21","nodeType":"YulIdentifier","src":"10256:12:21"},"nativeSrc":"10256:31:21","nodeType":"YulFunctionCall","src":"10256:31:21"},"variables":[{"name":"offset","nativeSrc":"10246:6:21","nodeType":"YulTypedName","src":"10246:6:21","type":""}]},{"body":{"nativeSrc":"10334:83:21","nodeType":"YulBlock","src":"10334:83:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"10336:77:21","nodeType":"YulIdentifier","src":"10336:77:21"},"nativeSrc":"10336:79:21","nodeType":"YulFunctionCall","src":"10336:79:21"},"nativeSrc":"10336:79:21","nodeType":"YulExpressionStatement","src":"10336:79:21"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"10306:6:21","nodeType":"YulIdentifier","src":"10306:6:21"},{"kind":"number","nativeSrc":"10314:18:21","nodeType":"YulLiteral","src":"10314:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10303:2:21","nodeType":"YulIdentifier","src":"10303:2:21"},"nativeSrc":"10303:30:21","nodeType":"YulFunctionCall","src":"10303:30:21"},"nativeSrc":"10300:117:21","nodeType":"YulIf","src":"10300:117:21"},{"nativeSrc":"10431:73:21","nodeType":"YulAssignment","src":"10431:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10476:9:21","nodeType":"YulIdentifier","src":"10476:9:21"},{"name":"offset","nativeSrc":"10487:6:21","nodeType":"YulIdentifier","src":"10487:6:21"}],"functionName":{"name":"add","nativeSrc":"10472:3:21","nodeType":"YulIdentifier","src":"10472:3:21"},"nativeSrc":"10472:22:21","nodeType":"YulFunctionCall","src":"10472:22:21"},{"name":"dataEnd","nativeSrc":"10496:7:21","nodeType":"YulIdentifier","src":"10496:7:21"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"10441:30:21","nodeType":"YulIdentifier","src":"10441:30:21"},"nativeSrc":"10441:63:21","nodeType":"YulFunctionCall","src":"10441:63:21"},"variableNames":[{"name":"value0","nativeSrc":"10431:6:21","nodeType":"YulIdentifier","src":"10431:6:21"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nativeSrc":"10012:509:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10058:9:21","nodeType":"YulTypedName","src":"10058:9:21","type":""},{"name":"dataEnd","nativeSrc":"10069:7:21","nodeType":"YulTypedName","src":"10069:7:21","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10081:6:21","nodeType":"YulTypedName","src":"10081:6:21","type":""}],"src":"10012:509:21"},{"body":{"nativeSrc":"10592:53:21","nodeType":"YulBlock","src":"10592:53:21","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10609:3:21","nodeType":"YulIdentifier","src":"10609:3:21"},{"arguments":[{"name":"value","nativeSrc":"10632:5:21","nodeType":"YulIdentifier","src":"10632:5:21"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"10614:17:21","nodeType":"YulIdentifier","src":"10614:17:21"},"nativeSrc":"10614:24:21","nodeType":"YulFunctionCall","src":"10614:24:21"}],"functionName":{"name":"mstore","nativeSrc":"10602:6:21","nodeType":"YulIdentifier","src":"10602:6:21"},"nativeSrc":"10602:37:21","nodeType":"YulFunctionCall","src":"10602:37:21"},"nativeSrc":"10602:37:21","nodeType":"YulExpressionStatement","src":"10602:37:21"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"10527:118:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10580:5:21","nodeType":"YulTypedName","src":"10580:5:21","type":""},{"name":"pos","nativeSrc":"10587:3:21","nodeType":"YulTypedName","src":"10587:3:21","type":""}],"src":"10527:118:21"},{"body":{"nativeSrc":"10749:124:21","nodeType":"YulBlock","src":"10749:124:21","statements":[{"nativeSrc":"10759:26:21","nodeType":"YulAssignment","src":"10759:26:21","value":{"arguments":[{"name":"headStart","nativeSrc":"10771:9:21","nodeType":"YulIdentifier","src":"10771:9:21"},{"kind":"number","nativeSrc":"10782:2:21","nodeType":"YulLiteral","src":"10782:2:21","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10767:3:21","nodeType":"YulIdentifier","src":"10767:3:21"},"nativeSrc":"10767:18:21","nodeType":"YulFunctionCall","src":"10767:18:21"},"variableNames":[{"name":"tail","nativeSrc":"10759:4:21","nodeType":"YulIdentifier","src":"10759:4:21"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"10839:6:21","nodeType":"YulIdentifier","src":"10839:6:21"},{"arguments":[{"name":"headStart","nativeSrc":"10852:9:21","nodeType":"YulIdentifier","src":"10852:9:21"},{"kind":"number","nativeSrc":"10863:1:21","nodeType":"YulLiteral","src":"10863:1:21","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"10848:3:21","nodeType":"YulIdentifier","src":"10848:3:21"},"nativeSrc":"10848:17:21","nodeType":"YulFunctionCall","src":"10848:17:21"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"10795:43:21","nodeType":"YulIdentifier","src":"10795:43:21"},"nativeSrc":"10795:71:21","nodeType":"YulFunctionCall","src":"10795:71:21"},"nativeSrc":"10795:71:21","nodeType":"YulExpressionStatement","src":"10795:71:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"10651:222:21","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10721:9:21","nodeType":"YulTypedName","src":"10721:9:21","type":""},{"name":"value0","nativeSrc":"10733:6:21","nodeType":"YulTypedName","src":"10733:6:21","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10744:4:21","nodeType":"YulTypedName","src":"10744:4:21","type":""}],"src":"10651:222:21"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes4(value))\n    }\n\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_array$_t_uint256_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value6, value7 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040526004361061004e5760003560e01c806301ffc9a71461005a578063150b7a0214610097578063bc197c81146100d4578063f23a6e6114610111578063ffb1500e1461014e57610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906103a8565b61018b565b60405161008e91906103f0565b60405180910390f35b3480156100a357600080fd5b506100be60048036038101906100b99190610504565b6102c5565b6040516100cb919061059b565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f6919061060c565b6102da565b604051610108919061059b565b60405180910390f35b34801561011d57600080fd5b50610138600480360381019061013391906106e8565b6102f2565b604051610145919061059b565b60405180910390f35b34801561015a57600080fd5b50610175600480360381019061017091906108c3565b610308565b604051610182919061091b565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061025657507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806102be57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b600063bc197c8160e01b905098975050505050505050565b600063f23a6e6160e01b90509695505050505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090508060000154905081565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61038581610350565b811461039057600080fd5b50565b6000813590506103a28161037c565b92915050565b6000602082840312156103be576103bd610346565b5b60006103cc84828501610393565b91505092915050565b60008115159050919050565b6103ea816103d5565b82525050565b600060208201905061040560008301846103e1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104368261040b565b9050919050565b6104468161042b565b811461045157600080fd5b50565b6000813590506104638161043d565b92915050565b6000819050919050565b61047c81610469565b811461048757600080fd5b50565b60008135905061049981610473565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104c4576104c361049f565b5b8235905067ffffffffffffffff8111156104e1576104e06104a4565b5b6020830191508360018202830111156104fd576104fc6104a9565b5b9250929050565b6000806000806000608086880312156105205761051f610346565b5b600061052e88828901610454565b955050602061053f88828901610454565b94505060406105508882890161048a565b935050606086013567ffffffffffffffff8111156105715761057061034b565b5b61057d888289016104ae565b92509250509295509295909350565b61059581610350565b82525050565b60006020820190506105b0600083018461058c565b92915050565b60008083601f8401126105cc576105cb61049f565b5b8235905067ffffffffffffffff8111156105e9576105e86104a4565b5b602083019150836020820283011115610605576106046104a9565b5b9250929050565b60008060008060008060008060a0898b03121561062c5761062b610346565b5b600061063a8b828c01610454565b985050602061064b8b828c01610454565b975050604089013567ffffffffffffffff81111561066c5761066b61034b565b5b6106788b828c016105b6565b9650965050606089013567ffffffffffffffff81111561069b5761069a61034b565b5b6106a78b828c016105b6565b9450945050608089013567ffffffffffffffff8111156106ca576106c961034b565b5b6106d68b828c016104ae565b92509250509295985092959890939650565b60008060008060008060a0878903121561070557610704610346565b5b600061071389828a01610454565b965050602061072489828a01610454565b955050604061073589828a0161048a565b945050606061074689828a0161048a565b935050608087013567ffffffffffffffff8111156107675761076661034b565b5b61077389828a016104ae565b92509250509295509295509295565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107d082610787565b810181811067ffffffffffffffff821117156107ef576107ee610798565b5b80604052505050565b600061080261033c565b905061080e82826107c7565b919050565b600067ffffffffffffffff82111561082e5761082d610798565b5b61083782610787565b9050602081019050919050565b82818337600083830152505050565b600061086661086184610813565b6107f8565b90508281526020810184848401111561088257610881610782565b5b61088d848285610844565b509392505050565b600082601f8301126108aa576108a961049f565b5b81356108ba848260208601610853565b91505092915050565b6000602082840312156108d9576108d8610346565b5b600082013567ffffffffffffffff8111156108f7576108f661034b565b5b61090384828501610895565b91505092915050565b61091581610469565b82525050565b6000602082019050610930600083018461090c565b9291505056fea2646970667358221220fc2ed18d477743e567f5b29aafdf82fe34eaa4fb7e576097c00094e6c5f7be4e64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0xFFB1500E EQ PUSH2 0x14E JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7C SWAP2 SWAP1 PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E SWAP2 SWAP1 PUSH2 0x3F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB9 SWAP2 SWAP1 PUSH2 0x504 JUMP JUMPDEST PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCB SWAP2 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x60C JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108 SWAP2 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x133 SWAP2 SWAP1 PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x2F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x175 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x170 SWAP2 SWAP1 PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x91B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x4E2312E000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x256 JUMPI POP PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x2BE JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x150B7A02 PUSH1 0xE0 SHL SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x385 DUP2 PUSH2 0x350 JUMP JUMPDEST DUP2 EQ PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3A2 DUP2 PUSH2 0x37C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BE JUMPI PUSH2 0x3BD PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3CC DUP5 DUP3 DUP6 ADD PUSH2 0x393 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3EA DUP2 PUSH2 0x3D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x405 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436 DUP3 PUSH2 0x40B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x446 DUP2 PUSH2 0x42B JUMP JUMPDEST DUP2 EQ PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x463 DUP2 PUSH2 0x43D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x47C DUP2 PUSH2 0x469 JUMP JUMPDEST DUP2 EQ PUSH2 0x487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x499 DUP2 PUSH2 0x473 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x4C4 JUMPI PUSH2 0x4C3 PUSH2 0x49F JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4E1 JUMPI PUSH2 0x4E0 PUSH2 0x4A4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x4FD JUMPI PUSH2 0x4FC PUSH2 0x4A9 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x520 JUMPI PUSH2 0x51F PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x52E DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x53F DUP9 DUP3 DUP10 ADD PUSH2 0x454 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x550 DUP9 DUP3 DUP10 ADD PUSH2 0x48A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x571 JUMPI PUSH2 0x570 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x57D DUP9 DUP3 DUP10 ADD PUSH2 0x4AE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x595 DUP2 PUSH2 0x350 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5B0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x58C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x5CC JUMPI PUSH2 0x5CB PUSH2 0x49F JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5E9 JUMPI PUSH2 0x5E8 PUSH2 0x4A4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x605 JUMPI PUSH2 0x604 PUSH2 0x4A9 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x62C JUMPI PUSH2 0x62B PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x63A DUP12 DUP3 DUP13 ADD PUSH2 0x454 JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x64B DUP12 DUP3 DUP13 ADD PUSH2 0x454 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x66C JUMPI PUSH2 0x66B PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x678 DUP12 DUP3 DUP13 ADD PUSH2 0x5B6 JUMP JUMPDEST SWAP7 POP SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x69B JUMPI PUSH2 0x69A PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x6A7 DUP12 DUP3 DUP13 ADD PUSH2 0x5B6 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6CA JUMPI PUSH2 0x6C9 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x6D6 DUP12 DUP3 DUP13 ADD PUSH2 0x4AE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x705 JUMPI PUSH2 0x704 PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x713 DUP10 DUP3 DUP11 ADD PUSH2 0x454 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x724 DUP10 DUP3 DUP11 ADD PUSH2 0x454 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x735 DUP10 DUP3 DUP11 ADD PUSH2 0x48A JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x746 DUP10 DUP3 DUP11 ADD PUSH2 0x48A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x767 JUMPI PUSH2 0x766 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x773 DUP10 DUP3 DUP11 ADD PUSH2 0x4AE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x7D0 DUP3 PUSH2 0x787 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7EF JUMPI PUSH2 0x7EE PUSH2 0x798 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x802 PUSH2 0x33C JUMP JUMPDEST SWAP1 POP PUSH2 0x80E DUP3 DUP3 PUSH2 0x7C7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x82E JUMPI PUSH2 0x82D PUSH2 0x798 JUMP JUMPDEST JUMPDEST PUSH2 0x837 DUP3 PUSH2 0x787 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 PUSH2 0x861 DUP5 PUSH2 0x813 JUMP JUMPDEST PUSH2 0x7F8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x882 JUMPI PUSH2 0x881 PUSH2 0x782 JUMP JUMPDEST JUMPDEST PUSH2 0x88D DUP5 DUP3 DUP6 PUSH2 0x844 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8AA JUMPI PUSH2 0x8A9 PUSH2 0x49F JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8BA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x853 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8D9 JUMPI PUSH2 0x8D8 PUSH2 0x346 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x8F7 JUMPI PUSH2 0x8F6 PUSH2 0x34B JUMP JUMPDEST JUMPDEST PUSH2 0x903 DUP5 DUP3 DUP6 ADD PUSH2 0x895 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x915 DUP2 PUSH2 0x469 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x930 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC 0x2E 0xD1 DUP14 SELFBALANCE PUSH24 0x43E567F5B29AAFDF82FE34EAA4FB7E576097C00094E6C5F7 0xBE 0x4E PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"372:7968:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8040:298;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7269:226;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7756:278;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7501:249;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;848:57;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8040:298;8127:4;8177:34;8162:49;;;:11;:49;;;;:113;;;;8242:33;8227:48;;;:11;:48;;;;8162:113;:169;;;;8306:25;8291:40;;;:11;:40;;;;8162:169;8143:188;;8040:298;;;:::o;7269:226::-;7453:6;7478:10;7471:17;;;;7269:226;;;;;;;:::o;7756:278::-;7992:6;8017:10;8010:17;;;;7756:278;;;;;;;;;;:::o;7501:249::-;7708:6;7733:10;7726:17;;;;7501:249;;;;;;;;:::o;848:57::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:21:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:126::-;1555:7;1595:42;1588:5;1584:54;1573:65;;1518:126;;;:::o;1650:96::-;1687:7;1716:24;1734:5;1716:24;:::i;:::-;1705:35;;1650:96;;;:::o;1752:122::-;1825:24;1843:5;1825:24;:::i;:::-;1818:5;1815:35;1805:63;;1864:1;1861;1854:12;1805:63;1752:122;:::o;1880:139::-;1926:5;1964:6;1951:20;1942:29;;1980:33;2007:5;1980:33;:::i;:::-;1880:139;;;;:::o;2025:77::-;2062:7;2091:5;2080:16;;2025:77;;;:::o;2108:122::-;2181:24;2199:5;2181:24;:::i;:::-;2174:5;2171:35;2161:63;;2220:1;2217;2210:12;2161:63;2108:122;:::o;2236:139::-;2282:5;2320:6;2307:20;2298:29;;2336:33;2363:5;2336:33;:::i;:::-;2236:139;;;;:::o;2381:117::-;2490:1;2487;2480:12;2504:117;2613:1;2610;2603:12;2627:117;2736:1;2733;2726:12;2763:552;2820:8;2830:6;2880:3;2873:4;2865:6;2861:17;2857:27;2847:122;;2888:79;;:::i;:::-;2847:122;3001:6;2988:20;2978:30;;3031:18;3023:6;3020:30;3017:117;;;3053:79;;:::i;:::-;3017:117;3167:4;3159:6;3155:17;3143:29;;3221:3;3213:4;3205:6;3201:17;3191:8;3187:32;3184:41;3181:128;;;3228:79;;:::i;:::-;3181:128;2763:552;;;;;:::o;3321:963::-;3418:6;3426;3434;3442;3450;3499:3;3487:9;3478:7;3474:23;3470:33;3467:120;;;3506:79;;:::i;:::-;3467:120;3626:1;3651:53;3696:7;3687:6;3676:9;3672:22;3651:53;:::i;:::-;3641:63;;3597:117;3753:2;3779:53;3824:7;3815:6;3804:9;3800:22;3779:53;:::i;:::-;3769:63;;3724:118;3881:2;3907:53;3952:7;3943:6;3932:9;3928:22;3907:53;:::i;:::-;3897:63;;3852:118;4037:2;4026:9;4022:18;4009:32;4068:18;4060:6;4057:30;4054:117;;;4090:79;;:::i;:::-;4054:117;4203:64;4259:7;4250:6;4239:9;4235:22;4203:64;:::i;:::-;4185:82;;;;3980:297;3321:963;;;;;;;;:::o;4290:115::-;4375:23;4392:5;4375:23;:::i;:::-;4370:3;4363:36;4290:115;;:::o;4411:218::-;4502:4;4540:2;4529:9;4525:18;4517:26;;4553:69;4619:1;4608:9;4604:17;4595:6;4553:69;:::i;:::-;4411:218;;;;:::o;4652:568::-;4725:8;4735:6;4785:3;4778:4;4770:6;4766:17;4762:27;4752:122;;4793:79;;:::i;:::-;4752:122;4906:6;4893:20;4883:30;;4936:18;4928:6;4925:30;4922:117;;;4958:79;;:::i;:::-;4922:117;5072:4;5064:6;5060:17;5048:29;;5126:3;5118:4;5110:6;5106:17;5096:8;5092:32;5089:41;5086:128;;;5133:79;;:::i;:::-;5086:128;4652:568;;;;;:::o;5226:1569::-;5386:6;5394;5402;5410;5418;5426;5434;5442;5491:3;5479:9;5470:7;5466:23;5462:33;5459:120;;;5498:79;;:::i;:::-;5459:120;5618:1;5643:53;5688:7;5679:6;5668:9;5664:22;5643:53;:::i;:::-;5633:63;;5589:117;5745:2;5771:53;5816:7;5807:6;5796:9;5792:22;5771:53;:::i;:::-;5761:63;;5716:118;5901:2;5890:9;5886:18;5873:32;5932:18;5924:6;5921:30;5918:117;;;5954:79;;:::i;:::-;5918:117;6067:80;6139:7;6130:6;6119:9;6115:22;6067:80;:::i;:::-;6049:98;;;;5844:313;6224:2;6213:9;6209:18;6196:32;6255:18;6247:6;6244:30;6241:117;;;6277:79;;:::i;:::-;6241:117;6390:80;6462:7;6453:6;6442:9;6438:22;6390:80;:::i;:::-;6372:98;;;;6167:313;6547:3;6536:9;6532:19;6519:33;6579:18;6571:6;6568:30;6565:117;;;6601:79;;:::i;:::-;6565:117;6714:64;6770:7;6761:6;6750:9;6746:22;6714:64;:::i;:::-;6696:82;;;;6490:298;5226:1569;;;;;;;;;;;:::o;6801:1109::-;6907:6;6915;6923;6931;6939;6947;6996:3;6984:9;6975:7;6971:23;6967:33;6964:120;;;7003:79;;:::i;:::-;6964:120;7123:1;7148:53;7193:7;7184:6;7173:9;7169:22;7148:53;:::i;:::-;7138:63;;7094:117;7250:2;7276:53;7321:7;7312:6;7301:9;7297:22;7276:53;:::i;:::-;7266:63;;7221:118;7378:2;7404:53;7449:7;7440:6;7429:9;7425:22;7404:53;:::i;:::-;7394:63;;7349:118;7506:2;7532:53;7577:7;7568:6;7557:9;7553:22;7532:53;:::i;:::-;7522:63;;7477:118;7662:3;7651:9;7647:19;7634:33;7694:18;7686:6;7683:30;7680:117;;;7716:79;;:::i;:::-;7680:117;7829:64;7885:7;7876:6;7865:9;7861:22;7829:64;:::i;:::-;7811:82;;;;7605:298;6801:1109;;;;;;;;:::o;7916:117::-;8025:1;8022;8015:12;8039:102;8080:6;8131:2;8127:7;8122:2;8115:5;8111:14;8107:28;8097:38;;8039:102;;;:::o;8147:180::-;8195:77;8192:1;8185:88;8292:4;8289:1;8282:15;8316:4;8313:1;8306:15;8333:281;8416:27;8438:4;8416:27;:::i;:::-;8408:6;8404:40;8546:6;8534:10;8531:22;8510:18;8498:10;8495:34;8492:62;8489:88;;;8557:18;;:::i;:::-;8489:88;8597:10;8593:2;8586:22;8376:238;8333:281;;:::o;8620:129::-;8654:6;8681:20;;:::i;:::-;8671:30;;8710:33;8738:4;8730:6;8710:33;:::i;:::-;8620:129;;;:::o;8755:308::-;8817:4;8907:18;8899:6;8896:30;8893:56;;;8929:18;;:::i;:::-;8893:56;8967:29;8989:6;8967:29;:::i;:::-;8959:37;;9051:4;9045;9041:15;9033:23;;8755:308;;;:::o;9069:146::-;9166:6;9161:3;9156;9143:30;9207:1;9198:6;9193:3;9189:16;9182:27;9069:146;;;:::o;9221:425::-;9299:5;9324:66;9340:49;9382:6;9340:49;:::i;:::-;9324:66;:::i;:::-;9315:75;;9413:6;9406:5;9399:21;9451:4;9444:5;9440:16;9489:3;9480:6;9475:3;9471:16;9468:25;9465:112;;;9496:79;;:::i;:::-;9465:112;9586:54;9633:6;9628:3;9623;9586:54;:::i;:::-;9305:341;9221:425;;;;;:::o;9666:340::-;9722:5;9771:3;9764:4;9756:6;9752:17;9748:27;9738:122;;9779:79;;:::i;:::-;9738:122;9896:6;9883:20;9921:79;9996:3;9988:6;9981:4;9973:6;9969:17;9921:79;:::i;:::-;9912:88;;9728:278;9666:340;;;;:::o;10012:509::-;10081:6;10130:2;10118:9;10109:7;10105:23;10101:32;10098:119;;;10136:79;;:::i;:::-;10098:119;10284:1;10273:9;10269:17;10256:31;10314:18;10306:6;10303:30;10300:117;;;10336:79;;:::i;:::-;10300:117;10441:63;10496:7;10487:6;10476:9;10472:22;10441:63;:::i;:::-;10431:73;;10227:287;10012:509;;;;:::o;10527:118::-;10614:24;10632:5;10614:24;:::i;:::-;10609:3;10602:37;10527:118;;:::o;10651:222::-;10744:4;10782:2;10771:9;10767:18;10759:26;;10795:71;10863:1;10852:9;10848:17;10839:6;10795:71;:::i;:::-;10651:222;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"482400","executionCost":"5524","totalCost":"487924"},"external":{"contractBalance(string)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","supportsInterface(bytes4)":"708"},"internal":{"_detectAssetTypeFromInterfaceId(address)":"infinite","_fundERC1155(string memory,address,address,uint256,uint256)":"infinite","_fundERC1155Batch(string memory,address,address,uint256[] calldata,uint256[] calldata)":"infinite","_fundERC20(string memory,address,address,uint256)":"infinite","_fundERC721(string memory,address,address,uint256)":"infinite","_fundNative(string memory,uint256)":"infinite","_getAssetType(address)":"infinite","_safeBatchTransferERC1155(string memory,address,address,uint256[] memory,uint256[] memory,bytes memory)":"infinite","_safeTransferERC1155(string memory,address,address,uint256,uint256,bytes memory)":"infinite","_safeTransferERC721(string memory,address,address,uint256,bytes memory)":"infinite","_transferERC20(string memory,address,address,uint256)":"infinite","_transferFromERC20(string memory,address,address,uint256)":"infinite","_transferNative(string memory,address payable,uint256)":"infinite"}},"methodIdentifiers":{"contractBalance(string)":"ffb1500e","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AssetNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AssetTypeNotFoundForToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum TokenReceiver.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"name\":\"InvalidAssetType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"enum TokenReceiver.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferNativeFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ERC1155BatchReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"ERC1155Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenReceiver.sol\":\"TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract TokenReceiver is\\n    IERC721Receiver,\\n    IERC1155Receiver\\n{\\n    enum AssetType {\\n        NONE,\\n        NATIVE,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    uint256 totalNativeBalance = 0;\\n\\n    struct AssetBalance {\\n        uint256 native;\\n        mapping(address token => uint256) erc20;\\n        mapping(address token => mapping(uint256 tokenId => bool)) erc721;\\n        mapping(address token => mapping(uint256 tokenId => uint256)) erc1155;\\n    }\\n\\n    mapping(string id => AssetBalance) public contractBalance;\\n\\n    // internal variables\\n\\n    mapping(address token => AssetType assetType) internal assetTypeMap;\\n\\n    // events\\n\\n    event NativeReceived(string id, address from, uint256 amount);\\n\\n    event ERC20Received(\\n        string id,\\n        address from,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event ERC721Received(\\n        string id,\\n        address operator,\\n        address from,\\n        uint256 tokenId\\n    );\\n\\n    event ERC1155Received(\\n        string id,\\n        address operator,\\n        address from,\\n        uint256 tokenIds,\\n        uint256 amounts\\n    );\\n    \\n    event ERC1155BatchReceived(\\n        string id,\\n        address operator,\\n        address from,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n\\n    // errors\\n\\n    error AssetNotFound(string id, address token);\\n    error InvalidAssetType(AssetType assetType);\\n    error AssetTypeNotFoundForToken(address token);\\n\\n    error TransferNativeFailed(string id, address to, uint256 amount);\\n    \\n    error NotEnoughFunds(string id, AssetType assetType, address token, uint256 tokenId, uint256 amount);\\n\\n    // internal helpers\\n\\n\\n    function _getAssetType(address token) internal view returns (AssetType) {\\n        if (assetTypeMap[token] == AssetType.NONE)\\n            revert AssetTypeNotFoundForToken(token);\\n\\n        return assetTypeMap[token];\\n    }\\n\\n    function _detectAssetTypeFromInterfaceId(\\n        address token\\n    ) internal view returns (AssetType) {\\n        if (token == address(0)) {\\n            return AssetType.NATIVE;\\n        } else if (IERC1155(token).supportsInterface(0xd9b67a26)) {\\n            return AssetType.ERC1155;\\n        } else if (IERC721(token).supportsInterface(0x80ac58cd)) {\\n            return AssetType.ERC721;\\n        } else if (IERC20(token).totalSupply() > 0) {\\n            return AssetType.ERC20;\\n        }\\n\\n        return AssetType.NONE;\\n    }\\n\\n    // fund assets\\n\\n    receive() external payable {}\\n\\n    function _fundNative(\\n        string memory id,\\n        uint256 amount\\n    ) internal {\\n        contractBalance[id].native += amount;\\n        \\n        emit NativeReceived(id, msg.sender, amount);\\n    }\\n\\n    function _fundERC20(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        contractBalance[id].erc20[token] += amount;\\n        \\n        emit ERC20Received(id, from, token, amount);\\n    }\\n\\n    function _fundERC721(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256 tokenId\\n    ) internal {\\n        contractBalance[id].erc721[token][tokenId] = true;\\n\\n        emit ERC721Received(id, from, token, tokenId);\\n    }\\n\\n    function _fundERC1155(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        contractBalance[id].erc1155[token][tokenId] += amount;\\n\\n        emit ERC1155Received(id, from, token, tokenId, amount);\\n    }\\n\\n    function _fundERC1155Batch(\\n        string memory id,\\n        address from,\\n        address token,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) internal {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            contractBalance[id].erc1155[token][tokenIds[i]] += amounts[i];\\n        }\\n\\n        emit ERC1155BatchReceived(id, from, token, tokenIds, amounts);\\n    }\\n\\n    // transfer assets\\n\\n    function _transferNative(\\n        string memory id,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (contractBalance[id].native < amount)\\n            revert NotEnoughFunds(id, AssetType.NATIVE, address(0), 0, amount);\\n\\n        contractBalance[id].native -= amount;\\n\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        if (!success) revert TransferNativeFailed(id, to, amount);\\n    }\\n\\n    function _transferFromERC20(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (contractBalance[id].erc20[token] < amount)\\n            revert NotEnoughFunds(id, AssetType.ERC20, token, 0, amount);\\n\\n        contractBalance[id].erc20[token] -= amount;\\n\\n        IERC20(token).transferFrom(address(this), to, amount);\\n    }\\n\\n    function _transferERC20(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (contractBalance[id].erc20[token] < amount)\\n            revert NotEnoughFunds(id, AssetType.ERC20, token, 0, amount);\\n\\n        contractBalance[id].erc20[token] -= amount;\\n\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    function _safeTransferERC721(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (!contractBalance[id].erc721[token][tokenId])\\n            revert NotEnoughFunds(id, AssetType.ERC721, token, tokenId, 0);\\n\\n        contractBalance[id].erc721[token][tokenId] = false;\\n\\n        IERC721(token).safeTransferFrom(address(this), to, tokenId, data);\\n    }\\n\\n    function _safeTransferERC1155(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        if (contractBalance[id].erc1155[token][tokenId] < amount)\\n            revert NotEnoughFunds(id, AssetType.ERC1155, token, tokenId, amount);\\n\\n        contractBalance[id].erc1155[token][tokenId] -= amount;\\n\\n        IERC1155(token).safeTransferFrom(\\n            address(this),\\n            to,\\n            tokenId,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    function _safeBatchTransferERC1155(\\n        string memory id,\\n        address to,\\n        address token,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (contractBalance[id].erc1155[token][tokenIds[i]] < amounts[i])\\n                revert NotEnoughFunds(id, AssetType.ERC1155, token, tokenIds[i], amounts[i]);\\n\\n            contractBalance[id].erc1155[token][tokenIds[i]] -= amounts[i];\\n        }\\n\\n        IERC1155(token).safeBatchTransferFrom(\\n            address(this),\\n            to,\\n            tokenIds,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    // _withdrawBatchAssets()\\n\\n    // hooks\\n\\n    function onERC721Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // tokenId,\\n        bytes calldata // data\\n    ) external virtual override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function onERC1155Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // id,\\n        uint256, // value,\\n        bytes calldata // data\\n    ) external virtual override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address, // operator,\\n        address, // from,\\n        uint256[] calldata, // ids,\\n        uint256[] calldata, // values,\\n        bytes calldata // data\\n    ) external virtual override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\",\"keccak256\":\"0x2edae817d0e12f236bfafdd15a1a3ae25df8281c2b61285b1bdbc5a898f5418c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3581,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"totalNativeBalance","offset":0,"slot":"0","type":"t_uint256"},{"astId":3605,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"contractBalance","offset":0,"slot":"1","type":"t_mapping(t_string_memory_ptr,t_struct(AssetBalance)3600_storage)"},{"astId":3610,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"assetTypeMap","offset":0,"slot":"2","type":"t_mapping(t_address,t_enum(AssetType)3578)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_enum(AssetType)3578":{"encoding":"inplace","label":"enum TokenReceiver.AssetType","numberOfBytes":"1"},"t_mapping(t_address,t_enum(AssetType)3578)":{"encoding":"mapping","key":"t_address","label":"mapping(address => enum TokenReceiver.AssetType)","numberOfBytes":"32","value":"t_enum(AssetType)3578"},"t_mapping(t_address,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_string_memory_ptr,t_struct(AssetBalance)3600_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => struct TokenReceiver.AssetBalance)","numberOfBytes":"32","value":"t_struct(AssetBalance)3600_storage"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AssetBalance)3600_storage":{"encoding":"inplace","label":"struct TokenReceiver.AssetBalance","members":[{"astId":3583,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"native","offset":0,"slot":"0","type":"t_uint256"},{"astId":3587,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"erc20","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":3593,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"erc721","offset":0,"slot":"2","type":"t_mapping(t_address,t_mapping(t_uint256,t_bool))"},{"astId":3599,"contract":"contracts/TokenReceiver.sol:TokenReceiver","label":"erc1155","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}