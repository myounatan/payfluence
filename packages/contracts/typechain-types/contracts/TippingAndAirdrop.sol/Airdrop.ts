/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AirdropInterface extends Interface {
  getFunction(nameOrSignature: "executeAirdrop" | "owner"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AirdropExecuted"): EventFragment;

  encodeFunctionData(
    functionFragment: "executeAirdrop",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "executeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export namespace AirdropExecutedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [to: string, amount: bigint, token: string];
  export interface OutputObject {
    to: string;
    amount: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Airdrop extends BaseContract {
  connect(runner?: ContractRunner | null): Airdrop;
  waitForDeployment(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeAirdrop: TypedContractMethod<
    [token: AddressLike, recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeAirdrop"
  ): TypedContractMethod<
    [token: AddressLike, recipients: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AirdropExecuted"
  ): TypedContractEvent<
    AirdropExecutedEvent.InputTuple,
    AirdropExecutedEvent.OutputTuple,
    AirdropExecutedEvent.OutputObject
  >;

  filters: {
    "AirdropExecuted(address,uint256,address)": TypedContractEvent<
      AirdropExecutedEvent.InputTuple,
      AirdropExecutedEvent.OutputTuple,
      AirdropExecutedEvent.OutputObject
    >;
    AirdropExecuted: TypedContractEvent<
      AirdropExecutedEvent.InputTuple,
      AirdropExecutedEvent.OutputTuple,
      AirdropExecutedEvent.OutputObject
    >;
  };
}
