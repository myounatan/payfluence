/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EchoeCampaignsV1 {
  export type RewardAssetsParamsStruct = {
    tokens: AddressLike[];
    assetTypes: BigNumberish[];
    amounts: BigNumberish[];
    tokenIds: BigNumberish[];
  };

  export type RewardAssetsParamsStructOutput = [
    tokens: string[],
    assetTypes: bigint[],
    amounts: bigint[],
    tokenIds: bigint[]
  ] & {
    tokens: string[];
    assetTypes: bigint[];
    amounts: bigint[];
    tokenIds: bigint[];
  };

  export type RewardMetricsParamsStruct = {
    platform: BigNumberish;
    postId: BytesLike;
    metricIds: BigNumberish[];
    values: BigNumberish[];
  };

  export type RewardMetricsParamsStructOutput = [
    platform: bigint,
    postId: string,
    metricIds: bigint[],
    values: bigint[]
  ] & {
    platform: bigint;
    postId: string;
    metricIds: bigint[];
    values: bigint[];
  };

  export type RewardParamsStruct = {
    participant: AddressLike;
    assetsParams: EchoeCampaignsV1.RewardAssetsParamsStruct;
    metricsParams: EchoeCampaignsV1.RewardMetricsParamsStruct;
  };

  export type RewardParamsStructOutput = [
    participant: string,
    assetsParams: EchoeCampaignsV1.RewardAssetsParamsStructOutput,
    metricsParams: EchoeCampaignsV1.RewardMetricsParamsStructOutput
  ] & {
    participant: string;
    assetsParams: EchoeCampaignsV1.RewardAssetsParamsStructOutput;
    metricsParams: EchoeCampaignsV1.RewardMetricsParamsStructOutput;
  };
}

export interface EchoeCampaignsV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "adminSetPublished"
      | "adminWithdraw"
      | "archiveAndWithdrawAllAssets"
      | "backendAdmin"
      | "campaigns"
      | "contractBalance"
      | "createCampaign"
      | "getPostMetrics"
      | "getPostMetricsBatch"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "participantBalance"
      | "paused"
      | "pendingOwner"
      | "postMetrics"
      | "publishAndSetTimeRange"
      | "renounceOwnership"
      | "rewardParticipant"
      | "rewardParticipantBatch"
      | "setBackendAdmin"
      | "setPublished"
      | "setTimeRange"
      | "supportsInterface"
      | "transferOwnership"
      | "withdrawAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "ERC1155BatchReceived"
      | "ERC1155Received"
      | "ERC20Received"
      | "ERC721Received"
      | "LastPayoutAtUpdated"
      | "LastUpdatedAtUpdated"
      | "NativeReceived"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "PublishedUpdated"
      | "RewardParticipant"
      | "TimeRangeUpdated"
      | "Unpaused"
      | "WithdrawAsset"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetPublished",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "archiveAndWithdrawAllAssets",
    values: [
      string,
      AddressLike,
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "backendAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "campaigns", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostMetrics",
    values: [BigNumberish, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostMetricsBatch",
    values: [BigNumberish, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participantBalance",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postMetrics",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publishAndSetTimeRange",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardParticipant",
    values: [string, EchoeCampaignsV1.RewardParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardParticipantBatch",
    values: [string, EchoeCampaignsV1.RewardParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackendAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublished",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeRange",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsset",
    values: [
      string,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetPublished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archiveAndWithdrawAllAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backendAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPostMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPostMetricsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participantBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishAndSetTimeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardParticipantBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackendAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsset",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    id: string,
    creator: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    indexedpublished: boolean
  ];
  export type OutputTuple = [
    id: string,
    creator: string,
    startTime: bigint,
    endTime: bigint,
    indexedpublished: boolean
  ];
  export interface OutputObject {
    id: string;
    creator: string;
    startTime: bigint;
    endTime: bigint;
    indexedpublished: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC1155BatchReceivedEvent {
  export type InputTuple = [
    id: string,
    operator: AddressLike,
    from: AddressLike,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    id: string,
    operator: string,
    from: string,
    tokenIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    id: string;
    operator: string;
    from: string;
    tokenIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC1155ReceivedEvent {
  export type InputTuple = [
    id: string,
    operator: AddressLike,
    from: AddressLike,
    tokenIds: BigNumberish,
    amounts: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    operator: string,
    from: string,
    tokenIds: bigint,
    amounts: bigint
  ];
  export interface OutputObject {
    id: string;
    operator: string;
    from: string;
    tokenIds: bigint;
    amounts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20ReceivedEvent {
  export type InputTuple = [
    id: string,
    from: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    from: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: string;
    from: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721ReceivedEvent {
  export type InputTuple = [
    id: string,
    operator: AddressLike,
    from: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    operator: string,
    from: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    id: string;
    operator: string;
    from: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastPayoutAtUpdatedEvent {
  export type InputTuple = [id: string, lastPayoutAt: BigNumberish];
  export type OutputTuple = [id: string, lastPayoutAt: bigint];
  export interface OutputObject {
    id: string;
    lastPayoutAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastUpdatedAtUpdatedEvent {
  export type InputTuple = [id: string, lastUpdatedAt: BigNumberish];
  export type OutputTuple = [id: string, lastUpdatedAt: bigint];
  export interface OutputObject {
    id: string;
    lastUpdatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeReceivedEvent {
  export type InputTuple = [
    id: string,
    from: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: string, from: string, amount: bigint];
  export interface OutputObject {
    id: string;
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublishedUpdatedEvent {
  export type InputTuple = [id: string, published: boolean];
  export type OutputTuple = [id: string, published: boolean];
  export interface OutputObject {
    id: string;
    published: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardParticipantEvent {
  export type InputTuple = [
    id: string,
    participant: AddressLike,
    tokens: AddressLike[],
    assetTypes: BigNumberish[],
    amount: BigNumberish,
    tokenId: BigNumberish,
    platform: BigNumberish,
    postId: BytesLike,
    metricIds: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    id: string,
    participant: string,
    tokens: string[],
    assetTypes: bigint[],
    amount: bigint,
    tokenId: bigint,
    platform: bigint,
    postId: string,
    metricIds: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    id: string;
    participant: string;
    tokens: string[];
    assetTypes: bigint[];
    amount: bigint;
    tokenId: bigint;
    platform: bigint;
    postId: string;
    metricIds: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimeRangeUpdatedEvent {
  export type InputTuple = [
    id: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [id: string, startTime: bigint, endTime: bigint];
  export interface OutputObject {
    id: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawAssetEvent {
  export type InputTuple = [
    id: string,
    to: AddressLike,
    token: AddressLike,
    assetType: BigNumberish,
    amount: BigNumberish,
    tokenId: BigNumberish,
    liabilityEnvoked: boolean
  ];
  export type OutputTuple = [
    id: string,
    to: string,
    token: string,
    assetType: bigint,
    amount: bigint,
    tokenId: bigint,
    liabilityEnvoked: boolean
  ];
  export interface OutputObject {
    id: string;
    to: string;
    token: string;
    assetType: bigint;
    amount: bigint;
    tokenId: bigint;
    liabilityEnvoked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EchoeCampaignsV1 extends BaseContract {
  connect(runner?: ContractRunner | null): EchoeCampaignsV1;
  waitForDeployment(): Promise<this>;

  interface: EchoeCampaignsV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  adminSetPublished: TypedContractMethod<
    [id: string, published: boolean],
    [void],
    "nonpayable"
  >;

  adminWithdraw: TypedContractMethod<
    [
      id: string,
      to: AddressLike,
      token: AddressLike,
      assetType: BigNumberish,
      amount: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  archiveAndWithdrawAllAssets: TypedContractMethod<
    [
      id: string,
      to: AddressLike,
      tokens: AddressLike[],
      assetTypes: BigNumberish[],
      amounts: BigNumberish[],
      tokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  backendAdmin: TypedContractMethod<[], [string], "view">;

  campaigns: TypedContractMethod<
    [id: string],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        startTime: bigint;
        endTime: bigint;
        lastUpdatedAt: bigint;
        lastPayoutAt: bigint;
        published: boolean;
      }
    ],
    "view"
  >;

  contractBalance: TypedContractMethod<[id: string], [bigint], "view">;

  createCampaign: TypedContractMethod<
    [id: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPostMetrics: TypedContractMethod<
    [platform: BigNumberish, postIds: BytesLike[], metricIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  getPostMetricsBatch: TypedContractMethod<
    [platform: BigNumberish, postIds: BytesLike[], metricIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  participantBalance: TypedContractMethod<
    [id: string, participant: AddressLike],
    [bigint],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  postMetrics: TypedContractMethod<
    [platform: BigNumberish, postId: BytesLike, metricId: BigNumberish],
    [bigint],
    "view"
  >;

  publishAndSetTimeRange: TypedContractMethod<
    [id: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardParticipant: TypedContractMethod<
    [id: string, params: EchoeCampaignsV1.RewardParamsStruct],
    [void],
    "nonpayable"
  >;

  rewardParticipantBatch: TypedContractMethod<
    [id: string, params: EchoeCampaignsV1.RewardParamsStruct[]],
    [void],
    "nonpayable"
  >;

  setBackendAdmin: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  setPublished: TypedContractMethod<
    [id: string, published: boolean],
    [void],
    "nonpayable"
  >;

  setTimeRange: TypedContractMethod<
    [id: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAsset: TypedContractMethod<
    [
      id: string,
      to: AddressLike,
      token: AddressLike,
      assetType: BigNumberish,
      amount: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminSetPublished"
  ): TypedContractMethod<
    [id: string, published: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminWithdraw"
  ): TypedContractMethod<
    [
      id: string,
      to: AddressLike,
      token: AddressLike,
      assetType: BigNumberish,
      amount: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "archiveAndWithdrawAllAssets"
  ): TypedContractMethod<
    [
      id: string,
      to: AddressLike,
      tokens: AddressLike[],
      assetTypes: BigNumberish[],
      amounts: BigNumberish[],
      tokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "backendAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [id: string],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        creator: string;
        startTime: bigint;
        endTime: bigint;
        lastUpdatedAt: bigint;
        lastPayoutAt: bigint;
        published: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractBalance"
  ): TypedContractMethod<[id: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [id: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPostMetrics"
  ): TypedContractMethod<
    [platform: BigNumberish, postIds: BytesLike[], metricIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPostMetricsBatch"
  ): TypedContractMethod<
    [platform: BigNumberish, postIds: BytesLike[], metricIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participantBalance"
  ): TypedContractMethod<
    [id: string, participant: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postMetrics"
  ): TypedContractMethod<
    [platform: BigNumberish, postId: BytesLike, metricId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishAndSetTimeRange"
  ): TypedContractMethod<
    [id: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardParticipant"
  ): TypedContractMethod<
    [id: string, params: EchoeCampaignsV1.RewardParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardParticipantBatch"
  ): TypedContractMethod<
    [id: string, params: EchoeCampaignsV1.RewardParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBackendAdmin"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublished"
  ): TypedContractMethod<
    [id: string, published: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeRange"
  ): TypedContractMethod<
    [id: string, startTime: BigNumberish, endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAsset"
  ): TypedContractMethod<
    [
      id: string,
      to: AddressLike,
      token: AddressLike,
      assetType: BigNumberish,
      amount: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ERC1155BatchReceived"
  ): TypedContractEvent<
    ERC1155BatchReceivedEvent.InputTuple,
    ERC1155BatchReceivedEvent.OutputTuple,
    ERC1155BatchReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ERC1155Received"
  ): TypedContractEvent<
    ERC1155ReceivedEvent.InputTuple,
    ERC1155ReceivedEvent.OutputTuple,
    ERC1155ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Received"
  ): TypedContractEvent<
    ERC20ReceivedEvent.InputTuple,
    ERC20ReceivedEvent.OutputTuple,
    ERC20ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ERC721Received"
  ): TypedContractEvent<
    ERC721ReceivedEvent.InputTuple,
    ERC721ReceivedEvent.OutputTuple,
    ERC721ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "LastPayoutAtUpdated"
  ): TypedContractEvent<
    LastPayoutAtUpdatedEvent.InputTuple,
    LastPayoutAtUpdatedEvent.OutputTuple,
    LastPayoutAtUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LastUpdatedAtUpdated"
  ): TypedContractEvent<
    LastUpdatedAtUpdatedEvent.InputTuple,
    LastUpdatedAtUpdatedEvent.OutputTuple,
    LastUpdatedAtUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NativeReceived"
  ): TypedContractEvent<
    NativeReceivedEvent.InputTuple,
    NativeReceivedEvent.OutputTuple,
    NativeReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PublishedUpdated"
  ): TypedContractEvent<
    PublishedUpdatedEvent.InputTuple,
    PublishedUpdatedEvent.OutputTuple,
    PublishedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardParticipant"
  ): TypedContractEvent<
    RewardParticipantEvent.InputTuple,
    RewardParticipantEvent.OutputTuple,
    RewardParticipantEvent.OutputObject
  >;
  getEvent(
    key: "TimeRangeUpdated"
  ): TypedContractEvent<
    TimeRangeUpdatedEvent.InputTuple,
    TimeRangeUpdatedEvent.OutputTuple,
    TimeRangeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawAsset"
  ): TypedContractEvent<
    WithdrawAssetEvent.InputTuple,
    WithdrawAssetEvent.OutputTuple,
    WithdrawAssetEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(string,address,uint256,uint256,bool)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "ERC1155BatchReceived(string,address,address,uint256[],uint256[])": TypedContractEvent<
      ERC1155BatchReceivedEvent.InputTuple,
      ERC1155BatchReceivedEvent.OutputTuple,
      ERC1155BatchReceivedEvent.OutputObject
    >;
    ERC1155BatchReceived: TypedContractEvent<
      ERC1155BatchReceivedEvent.InputTuple,
      ERC1155BatchReceivedEvent.OutputTuple,
      ERC1155BatchReceivedEvent.OutputObject
    >;

    "ERC1155Received(string,address,address,uint256,uint256)": TypedContractEvent<
      ERC1155ReceivedEvent.InputTuple,
      ERC1155ReceivedEvent.OutputTuple,
      ERC1155ReceivedEvent.OutputObject
    >;
    ERC1155Received: TypedContractEvent<
      ERC1155ReceivedEvent.InputTuple,
      ERC1155ReceivedEvent.OutputTuple,
      ERC1155ReceivedEvent.OutputObject
    >;

    "ERC20Received(string,address,address,uint256)": TypedContractEvent<
      ERC20ReceivedEvent.InputTuple,
      ERC20ReceivedEvent.OutputTuple,
      ERC20ReceivedEvent.OutputObject
    >;
    ERC20Received: TypedContractEvent<
      ERC20ReceivedEvent.InputTuple,
      ERC20ReceivedEvent.OutputTuple,
      ERC20ReceivedEvent.OutputObject
    >;

    "ERC721Received(string,address,address,uint256)": TypedContractEvent<
      ERC721ReceivedEvent.InputTuple,
      ERC721ReceivedEvent.OutputTuple,
      ERC721ReceivedEvent.OutputObject
    >;
    ERC721Received: TypedContractEvent<
      ERC721ReceivedEvent.InputTuple,
      ERC721ReceivedEvent.OutputTuple,
      ERC721ReceivedEvent.OutputObject
    >;

    "LastPayoutAtUpdated(string,uint256)": TypedContractEvent<
      LastPayoutAtUpdatedEvent.InputTuple,
      LastPayoutAtUpdatedEvent.OutputTuple,
      LastPayoutAtUpdatedEvent.OutputObject
    >;
    LastPayoutAtUpdated: TypedContractEvent<
      LastPayoutAtUpdatedEvent.InputTuple,
      LastPayoutAtUpdatedEvent.OutputTuple,
      LastPayoutAtUpdatedEvent.OutputObject
    >;

    "LastUpdatedAtUpdated(string,uint256)": TypedContractEvent<
      LastUpdatedAtUpdatedEvent.InputTuple,
      LastUpdatedAtUpdatedEvent.OutputTuple,
      LastUpdatedAtUpdatedEvent.OutputObject
    >;
    LastUpdatedAtUpdated: TypedContractEvent<
      LastUpdatedAtUpdatedEvent.InputTuple,
      LastUpdatedAtUpdatedEvent.OutputTuple,
      LastUpdatedAtUpdatedEvent.OutputObject
    >;

    "NativeReceived(string,address,uint256)": TypedContractEvent<
      NativeReceivedEvent.InputTuple,
      NativeReceivedEvent.OutputTuple,
      NativeReceivedEvent.OutputObject
    >;
    NativeReceived: TypedContractEvent<
      NativeReceivedEvent.InputTuple,
      NativeReceivedEvent.OutputTuple,
      NativeReceivedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PublishedUpdated(string,bool)": TypedContractEvent<
      PublishedUpdatedEvent.InputTuple,
      PublishedUpdatedEvent.OutputTuple,
      PublishedUpdatedEvent.OutputObject
    >;
    PublishedUpdated: TypedContractEvent<
      PublishedUpdatedEvent.InputTuple,
      PublishedUpdatedEvent.OutputTuple,
      PublishedUpdatedEvent.OutputObject
    >;

    "RewardParticipant(string,address,address[],uint8[],uint256,uint256,uint256,bytes32,uint256[],uint256[])": TypedContractEvent<
      RewardParticipantEvent.InputTuple,
      RewardParticipantEvent.OutputTuple,
      RewardParticipantEvent.OutputObject
    >;
    RewardParticipant: TypedContractEvent<
      RewardParticipantEvent.InputTuple,
      RewardParticipantEvent.OutputTuple,
      RewardParticipantEvent.OutputObject
    >;

    "TimeRangeUpdated(string,uint256,uint256)": TypedContractEvent<
      TimeRangeUpdatedEvent.InputTuple,
      TimeRangeUpdatedEvent.OutputTuple,
      TimeRangeUpdatedEvent.OutputObject
    >;
    TimeRangeUpdated: TypedContractEvent<
      TimeRangeUpdatedEvent.InputTuple,
      TimeRangeUpdatedEvent.OutputTuple,
      TimeRangeUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WithdrawAsset(string,address,address,uint8,uint256,uint256,bool)": TypedContractEvent<
      WithdrawAssetEvent.InputTuple,
      WithdrawAssetEvent.OutputTuple,
      WithdrawAssetEvent.OutputObject
    >;
    WithdrawAsset: TypedContractEvent<
      WithdrawAssetEvent.InputTuple,
      WithdrawAssetEvent.OutputTuple,
      WithdrawAssetEvent.OutputObject
    >;
  };
}
