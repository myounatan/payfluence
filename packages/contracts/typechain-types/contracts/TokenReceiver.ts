/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenReceiverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contractBalance"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC1155BatchReceived"
      | "ERC1155Received"
      | "ERC20Received"
      | "ERC721Received"
      | "NativeReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contractBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace ERC1155BatchReceivedEvent {
  export type InputTuple = [
    id: string,
    operator: AddressLike,
    from: AddressLike,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    id: string,
    operator: string,
    from: string,
    tokenIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    id: string;
    operator: string;
    from: string;
    tokenIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC1155ReceivedEvent {
  export type InputTuple = [
    id: string,
    operator: AddressLike,
    from: AddressLike,
    tokenIds: BigNumberish,
    amounts: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    operator: string,
    from: string,
    tokenIds: bigint,
    amounts: bigint
  ];
  export interface OutputObject {
    id: string;
    operator: string;
    from: string;
    tokenIds: bigint;
    amounts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20ReceivedEvent {
  export type InputTuple = [
    id: string,
    from: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    from: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: string;
    from: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721ReceivedEvent {
  export type InputTuple = [
    id: string,
    operator: AddressLike,
    from: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    operator: string,
    from: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    id: string;
    operator: string;
    from: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeReceivedEvent {
  export type InputTuple = [
    id: string,
    from: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: string, from: string, amount: bigint];
  export interface OutputObject {
    id: string;
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): TokenReceiver;
  waitForDeployment(): Promise<this>;

  interface: TokenReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contractBalance: TypedContractMethod<[id: string], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contractBalance"
  ): TypedContractMethod<[id: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "ERC1155BatchReceived"
  ): TypedContractEvent<
    ERC1155BatchReceivedEvent.InputTuple,
    ERC1155BatchReceivedEvent.OutputTuple,
    ERC1155BatchReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ERC1155Received"
  ): TypedContractEvent<
    ERC1155ReceivedEvent.InputTuple,
    ERC1155ReceivedEvent.OutputTuple,
    ERC1155ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Received"
  ): TypedContractEvent<
    ERC20ReceivedEvent.InputTuple,
    ERC20ReceivedEvent.OutputTuple,
    ERC20ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ERC721Received"
  ): TypedContractEvent<
    ERC721ReceivedEvent.InputTuple,
    ERC721ReceivedEvent.OutputTuple,
    ERC721ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "NativeReceived"
  ): TypedContractEvent<
    NativeReceivedEvent.InputTuple,
    NativeReceivedEvent.OutputTuple,
    NativeReceivedEvent.OutputObject
  >;

  filters: {
    "ERC1155BatchReceived(string,address,address,uint256[],uint256[])": TypedContractEvent<
      ERC1155BatchReceivedEvent.InputTuple,
      ERC1155BatchReceivedEvent.OutputTuple,
      ERC1155BatchReceivedEvent.OutputObject
    >;
    ERC1155BatchReceived: TypedContractEvent<
      ERC1155BatchReceivedEvent.InputTuple,
      ERC1155BatchReceivedEvent.OutputTuple,
      ERC1155BatchReceivedEvent.OutputObject
    >;

    "ERC1155Received(string,address,address,uint256,uint256)": TypedContractEvent<
      ERC1155ReceivedEvent.InputTuple,
      ERC1155ReceivedEvent.OutputTuple,
      ERC1155ReceivedEvent.OutputObject
    >;
    ERC1155Received: TypedContractEvent<
      ERC1155ReceivedEvent.InputTuple,
      ERC1155ReceivedEvent.OutputTuple,
      ERC1155ReceivedEvent.OutputObject
    >;

    "ERC20Received(string,address,address,uint256)": TypedContractEvent<
      ERC20ReceivedEvent.InputTuple,
      ERC20ReceivedEvent.OutputTuple,
      ERC20ReceivedEvent.OutputObject
    >;
    ERC20Received: TypedContractEvent<
      ERC20ReceivedEvent.InputTuple,
      ERC20ReceivedEvent.OutputTuple,
      ERC20ReceivedEvent.OutputObject
    >;

    "ERC721Received(string,address,address,uint256)": TypedContractEvent<
      ERC721ReceivedEvent.InputTuple,
      ERC721ReceivedEvent.OutputTuple,
      ERC721ReceivedEvent.OutputObject
    >;
    ERC721Received: TypedContractEvent<
      ERC721ReceivedEvent.InputTuple,
      ERC721ReceivedEvent.OutputTuple,
      ERC721ReceivedEvent.OutputObject
    >;

    "NativeReceived(string,address,uint256)": TypedContractEvent<
      NativeReceivedEvent.InputTuple,
      NativeReceivedEvent.OutputTuple,
      NativeReceivedEvent.OutputObject
    >;
    NativeReceived: TypedContractEvent<
      NativeReceivedEvent.InputTuple,
      NativeReceivedEvent.OutputTuple,
      NativeReceivedEvent.OutputObject
    >;
  };
}
